[
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "GWF workflow",
    "section": "",
    "text": "from gwf import Workflow\nimport sys, os, re\nfrom collections import defaultdict\nfrom pathlib import Path\nimport pandas as pd\nfrom gwf import Workflow, AnonymousTarget\nfrom gwf.workflow import collect\n\ngwf = Workflow(defaults={'account': 'ari-intern'})\n\n\n# directories\nout_dir = '/home/ari/ari-intern/people/ari/ariadna-intern/steps'\ndata_big = '/faststorage/project/ari-intern/data'\nscript_dir = '/faststorage/project/ari-intern/people/ari/ariadna-intern/scripts'\ndata_dir = '/faststorage/project/ari-intern/people/ari/ariadna-intern/steps/1000genome'\n\n# function that modifies file path\ndef modify_path(p, parent=None, base=None, suffix=None):\n    par, name = os.path.split(p)\n    name_no_suffix, suf = os.path.splitext(name)\n    if type(suffix) is str:\n        suf = suffix\n    if parent is not None:\n        par = parent\n    if base is not None:\n        name_no_suffix = base\n\n    new_path = os.path.join(par, name_no_suffix + suf)\n    if type(suffix) is tuple:\n        assert len(suffix) == 2\n        new_path, nsubs = re.subn(r'{}$'.format(suffix[0]), suffix[1], new_path)\n        assert nsubs == 1, nsubs\n    return new_path\n\n\n# function to combine 2 target outputs as an input\ndef combine(*args, only=None):\n    assert all(len(args[0]) == len(args[i]) for i in range(len(args)))\n    combined = []\n    for j in range(len(args[0])):\n        output_group = {}\n        for i in range(len(args)):\n            if only:\n                output_group.update({k: v for k, v in args[j].items() if k in only})\n            else:\n                output_group.update(args[i][j])\n        combined.append(output_group)\n    return combined\n\n\n# map of recombination rate across the X chromosome made by DECODE genetics\ndef decode_genetic_maps(decode_hg38_sexavg_per_gen, genetic_map_chrX):\n    inputs = [decode_hg38_sexavg_per_gen]\n    outputs = [genetic_map_chrX]\n    options = {'memory': '1g', 'walltime': '00:10:00'}\n    spec = f'''\n    cat {decode_hg38_sexavg_per_gen} | tail -n +2 | grep chrX | cut -f 2,4,5 | (echo pos COMBINED_rate Genetic_Map ; cat - ; ) &gt; {genetic_map_chrX}\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\ndecode_hg38_sexavg_per_gen=f'{data_big}/decode_hg38_sexavg_per_gen.tsv'\ngenetic_map_chrX=f'{out_dir}/genetic_map_chrX.tsv'\n\ngwf.target_from_template(f'decode_genetic_maps',\n    decode_genetic_maps(decode_hg38_sexavg_per_gen, genetic_map_chrX))\n\n\n# turn diploid females (XX) into two individual haplotypes (haploid individuals) like males\ndef female_haploid(haploid_vcf, chrX_filtered_eagle2_phased, phased_haplotypes):\n    inputs = [haploid_vcf, chrX_filtered_eagle2_phased]\n    outputs = [phased_haplotypes]\n    options = {'memory': '10g', 'walltime': '01:20:00'}\n    spec = f'''\n    python {haploid_vcf} {chrX_filtered_eagle2_phased} | gzip &gt; {phased_haplotypes}\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\nhaploid_vcf=f'{script_dir}/haploid_vcf.py'\nchrX_filtered_eagle2_phased='/home/ari/ari-intern/people/ari/ariadna-intern/steps/1000genome/CCDG_14151_B01_GRM_WGS_2020-08-05_chrX.filtered.eagle2-phased.v2.vcf.gz'\nphased_haplotypes=f'{out_dir}/1000g_phased_haplotypes.vcf.gz'\n\ngwf.target_from_template(f'female_haploid',\n    female_haploid(haploid_vcf, chrX_filtered_eagle2_phased, phased_haplotypes))\n\n\n# construct files with haplotype IDs\ndef haplotype_id(phased_haplotypes, phased_haplotypes_id):\n    inputs = [phased_haplotypes]\n    outputs = [phased_haplotypes_id]\n    options = {'memory': '10g', 'walltime': '00:60:00'}\n    spec = f'''\n    # conda install -c bioconda bcftools\n    # conda install openssl   ## to install libcrypto.so.1.0.0 library\n    bcftools query -l {phased_haplotypes} &gt; {phased_haplotypes_id}\n    sleep 5\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\nphased_haplotypes=f'{out_dir}/1000g_phased_haplotypes.vcf.gz'\nphased_haplotypes_id=f'{out_dir}/1000g_phased_haplotypes_ids.txt'\n\ngwf.target_from_template(f'haplotype_id', haplotype_id(phased_haplotypes, phased_haplotypes_id))\n\n\n# construct populations labels mapping each haplotype to a population\n# (group haplotypes according to the population to which the individuals carrying those haplotypes belong)\ndef pop_labels(make_poplabels, phased_haplotypes_id, high_coverage_seq_index, related_high_coverage_seq_index, phased_haplotypes_poplabels):\n    inputs = [make_poplabels, phased_haplotypes_id, high_coverage_seq_index, related_high_coverage_seq_index]\n    outputs = [phased_haplotypes_poplabels]\n    options = {'memory': '10g', 'walltime': '00:60:00'}\n    spec = f'''\n    python {make_poplabels} {phased_haplotypes_id} {high_coverage_seq_index} {related_high_coverage_seq_index} &gt; {phased_haplotypes_poplabels} \n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\nmake_poplabels=f'{script_dir}/make_poplabels.py'\nphased_haplotypes_id=f'{out_dir}/1000g_phased_haplotypes_ids.txt'\nhigh_coverage_seq_index=f'{data_dir}/seq_index/1000G_2504_high_coverage.sequence.index'\nrelated_high_coverage_seq_index=f'{data_dir}/seq_index/1000G_698_related_high_coverage.sequence.index'\nphased_haplotypes_poplabels=f'{out_dir}/1000g_phased_haplotypes_poplabels.txt'\n\ngwf.target_from_template(f'pop_labels',\n    pop_labels(make_poplabels, phased_haplotypes_id, high_coverage_seq_index, related_high_coverage_seq_index, phased_haplotypes_poplabels))\n\n\n# Define the function to convert VCF to haps/sample format\ndef convert_vcf(RelateFileFormats, phased_haplotypes_haps, phased_haplotypes_sample, phased_haplotypes, phased_haplotypes_poplabels):\n    inputs = [RelateFileFormats, phased_haplotypes_poplabels, phased_haplotypes]\n    outputs = [phased_haplotypes_haps, phased_haplotypes_sample]\n    options = {'memory': '10g', 'walltime': '01:00:00'}\n    spec = f'''\n    {RelateFileFormats} --mode ConvertFromVcf --haps {phased_haplotypes_haps} --sample {phased_haplotypes_sample} -i {phased_haplotypes.replace('vcf.gz', '')} --poplabels {phased_haplotypes_poplabels}\n    sleep 20\n    touch {phased_haplotypes_haps}\n    touch {phased_haplotypes_sample}\n    '''\n    # Returning outputs as well\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n# Define the file paths for input and output\nRelateFileFormats = '/faststorage/project/ari-intern/people/ari/relate/bin/RelateFileFormats'\nphased_haplotypes_poplabels = '/home/ari/ari-intern/people/ari/ariadna-intern/steps/1000g_phased_haplotypes_poplabels.txt'\nphased_haplotypes = '/home/ari/ari-intern/people/ari/ariadna-intern/steps/1000g_phased_haplotypes.vcf.gz'\nphased_haplotypes_haps = '/home/ari/ari-intern/people/ari/ariadna-intern/steps/1000g_phased_haplotypes.haps'\nphased_haplotypes_sample = '/home/ari/ari-intern/people/ari/ariadna-intern/steps/1000g_phased_haplotypes.sample'\n\n# Creating the target using the function\nconvert_vcf_target = convert_vcf(RelateFileFormats, phased_haplotypes_haps, phased_haplotypes_sample, phased_haplotypes, phased_haplotypes_poplabels)\n\n# Adding the target to the workflow\ngwf.target_from_template(f'convert_vcf', convert_vcf_target)\n\n\n\n## start with specific population ##\n\n# exclude related individuals to avoid biases arising from shared genetic material\ndef exclude_related(path, population):\n    output_dir = f'{out_dir}/{population}/excluded'\n    output_path = modify_path(path, parent=output_dir, suffix='_related.txt')\n    inputs = {'path' : path}\n    outputs = {'path' : output_path}\n    options = {'memory': '10g', 'walltime': '00:60:00'}\n    spec = f'''\n    mkdir -p {output_dir}\n    grep -v '#' {path} | cut -f 10 &gt; {output_path}\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n# find IDs of haplotypes from all other populations so we can exclude them\ndef ids_other_ppl(path, population):\n    output_dir = f'{out_dir}/{population}/excluded'\n    output_path = modify_path(path, parent=output_dir, suffix='_non_ppl.txt')\n    inputs = {'path' : path}\n    outputs = {'path' : output_path}\n    options = {'memory': '10g', 'walltime': '00:60:00'}\n    spec = f'''\n    mkdir -p {output_dir}\n    grep -v {population} {path} | cut -f 1 -d ' ' &gt; {output_path}\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n# combine excluded files: both related and non population individuals\ndef combine_files(path, related=None):\n    output_path = modify_path(path, base='', suffix='excluded_combined.txt')\n    out_dir = modify_path(output_path, base='', suffix='')\n    inputs = {'path': path, 'related': related}\n    outputs = {'path': output_path}\n    options = {'memory': '10g', 'walltime': '00:60:00'}\n    spec = f'''\n    mkdir -p {out_dir}\n    cat {path} {related} | sort | uniq &gt; {output_path}\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n# construct a list of excluded individuals\ndef excluded_list(path, haplotype_id=None):\n    output_path = modify_path(path, base='', suffix='excluded_list.txt')\n    out_dir = modify_path(output_path, base='', suffix='')\n    inputs = {'path': path, 'haplotype_id': haplotype_id}\n    outputs = {'exclude_list': output_path}\n    options = {'memory': '10g', 'walltime': '00:60:00'}\n    spec = f'''\n    mkdir -p {out_dir}\n    grep -f {path} {haplotype_id} &gt; {output_path}\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n# construct a list of only individuals from the population of interest\ndef pop_labels(exclude_list, poplabels=None):\n    output_dir = f'{out_dir}/{population}/included'\n    output_path = os.path.join(output_dir, 'included_pop_labels.txt')\n    inputs = {'exclude_list': exclude_list, 'poplabels': poplabels}\n    outputs = {'pop_label_list': output_path}\n    options = {'memory': '10g', 'walltime': '00:60:00'}\n    spec = f'''\n    mkdir -p {output_dir}\n    grep -v -f {exclude_list} {poplabels} &gt; {output_path}\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n# prepare input files for RELATE\ndef prepare_files(exclude_list, haps=None, sample=None, ancestor=None, mask=None, poplabels=None):\n    directory = '/home/ari/ari-intern/people/ari/ariadna-intern/steps'\n    output_dir = f'{directory}/{population}/relate'\n    inputs = {'haps': haps, 'sample': sample, 'ancestor': ancestor, 'mask':mask, 'poplabels':poplabels, 'exclude_list':exclude_list}\n    output_path = os.path.join(output_dir, '1000g_ppl_phased_haplotypes')\n    # outputs: .haps, .sample, .dist (if --mask specified), .poplabels (if remove_ids & poplabels specified), .annot (if poplabels specified)\n    outputs = {'haps': output_path + '.haps', 'sample': output_path + '.sample', 'dist': output_path + '.dist', 'poplabels': output_path + '.poplabels', 'annot': output_path + '.annot'} \n    options = {'memory': '20g', 'walltime': '10:00:00'}\n    spec = f'''\n    mkdir -p {output_dir}\n    /home/ari/ari-intern/people/ari/relate/scripts/PrepareInputFiles/PrepareInputFiles.sh --haps {haps} --sample {sample} --ancestor {ancestor} --mask {mask} --remove_ids {exclude_list} --poplabels {poplabels} -o {output_path}\n    sleep 20\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n# compute sfs to make sure singletons are not missing (sanity check)\n# zcat 1000g_LWK_phased_haplotypes.haps.gz | cut -d ' ' -f 4- | tr -d -c '1\\n' | awk '{ print length; }' | sort -n | uniq -c\n\n# run the inference of tree sequences using RELATE\ndef relate(genetic_map, sample_relate=None, haps_relate=None, annot_relate=None, dist_relate=None):\n    output_dir = f'/home/ari/ari-intern/people/ari/ariadna-intern/steps/{population}/relate/run_relate'\n    file_name = '1000g_ppl_phased_haplotypes'\n    output_path = os.path.join(output_dir, file_name)\n    inputs = {'sample_relate': sample_relate, 'haps_relate': haps_relate, 'annot_relate': annot_relate, 'dist_relate': dist_relate}\n    outputs = {'anc': output_path + '.anc', 'mut': output_path + '.mut'}\n    options = {'memory': '24g', 'walltime': '10:00:00'}\n    # program creates a temporary folder for temporary files and if it already exists relate won't run\n    spec= f'''\n    mkdir -p {output_dir}\n    cd {output_dir}\n    rm -rf {file_name}\n    /home/ari/ari-intern/people/ari/relate/bin/Relate --mode All -m 1.25e-8 -N 20000 --sample {sample_relate} --haps {haps_relate} --map {genetic_map} --annot {annot_relate} --dist {dist_relate} --memory 20 -o {file_name}\n    sleep 90\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n# estimate historical population size trajectory from initially inferred tree sequences\n# setting --threshold 0. This is so that the branch lengths in all trees are updated for the estimated population size history. \ndef estimate_ppl_size(anc_size=None, mut_size=None, poplabels_size=None):\n    output_dir = f'/home/ari/ari-intern/people/ari/ariadna-intern/steps/{population}/relate/run_relate'\n    file_name_input = '1000g_ppl_phased_haplotypes'\n    file_name_output = '1000g_ppl_phased_haplotypes_demog'\n    output_path = os.path.join(output_dir, file_name_output)\n    # inputs: inferred .anc/.mut files and a .poplabels file\n    inputs = {'anc_size': anc_size, 'mut_size': mut_size, 'poplabels_size': poplabels_size}\n    # outputs: two versions of coalescence rates/population sizes are outputted\n    ## .coal --&gt; contains coalescence rates and cross-coalescence rates, treating all samples as one population\n    ## *.pairwise.coal/.bin --&gt; coalescence rate file and corresponding binary file containing coalescence rates between pairs of samples\n    outputs = {'coal': output_path + '.coal', 'pairwise_coal': output_path + '.pairwise.coal', 'pairwise_bin': output_path + '.pairwise.bin'}\n    options = {'memory': '8g', 'walltime': '08:00:00'}\n    spec = f'''\n    mkdir -p {output_dir}\n    cd {output_dir}\n    rm -rf {file_name_output}\n    /home/ari/ari-intern/people/ari/relate/scripts/EstimatePopulationSize/EstimatePopulationSize.sh -m 1.25e-8 -N 20000 -i {file_name_input} --poplabels {poplabels_size} -o {file_name_output} --threshold 0 --num_iter 5 --years_per_gen 29 --threads 14 --threshhold 0\n    sleep 20\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n\n# detect selection using RELATEs builtin statistic\ndef detect_selection(anc_selection=None, mut_selection=None, poplabels_selection=None):\n    output_dir = f'/home/ari/ari-intern/people/ari/ariadna-intern/steps/{population}/relate/run_relate'\n    file_name_input = '1000g_ppl_phased_haplotypes_demog'\n    file_name_output = '1000g_ppl_phased_haplotypes_selection'\n    output_path = os.path.join(output_dir, file_name_output)\n    inputs = {'anc_selection': anc_selection, 'mut_selection': mut_selection, 'poplabels_selection': poplabels_selection}\n    # .freq --&gt; Records the frequency of the derived allele at generations genN .. gen1\n    # .lin --&gt; Records the number of lineages in the tree at generations genN .. gen1 as well as the number of lineages when the mutation had frequency 2\n    # .sele --&gt; Records the log10 p-value for selection evidence at generations genN .. gen1 as well as the log10 p-value when the\n    # mutation had frequency 2. Log10 p-value is set to 1 if mutation had frequency &lt;= 1 at a generation. \n    outputs = {'freq_selection': output_path + '.freq', 'lin_selection': output_path + '.lin', 'sele_selection': output_path + '.sele'}\n    options = {'memory': '20g', 'walltime': '10:00:00'}\n    spec = f'''\n    mkdir -p {output_dir}\n    cd {output_dir}\n    rm -rf {file_name_output}\n    /home/ari/ari-intern/people/ari/relate/scripts/DetectSelection/DetectSelection.sh -i {file_name_input} -m 1.25e-8 --poplabels {poplabels_size} -o {file_name_output}\n    sleep 80\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n\n\n\n# convert to tree sequence file format (tskit)\n# this function converts anc/mut files inferred by Relate into the tree sequence file format used by tskit. In the current\n# implementation, each tree is stored with new nodes in the tree sequence file format, leading to no compression. In addition,\n# information about how long branches persist, and how many mutations map to a branch are lost by this conversion.\ndef tree_seq(anc_convert=None, mut_convert=None):\n    output_dir = f'/home/ari/ari-intern/people/ari/ariadna-intern/steps/{population}/relate/run_relate'\n    file_name_input = '1000g_ppl_phased_haplotypes'\n    file_name_output = '1000g_ppl_phased_haplotypes'\n    output_path = os.path.join(output_dir, file_name_output)\n    # inputs: .anc (genealogical relationships info) and .mut (mutations info)\n    inputs = {'anc_convert': anc_convert, 'mut_convert': mut_convert}\n    # outputs: .trees (combination of both inputs)\n    outputs = {'trees_convert': output_path + '.trees'}\n    options = {'memory': '8g', 'walltime': '04:00:00'}\n    spec = f'''\n    mkdir -p {output_dir}\n    cd {output_dir}\n    rm -rf {file_name_output}\n    /home/ari/ari-intern/people/ari/relate/bin/RelateFileFormats --mode ConvertToTreeSequence -i {file_name_input} -o {file_name_output}\n    '''\n    return AnonymousTarget(inputs=inputs, outputs=outputs, options=options, spec=spec)\n                    \n\n\n\n#populations = ['GWD', 'ESN', 'MSL', 'YRI', 'LWK'] # african ancestry --&gt; DONE\npopulations = ['KHV']\n#populations = ['GBR', 'FIN', 'IBS',# 'TSI'] + PUR (puerto ricans)# european ancestry --&gt; DONE\n#populations = ['CDX', 'CHB', 'CHS', #'JPT', 'KHV'] # east asian ancestry\n#populations = ['LWK', 'GWD', 'ESN', 'MSL', 'YRI', 'GBR', 'FIN', 'IBS', 'TSI', 'CDX', 'CHB', 'CHS', 'JPT', 'KHV']\n\n\n# append a unique identifier to each target name to ensure they are distinct (name = ...{population})\nfor population in populations:\n    # exlcude related\n    input_related = [(f'{data_dir}/seq_index/1000G_698_related_high_coverage.sequence.index', population)]\n    related_target = gwf.map(exclude_related, input_related, name=f\"exclude_related_{population}\")\n    related = related_target.outputs[0]  # list\n\n\n    # get ids for other populations\n    input_other_ppl = [(f'{out_dir}/1000g_phased_haplotypes_poplabels.txt', population)]\n    other_ppl_target = gwf.map(ids_other_ppl, input_other_ppl, name=f\"ids_other_ppl_{population}\")\n\n    # combine related and other populations\n    combine_target = gwf.map(combine_files, other_ppl_target.outputs, extra = {'related':related}, name=f\"combine_files_{population}\")\n\n    # list of excluded\n    haplotype_ids = f'{out_dir}/1000g_phased_haplotypes_ids.txt'\n    exclude_list_target = gwf.map(excluded_list, combine_target.outputs, extra = {'haplotype_id':haplotype_ids}, name=f\"excluded_list_{population}\")\n\n    # list of included\n    poplabels = f'{out_dir}/1000g_phased_haplotypes_poplabels.txt'\n    pop_labels_target = gwf.map(pop_labels, exclude_list_target.outputs, extra = {'poplabels':poplabels}, name=f\"pop_labels_{population}\")\n\n\n    # RELATE DIRECTORY !\n    relate_dir = f'/home/ari/ari-intern/people/ari/ariadna-intern/steps/{population}/relate' # relate directory\n\n\n    # PREPARE INPUT\n    haps = '/home/ari/ari-intern/people/ari/ariadna-intern/steps/1000g_phased_haplotypes.haps'\n    sample = '/home/ari/ari-intern/people/ari/ariadna-intern/steps/1000g_phased_haplotypes.sample'\n    ancestor = f'{data_dir}/homo_sapiens_ancestor_GRCh38/homo_sapiens_ancestor_X.fa'\n    mask = f'{data_dir}/20160622.chrX.mask.fasta'\n    poplabels = f'{out_dir}/1000g_phased_haplotypes_poplabels.txt'\n\n    prepare_target = gwf.map(prepare_files, exclude_list_target.outputs, \n                            extra = {'haps': haps, 'sample': sample, 'ancestor': ancestor, 'mask':mask, 'poplabels':poplabels}, name=f\"prepare_files_{population}\")\n\n\n    # RUN RELATE\n    sample_relate = f'{relate_dir}/1000g_ppl_phased_haplotypes.sample.gz'\n    haps_relate = f'{relate_dir}/1000g_ppl_phased_haplotypes.haps.gz'\n    genetic_map = '/home/ari/ari-intern/people/ari/ariadna-intern/steps/genetic_map_chrX.tsv'\n    annot_relate = f'{relate_dir}/1000g_ppl_phased_haplotypes.annot'\n    dist_relate = f'{relate_dir}/1000g_ppl_phased_haplotypes.dist.gz'\n\n    run_relate_target = gwf.map(relate, [genetic_map], extra = {'haps_relate': haps_relate, 'sample_relate': sample_relate, 'annot_relate': annot_relate, 'dist_relate': dist_relate}, name=f\"relate_{population}\")\n\n\n    # ESTIMATE POPULATION SIZES\n    anc_size = f'{relate_dir}/run_relate/1000g_ppl_phased_haplotypes.anc'\n    mut_size  = f'{relate_dir}/run_relate/1000g_ppl_phased_haplotypes.mut'\n    poplabels_size = f'{relate_dir}/1000g_ppl_phased_haplotypes.poplabels'\n    ppl_size_target = gwf.map(estimate_ppl_size, [anc_size], extra = {'mut_size': mut_size, 'poplabels_size': poplabels_size}, name=f\"estimate_ppl_size_{population}\")\n\n\n    # DETECT SELECTION\n    anc_selection = f'{relate_dir}/run_relate/1000g_ppl_phased_haplotypes_demog.anc.gz'\n    mut_selection  = f'{relate_dir}/run_relate/1000g_ppl_phased_haplotypes_demog.mut.gz'\n    poplabels_selection = f'{relate_dir}/1000g_ppl_phased_haplotypes.poplabels'\n    detect_selection_target = gwf.map(detect_selection, [anc_selection], extra = {'mut_selection': mut_selection, 'poplabels_selection': poplabels_selection}, name=f\"detect_selection_{population}\")\n\n\n   # CONVERT TO TREE SEQUENCE FILE FORMAT (tskit)\n    anc_convert = f'{relate_dir}/run_relate/1000g_ppl_phased_haplotypes.anc'\n    mut_convert  = f'{relate_dir}/run_relate/1000g_ppl_phased_haplotypes.mut'\n    tree_seq_target = gwf.map(tree_seq, [anc_convert], extra = {'mut_convert': mut_convert}, name=f\"tree_convert_{population}\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GWF workflow</span>"
    ]
  },
  {
    "objectID": "notebooks/1_plot_selection.html",
    "href": "notebooks/1_plot_selection.html",
    "title": "Detect selection in populations",
    "section": "",
    "text": "library(\"ggplot2\")\nlibrary(\"gridExtra\")\nlibrary(\"ggpubr\")\nlibrary(\"RColorBrewer\")\n\nRELATE\nAFRICAN POPULATIONS\n\nLWK &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/LWK/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(LWK)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781642\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.1336880\n-0.1734100\n-0.2221450\n-0.3321430\n-0.3804730\n-2.01040e-06\n-0.000017053\n0\n-0.450077\n-0.0978628\n\n\n2\n2781865\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-2.4857200\n-3.0492300\n-1.8755900\n-2.8888600\n-2.4228300\n-1.39308e+00\n-1.576160000\n0\n-2.019680\n-1.8051100\n\n\n3\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.0954429\n-0.0623195\n-0.0632732\n-0.1635510\n-0.4259450\n-7.05956e-02\n-0.034994400\n0\n-0.228440\n-0.5814090\n\n\n4\n2782572\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.1458270\n-0.2778760\n-0.3514220\n-0.0907462\n-0.0452048\n-1.40217e-01\n-0.176239000\n0\n-0.167312\n-0.0570220\n\n\n5\n2783658\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n1.0000000\n1.0000000\n1.0000000\n1.0000000\n1.0000000\n-4.91135e-01\n-0.676691000\n0\n-1.409400\n-0.4134500\n\n\n6\n2784657\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.1243950\n-0.1766240\n-0.4322030\n-0.4919260\n-0.6999360\n-7.43392e-01\n-0.332010000\n0\n-0.212519\n-1.0023100\n\n\n\n\n\n\nLWK_plot &lt;- plot(LWK$pos, -(LWK$when_mutation_has_freq2), pch = 19, col = \"#8DA0CB\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"LWK\",cex = 1.5, yaxp = c(0, 10, 5),cex.lab = 1.2)\n\n\n\n\n\n\n\n\n\npdf(\"LWK_plot.pdf\", width = 20, height = 5)\nLWK_plot &lt;- plot(LWK$pos, -(LWK$when_mutation_has_freq2), \n                 pch = 19, col = \"#8DA0CB\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"LWK\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\nESN &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/ESN/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(ESN)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781514\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.241670\n-0.163302\n-0.211304\n-0.385895\n-0.654856\n-0.342752\n-0.492519\n0\n-0.418871\n-0.757029\n\n\n2\n2781584\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.327150\n-0.196983\n-0.174943\n-0.153555\n-0.248025\n-0.261389\n-0.445471\n0\n-0.293212\n-0.658046\n\n\n3\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.486129\n-0.319048\n-0.511543\n-0.744948\n-0.701433\n-0.315941\n-0.226448\n0\n-0.849279\n-0.203300\n\n\n4\n2781642\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.355773\n-0.505792\n-0.598037\n-0.100054\n-0.162419\n-0.290461\n-0.382397\n0\n-0.320757\n-0.190161\n\n\n5\n2781865\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.584338\n-0.299828\n-0.218171\n-0.373706\n-0.187458\n-0.249755\n-0.502119\n0\n-0.312090\n-0.580090\n\n\n6\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.600341\n-0.785731\n-0.495711\n-0.520437\n-0.477516\n-1.343730\n-1.212490\n0\n-0.488977\n-0.879552\n\n\n\n\n\n\nESN_plot &lt;- plot(ESN$pos, -(ESN$when_mutation_has_freq2), pch=19, col = \"#66C2A5\", xlab=\"Genomic Position\", ylab=\"log10(p-value)\", main =\"ESN\", cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"ESN_plot.pdf\", width = 20, height = 5)\nESN_plot &lt;- plot(ESN$pos, -(ESN$when_mutation_has_freq2), \n                 pch = 19, col = \"#66C2A5\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"ESN\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nGWD &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/GWD/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(GWD)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781514\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.407876\n-0.463329\n-0.743589\n-0.597593\n-0.507644\n-0.253240\n-0.349971000\n0\n-0.614516\n-0.656961\n\n\n2\n2781584\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.179203\n-0.154162\n-0.180094\n-0.205703\n-0.124971\n-0.231529\n-0.204117000\n0\n-0.240526\n-0.268348\n\n\n3\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.111829\n-0.212617\n-0.202914\n-0.378425\n-0.322488\n-0.277704\n-0.282409000\n0\n-0.190963\n-0.782312\n\n\n4\n2781642\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n1.000000\n-0.539265\n-0.347216\n-0.565445\n-0.308591\n-0.153304\n-0.000101637\n0\n-0.686005\n-0.379514\n\n\n5\n2781865\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.519564\n-0.462069\n-0.316058\n-0.352527\n-0.137388\n-0.134281\n-0.264966000\n0\n-0.590395\n-0.857276\n\n\n6\n2782386\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.402728\n-0.221762\n-0.361282\n-0.213686\n-0.360681\n-0.502329\n-0.307497000\n0\n-0.555433\n-0.201529\n\n\n\n\n\n\nGWD_plot &lt;- plot(GWD$pos, -(GWD$when_mutation_has_freq2), pch = 19, col = \"#FC8D62\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"GWD\", cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"GWD_plot.pdf\", width = 20, height = 5)\nGWD_plot &lt;- plot(GWD$pos, -(GWD$when_mutation_has_freq2), \n                 pch = 19, col = \"#FC8D62\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"GWD\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nMSL &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/MSL/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(MSL)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781514\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.00819344\n-0.0230286\n-0.0125319\n-0.03071400\n-0.0335299\n-0.0137678\n-0.0461147\n0\n-0.0346441\n-0.1966720\n\n\n2\n2781584\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.57859900\n-0.6665050\n-0.4813950\n-0.19035200\n-0.0996204\n-0.3150730\n-0.0203248\n0\n-0.6003820\n-0.3105280\n\n\n3\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.48882200\n-0.6708420\n-0.4792100\n-0.46056600\n-0.7251980\n-0.1401750\n-0.2732000\n0\n-0.7939040\n-1.4443700\n\n\n4\n2781865\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.72332800\n-0.4880510\n-0.3577220\n-0.49751700\n-0.1608950\n-0.2124540\n-0.3456440\n0\n-0.7253440\n-0.2675890\n\n\n5\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.40212600\n-0.1816380\n-0.2759440\n-0.20043600\n-0.1026650\n-0.1161240\n-0.1489970\n0\n-0.4218150\n-0.4057530\n\n\n6\n2783658\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.06384770\n-0.0422283\n-0.0282915\n-0.00793583\n-0.0163262\n-0.0427755\n0.0000000\n0\n-0.0417048\n-0.0653668\n\n\n\n\n\n\nMSL_plot &lt;- plot(MSL$pos, -(MSL$when_mutation_has_freq2), pch = 19, col = \"#E78AC3\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"MSL\", cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"MSL_plot.pdf\", width = 20, height = 5)\nMSL_plot &lt;- plot(MSL$pos, -(MSL$when_mutation_has_freq2), \n                 pch = 19, col = \"#E78AC3\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"MSL\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nYRI &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/YRI/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(YRI)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781584\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.202970\n-0.649106\n-1.2164900\n-0.6031470\n-0.860137\n-1.338100\n-1.0011900\n0\n-1.181280\n-0.5485560\n\n\n2\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.174386\n-0.318978\n-0.0721344\n-0.0799852\n-0.184531\n-0.190856\n-0.3960370\n0\n-0.102744\n-0.5156580\n\n\n3\n2781642\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n1.000000\n1.000000\n1.0000000\n1.0000000\n-0.621146\n-0.869970\n-1.2066100\n0\n-1.387990\n-0.6117740\n\n\n4\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.668357\n-0.674931\n-0.6905980\n-0.5737620\n-0.274520\n-0.216861\n-0.3180610\n0\n-0.517044\n-1.2772800\n\n\n5\n2782597\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.262238\n-0.398503\n-0.5650450\n-0.6882240\n-0.131008\n-0.191674\n-0.0770765\n0\n-0.399880\n-0.2131010\n\n\n6\n2783658\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.514807\n-0.961053\n-0.9117400\n-0.7238790\n-1.248990\n-1.566840\n-1.3695800\n0\n-1.302540\n-0.0112159\n\n\n\n\n\n\nYRI_plot &lt;- plot(YRI$pos, -(YRI$when_mutation_has_freq2), pch = 19, col = \"#A6D854\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"YRI\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"YRI_plot.pdf\", width = 20, height = 5)\nYRI_plot &lt;- plot(YRI$pos, -(YRI$when_mutation_has_freq2), \n                 pch = 19, col = \"#A6D854\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"YRI\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\n# Combine data frames\nLWK$Population &lt;- \"LWK\"\nESN$Population &lt;- \"ESN\"\nGWD$Population &lt;- \"GWD\"\nMSL$Population &lt;- \"MSL\"\nYRI$Population &lt;- \"YRI\"\n\ncombined_data &lt;- rbind(LWK, ESN, GWD, MSL, YRI)\n\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create the plot\nplot_combined &lt;- ggplot(data = combined_data, aes(x = pos, y = -(when_mutation_has_freq2), color = Population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"log10(p-value)\", title = \"Africans\") +\n  theme_light() + custom_theme +\n  geom_hline(yintercept = 6, color = \"red\") +\n  scale_color_brewer(palette = \"Set2\") +\n  theme(\n    text = element_text(size = 15),\n    plot.title = element_text(hjust = 0.5) # Center the title\n  )\n\n# Print the plot\nprint(plot_combined)\n\n# Save the plot\nggsave(\"africans_threshold_REL_SQUARE.png\", plot_combined, width = 7, height = 5)\n\n\n\n\n\n\n\n\n\n## SELECT JUST POSITION LOWER THAN THRESHOLD (log10 p-value &lt; -6)\n\n# Define file paths for the five .sele files\nfile_paths &lt;- c(\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/LWK/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/ESN/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/GWD/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/MSL/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/YRI/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\"\n)\n\n# Read the files\nLWK &lt;- read.table(file_paths[1], header = TRUE)\nESN &lt;- read.table(file_paths[2], header = TRUE)\nGWD &lt;- read.table(file_paths[3], header = TRUE)\nMSL &lt;- read.table(file_paths[4], header = TRUE)\nYRI &lt;- read.table(file_paths[5], header = TRUE)\n\n# Function to subset data based on log10 p-value\nsubset_data &lt;- function(data, population) {\n  subset(data, when_mutation_has_freq2 &lt; -6) %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = LWK, population = \"LWK\"),\n  list(data = ESN, population = \"ESN\"),\n  list(data = GWD, population = \"GWD\"),\n  list(data = MSL, population = \"MSL\"),\n  list(data = YRI, population = \"YRI\")\n)\n\n# Subset and bind data from all files\nafricans_low_pvalue &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  subset_data(fp$data, fp$population)\n}))\n\n# Save the combined data to a single file\nwrite.csv(africans_low_pvalue, \"africans_low_pvalue.csv\", row.names = FALSE)\n\nfiltered &lt;- read.csv(\"/home/ari/ari-intern/people/ari/ariadna-intern/notebooks/africans_low_pvalue.csv\")\nhead(filtered)\ncat(\"Number of rows and columns:\", paste(dim(filtered), collapse = \"x\"))\n\n\nplot_threshold &lt;- ggplot(filtered, aes(x = pos, y = -(when_mutation_has_freq2), color = population)) +\n  geom_point(size = 4) +\n  labs(x = \"Genomic position\", y = \"log10 p-value\", title = \"AFRICAN\") + \n  theme_minimal() + \nscale_color_brewer(palette = \"Set2\") + theme(text = element_text(size = 15),\n        plot.title = element_text(hjust = 0.5))\n\n\nprint(plot_threshold)\nggsave(\"africans_low_pvalue_r.png\", plot_threshold, width = 20, height = 8)\n\n\n\n\n\n\n\n\nEUROPEAN POPULATIONS\n\nGBR &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/GBR/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(GBR)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781604\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.04246550\n-0.0410563\n-0.0277191\n0.00000000\n0.0000000\n0.0000000\n0.000000\n0\n-0.0652181\n-0.140835\n\n\n2\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.07381820\n-0.0622531\n-0.1658510\n-0.20821400\n-0.1090100\n-0.2489250\n0.000000\n0\n-0.2119610\n-0.159586\n\n\n3\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.63264000\n-1.4569200\n-1.0390600\n-1.39977000\n-1.1803100\n-0.5330060\n-0.624974\n0\n-2.2223900\n-1.710600\n\n\n4\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.63264000\n-1.4569200\n-1.0390600\n-1.39977000\n-1.1803100\n-0.5330060\n-0.624974\n0\n-2.2223900\n-1.710600\n\n\n5\n2782116\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.06384060\n-0.0555249\n-0.0357912\n0.00000000\n0.0000000\n0.0000000\n0.000000\n0\n-0.1008840\n-0.372146\n\n\n6\n2782161\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.00997385\n-0.0102032\n-0.0278379\n-0.00742967\n-0.0071796\n-0.0841723\n0.000000\n0\n-0.0321039\n-0.141249\n\n\n\n\n\n\nGBR_plot &lt;- plot(GBR$pos, -(GBR$when_mutation_has_freq2), pch = 19, col = \"lightblue\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"GBR\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"GBR_plot.pdf\", width = 20, height = 5)\nYRI_plot &lt;- plot(GBR$pos, -(GBR$when_mutation_has_freq2), \n                 pch = 19, col = \"lightblue\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"GBR\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nFIN &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/FIN/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(FIN)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781604\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.00440755\n-0.00534391\n-0.0121758\n-0.0395929\n-0.12861100\n-0.07316910\n-4.72098e-05\n0\n-0.00567415\n-0.0443709\n\n\n2\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.40902500\n-0.62795400\n-0.3375140\n-0.4141800\n-0.58893800\n-0.68931200\n-1.13840e+00\n0\n-0.57942200\n-0.4660740\n\n\n3\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.65529300\n-0.20453900\n-0.2242660\n-0.0580616\n-0.00696292\n-0.00380284\n-3.23889e-03\n0\n-0.45251000\n-1.3097700\n\n\n4\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.65529300\n-0.20453900\n-0.2242660\n-0.0580616\n-0.00696292\n-0.00380284\n-3.23889e-03\n0\n-0.45251000\n-1.3097700\n\n\n5\n2782116\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.00440755\n-0.00534391\n-0.0121758\n-0.0395929\n-0.12861100\n-0.07316910\n-4.72098e-05\n0\n-0.00567415\n-0.0443709\n\n\n6\n2782161\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.04182390\n-0.09758080\n-0.0624887\n-0.1448340\n-0.37536700\n-0.37688400\n-4.58744e-01\n0\n-0.03356820\n-0.0363945\n\n\n\n\n\n\nFIN_plot &lt;- plot(FIN$pos, -(FIN$when_mutation_has_freq2), pch = 19, col = \"lightpink\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"FIN\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"FIN_plot.pdf\", width = 20, height = 5)\nYRI_plot &lt;- plot(FIN$pos, -(FIN$when_mutation_has_freq2), \n                 pch = 19, col = \"lightpink\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"FIN\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nIBS &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/IBS/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(IBS)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781514\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.5030530\n-0.62381400\n-0.6142110\n-0.5986810\n-0.2936090\n-0.5673030\n-0.5812090\n0\n-0.5659250\n-0.430028\n\n\n2\n2781604\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.1494370\n-0.13499200\n-0.0992126\n-0.0863440\n-0.0437142\n-0.0229475\n-0.0256627\n0\n-0.0950446\n-0.487534\n\n\n3\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.6871990\n-0.41871100\n-0.4638830\n-0.4103800\n-0.7481900\n-0.2844150\n-0.4797510\n0\n-0.9172860\n-0.408764\n\n\n4\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.0408422\n-0.00879619\n-0.0348159\n-0.0113192\n-0.0213689\n-0.0237058\n-0.1975070\n0\n-0.0570564\n-1.165120\n\n\n5\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.0408422\n-0.00879619\n-0.0348159\n-0.0113192\n-0.0213689\n-0.0237058\n-0.1975070\n0\n-0.0570564\n-1.165120\n\n\n6\n2782048\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n1.0000000\n1.00000000\n1.0000000\n1.0000000\n1.0000000\n-0.9076720\n-1.1323700\n0\n-1.5064100\n-0.838322\n\n\n\n\n\n\nIBS_plot &lt;- plot(IBS$pos, -(IBS$when_mutation_has_freq2), pch = 19, col = \"gold\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"IBS\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"IBS_plot.pdf\", width = 20, height = 5)\nIBS_plot &lt;- plot(IBS$pos, -(IBS$when_mutation_has_freq2), \n                 pch = 19, col = \"gold\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"IBS\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nTSI &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/TSI/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(TSI)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781604\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.2105130\n-0.0994744\n-0.00275779\n-0.0264850\n-0.1290760\n-4.82756e-05\n-2.05973e-05\n0\n-0.239337\n-0.2886860\n\n\n2\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.0223887\n-0.0254137\n-0.05456920\n-0.0224805\n-0.0427598\n-4.61010e-05\n-2.00428e-05\n0\n-0.175876\n-0.1633620\n\n\n3\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.7507600\n-1.5958100\n-2.17561000\n-1.6023800\n-0.9149070\n-9.32056e-01\n-1.16969e-01\n0\n-1.454490\n-1.2938300\n\n\n4\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.7507600\n-1.5958100\n-2.17561000\n-1.6023800\n-0.9149070\n-9.32056e-01\n-1.16969e-01\n0\n-1.454490\n-1.2938300\n\n\n5\n2782116\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.1580850\n-0.0765467\n-0.00201294\n-0.0222592\n-0.1175840\n-3.60871e-05\n-1.89802e-05\n0\n-0.210797\n-0.0313601\n\n\n6\n2782161\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.3088920\n-0.2460760\n-0.54315200\n-0.2379020\n-0.5093210\n-5.29402e-01\n-1.07703e-01\n0\n-0.446141\n-0.3001710\n\n\n\n\n\n\nTSI_plot &lt;- plot(TSI$pos, -(TSI$when_mutation_has_freq2), pch = 19, col = \"lightgreen\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"TSI\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"TSI_plot.pdf\", width = 20, height = 5)\nTSI_plot &lt;- plot(TSI$pos, -(TSI$when_mutation_has_freq2), \n                 pch = 19, col = \"lightgreen\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"TSI\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nPUR &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/PUR/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nPUR_plot &lt;- plot(PUR$pos, -(PUR$when_mutation_has_freq2), pch = 19, col = \"orange2\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"PUR\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"PUR_plot.pdf\", width = 20, height = 5)\nPUR_plot &lt;- plot(PUR$pos, -(PUR$when_mutation_has_freq2), \n                 pch = 19, col = \"orange2\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"PUR\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\n# Combine data frames\nGBR$Population &lt;- \"GBR\"\nFIN$Population &lt;- \"FIN\"\nIBS$Population &lt;- \"IBS\"\nTSI$Population &lt;- \"TSI\"\nPUR$Population &lt;- \"PUR\"\n\ncombined_data &lt;- rbind(GBR, FIN, IBS, TSI, PUR)\n\n\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\nplot_combined &lt;- ggplot(data = combined_data, aes(x = pos, y = -(when_mutation_has_freq2), color = Population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"log10(p-value)\", title = \"Europeans + PUR\") +\n  theme_light() + custom_theme +\n  geom_hline(yintercept = 6, color = \"red\") +\n  scale_color_manual(values = c(\"GBR\" = \"lightblue\", \"FIN\" = \"lightpink\", \"IBS\" = \"gold\", \"TSI\" = \"lightgreen\", \"PUR\" = \"orange2\")) + theme(text = element_text(size = 15)) \n\nprint(plot_combined)\n\nggsave(\"europeans_threshold_REL_SQUARE.png\", plot_combined, width = 7, height = 5)\n\n\n\n\n\n\n\n\n\n## SELECT JUST POSITION LOWER THAN THRESHOLD (log10 p-value &lt; -6)\n\n# Define file paths for the five .sele files\nfile_paths_euro &lt;- c(\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/GBR/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/FIN/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/IBS/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/TSI/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/PUR/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\"\n)\n\n# Read the files\nGBR &lt;- read.table(file_paths_euro[1], header = TRUE)\nFIN &lt;- read.table(file_paths_euro[2], header = TRUE)\nIBS &lt;- read.table(file_paths_euro[3], header = TRUE)\nTSI &lt;- read.table(file_paths_euro[4], header = TRUE)\nPUR &lt;- read.table(file_paths_euro[5], header = TRUE)\n\n# Function to subset data based on log10 p-value\nsubset_data &lt;- function(data, population) {\n  subset(data, when_mutation_has_freq2 &lt; -6) %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = GBR, population = \"GBR\"),\n  list(data = FIN, population = \"FIN\"),\n  list(data = IBS, population = \"IBS\"),\n  list(data = TSI, population = \"TSI\"),\n  list(data = PUR, population = \"PUR\")\n)\n\n# Subset and bind data from all files\neuropeans_low_pvalue &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  subset_data(fp$data, fp$population)\n}))\n\n# Save the combined data to a single file\nwrite.csv(europeans_low_pvalue, \"europeans_low_pvalue.csv\", row.names = FALSE)\n\nfiltered_euro &lt;- read.csv(\"/home/ari/ari-intern/people/ari/ariadna-intern/notebooks/europeans_low_pvalue.csv\")\nhead(filtered_euro)\ncat(\"Number of rows and columns:\", paste(dim(filtered_euro), collapse = \"x\"))\n\n\nA data.frame: 6 × 36\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\npopulation\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;chr&gt;\n\n\n\n\n1\n18861677\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.597739\n-1.048370\n-0.741127\n-0.417716\n-0.544644\n-0.187459\n0\n-0.890654\n-6.38066\nGBR\n\n\n2\n18865240\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.639418\n-0.897673\n-0.582284\n-0.612257\n-0.702097\n-0.241534\n0\n-0.991791\n-6.72386\nGBR\n\n\n3\n18867826\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.137600\n-0.715037\n-0.976634\n-0.572180\n-0.612715\n-0.132271\n0\n-1.339690\n-6.54745\nGBR\n\n\n4\n18867954\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.127090\n-0.618784\n-1.215980\n-0.720713\n-0.718903\n-0.155134\n0\n-1.423040\n-7.78284\nGBR\n\n\n5\n18868013\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.137600\n-0.715037\n-0.976634\n-0.572180\n-0.612715\n-0.132271\n0\n-1.339690\n-6.54745\nGBR\n\n\n6\n18868321\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.137600\n-0.715037\n-0.976634\n-0.572180\n-0.612715\n-0.132271\n0\n-1.339690\n-6.54745\nGBR\n\n\n\n\n\nNumber of rows and columns: 456x36\n\n\n\nplot_threshold &lt;- ggplot(filtered_euro, aes(x = pos, y = -(when_mutation_has_freq2), color = population)) +\n  geom_point(size = 4) +\n  labs(x = \"Genomic position\", y = \"log10 p-value\", title = \"European Populations\") + \n  theme_minimal() + scale_color_manual(values = c(\"GBR\" = \"lightblue\", \"FIN\" = \"lightpink\", \"IBS\" = \"gold\", \"TSI\" = \"lightgreen\", \"PUR\" = \"orange2\")) +\ntheme(text = element_text(size = 15),\n        plot.title = element_text(hjust = 0.5))\nprint(plot_threshold)\n\n\n\n\n\n\n\n\nEAST ASIAN POPULATIONS\n\nCDX &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CDX/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(CDX)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.0086400\n-1.1085600\n-1.1057000\n-1.3585700\n-0.943955\n-1.1108200\n-0.973984\n0\n-1.2454700\n-0.4867200\n\n\n2\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.3131650\n-0.2109630\n-0.2253310\n-0.0785041\n-0.164815\n-0.1097100\n-0.108324\n0\n-0.3075960\n-0.5534800\n\n\n3\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.3131650\n-0.2109630\n-0.2253310\n-0.0785041\n-0.164815\n-0.1097100\n-0.108324\n0\n-0.3075960\n-0.5534800\n\n\n4\n2782161\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.0339200\n-1.0921500\n-1.3285200\n-1.5450600\n-1.067340\n-1.2125100\n-1.057640\n0\n-1.2068300\n-1.3679800\n\n\n5\n2782560\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n0.0000000\n0.0000000\n0.0000000\n0.0000000\n0.000000\n0.0000000\n0.000000\n0\n-0.0766008\n-0.0269834\n\n\n6\n2782572\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.0993169\n-0.0502764\n-0.0654512\n-0.0539695\n-0.238131\n-0.0119095\n-0.033889\n0\n-0.1106720\n-1.6958700\n\n\n\n\n\n\nCDX_plot &lt;- plot(CDX$pos, -(CDX$when_mutation_has_freq2), pch = 19, col = \"#A6CEE3\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"CDX\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"CDX_plot.pdf\", width = 20, height = 5)\nCDX_plot &lt;- plot(CDX$pos, -(CDX$when_mutation_has_freq2), \n                 pch = 19, col = \"#A6CEE3\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"CDX\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nCHB &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHB/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(CHB)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.469389\n-0.1350390\n-0.0537125\n-0.0683953\n-0.1218410\n-1.66876e-05\n-4.30725e-07\n0\n-0.357821\n-0.707989\n\n\n2\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.469389\n-0.1350390\n-0.0537125\n-0.0683953\n-0.1218410\n-1.66876e-05\n-4.30725e-07\n0\n-0.357821\n-0.707989\n\n\n3\n2782161\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.134001\n-0.1969290\n-0.3636970\n-0.1665180\n-0.0778992\n-1.11767e-01\n-1.29266e-06\n0\n-0.223143\n-0.803470\n\n\n4\n2782572\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.352616\n-0.0748059\n-0.0297824\n-0.1350440\n-0.0487577\n0.00000e+00\n0.00000e+00\n0\n-0.314035\n-2.224800\n\n\n5\n2784758\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.414356\n-0.1018040\n-0.1638560\n-0.1877580\n-0.0405383\n-3.93919e-05\n0.00000e+00\n0\n-0.292926\n-0.067107\n\n\n6\n2784905\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.414356\n-0.1018040\n-0.1638560\n-0.1877580\n-0.0405383\n-3.93919e-05\n0.00000e+00\n0\n-0.292926\n-0.067107\n\n\n\n\n\n\nCHB_plot &lt;- plot(CHB$pos, -(CHB$when_mutation_has_freq2), pch = 19, col = \"#1F78B4\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"CHB\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"CHB_plot.pdf\", width = 20, height = 5)\nCHB_plot &lt;- plot(CHB$pos, -(CHB$when_mutation_has_freq2), \n                 pch = 19, col = \"#1F78B4\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"CHB\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nCHS &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHS/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(CHS)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.509651\n-0.5295390\n-0.540640\n-0.2382600\n-0.353003\n-0.495016\n-0.453266\n0\n-0.6016760\n-0.926999\n\n\n2\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.191600\n-0.0350659\n-0.102777\n-0.0583544\n-0.278356\n-0.185307\n-0.293794\n0\n-0.0503824\n-0.294591\n\n\n3\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.191600\n-0.0350659\n-0.102777\n-0.0583544\n-0.278356\n-0.185307\n-0.293794\n0\n-0.0503824\n-0.294591\n\n\n4\n2782161\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.921153\n-1.5332800\n-0.849335\n-0.7494320\n-0.419384\n-0.937000\n-0.393215\n0\n-0.9510930\n-1.741520\n\n\n5\n2782572\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.719856\n-0.7079780\n-0.505628\n-0.5949980\n-0.269845\n-0.588185\n-0.232325\n0\n-0.5436550\n-0.533548\n\n\n6\n2782784\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n1.000000\n1.0000000\n1.000000\n1.0000000\n1.000000\n1.000000\n1.000000\n0\n1.0000000\n-0.701893\n\n\n\n\n\n\nCHS_plot &lt;- plot(CHS$pos, -(CHS$when_mutation_has_freq2), pch = 19, col = \"#B2DF8A\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"CHS\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"CHS_plot.pdf\", width = 20, height = 5)\nCHS_plot &lt;- plot(CHS$pos, -(CHS$when_mutation_has_freq2), \n                 pch = 19, col = \"#B2DF8A\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"CHS\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nJPT &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/JPT/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(JPT)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781514\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.544881\n-0.543074\n-0.3360220\n-0.5822880\n-0.4354700\n-0.6970980\n-1.1308500\n0\n-0.548842\n-0.746704\n\n\n2\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.354544\n-0.370605\n-0.0512392\n-0.0805736\n-0.0537353\n-0.1730980\n-0.4372470\n0\n-0.455204\n-0.112781\n\n\n3\n2782572\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.319862\n-0.318994\n-0.4698040\n-0.2719470\n-0.0442616\n-0.0408214\n-0.0908543\n0\n-0.396086\n-1.069260\n\n\n4\n2784758\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.629078\n-0.263415\n-0.7430090\n-0.3709640\n-0.8436410\n-0.9887650\n-0.7396860\n0\n-0.796063\n-0.483658\n\n\n5\n2784905\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.629078\n-0.263415\n-0.7430090\n-0.3709640\n-0.8436410\n-0.9887650\n-0.7396860\n0\n-0.796063\n-0.483658\n\n\n6\n2785313\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.629078\n-0.263415\n-0.7430090\n-0.3709640\n-0.8436410\n-0.9887650\n-0.7396860\n0\n-0.796063\n-0.483658\n\n\n\n\n\n\nJPT_plot &lt;- plot(JPT$pos, -(JPT$when_mutation_has_freq2), pch = 19, col = \"#33A02C\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"JPT\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"JPT_plot.pdf\", width = 20, height = 5)\nJPT_plot &lt;- plot(JPT$pos, -(JPT$when_mutation_has_freq2), \n                 pch = 19, col = \"#33A02C\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"JPT\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nKHV &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/KHV/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\", header = TRUE)\nhead(KHV)\n\n\nA data.frame: 6 × 35\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n2781635\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.8030350\n-0.6989060\n-0.605342\n-0.45654000\n-0.342867\n-0.503979\n-0.69663300\n0\n-1.0258700\n-0.847264\n\n\n2\n2781927\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.0590766\n-0.0280912\n-0.045688\n-0.00312863\n-0.010792\n-0.018873\n-0.00296262\n0\n-0.0553768\n-0.635131\n\n\n3\n2781986\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.0590766\n-0.0280912\n-0.045688\n-0.00312863\n-0.010792\n-0.018873\n-0.00296262\n0\n-0.0553768\n-0.635131\n\n\n4\n2782161\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.9175290\n-1.2623400\n-0.941499\n-1.60266000\n-1.237230\n-1.025680\n-1.11297000\n0\n-1.2013300\n-0.406086\n\n\n5\n2784102\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.3344400\n-2.3292500\n-1.154890\n-1.79781000\n-1.452120\n-1.538880\n-1.08854000\n0\n-2.0425200\n-0.471176\n\n\n6\n2784738\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n1.0000000\n1.0000000\n1.000000\n1.00000000\n1.000000\n1.000000\n-0.56223200\n0\n-0.9722480\n-0.418237\n\n\n\n\n\n\nKHV_plot &lt;- plot(KHV$pos, -(KHV$when_mutation_has_freq2), pch = 19, col = \"#FB9A99\", xlab = \"Genomic Position\", ylab = \"log10(p-value)\", main = \"KHV\" , cex = 1.5, ylim = c(0, 10), cex.lab = 1.2)\npdf(\"KHV_plot.pdf\", width = 20, height = 5)\nKHV_plot &lt;- plot(KHV$pos, -(KHV$when_mutation_has_freq2), \n                 pch = 19, col = \"#FB9A99\", \n                 xlab = \"Genomic Position\", \n                 ylab = \"log10(p-value)\", \n                 main = \"KHV\",\n                 cex = 1.5, \n                 yaxp = c(0, 10, 5),\n                 cex.lab = 1.3,\n                 cex.main = 1.6,  # Adjust title size\n                 cex.axis = 1.2)  # Adjust axis numbers size\n\ndev.off()\n\npng: 2\n\n\n\n\n\n\n\n\n\n\nlibrary(wesanderson)\n# Combine data frames\nCDX$Population &lt;- \"CDX\"\nCHB$Population &lt;- \"CHB\"\nCHS$Population &lt;- \"CHS\"\nJPT$Population &lt;- \"JPT\"\nKHV$Population &lt;- \"KHV\"\n\ncombined_data &lt;- rbind(CDX, CHB, CHS, JPT, KHV)\n\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\nplot_combined &lt;- ggplot(data = combined_data, aes(x = pos, y = -(when_mutation_has_freq2), color = Population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"log10(p-value)\", title = \"East Asians\") +\n  theme_light() + custom_theme +\n  geom_hline(yintercept = 6, color = \"red\") +\n  scale_color_brewer(palette = \"Paired\") + \n  theme(text = element_text(size = 15))\n\nprint(plot_combined)\n\nggsave(\"asians_threshold_REL_SQUARE.png\", plot_combined, width = 7, height = 5)\n\n\n\n\n\n\n\n\n\n## SELECT JUST POSITION LOWER THAN THRESHOLD (log10 p-value &lt; -6)\n\n# Define file paths for the five .sele files\nfile_paths_asia &lt;- c(\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CDX/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHB/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHS/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/JPT/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/KHV/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\"\n)\n\n# Read the files\nCDX &lt;- read.table(file_paths_asia[1], header = TRUE)\nCHB &lt;- read.table(file_paths_asia[2], header = TRUE)\nCHS &lt;- read.table(file_paths_asia[3], header = TRUE)\nJPT &lt;- read.table(file_paths_asia[4], header = TRUE)\nKHV &lt;- read.table(file_paths_asia[5], header = TRUE)\n\n# Function to subset data based on log10 p-value\nsubset_data &lt;- function(data, population) {\n  subset(data, when_mutation_has_freq2 &lt; -6) %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = CDX, population = \"CDX\"),\n  list(data = CHB, population = \"CHB\"),\n  list(data = CHS, population = \"CHS\"),\n  list(data = JPT, population = \"JPT\"),\n  list(data = KHV, population = \"KHV\")\n)\n\n# Subset and bind data from all files\nasians_low_pvalue &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  subset_data(fp$data, fp$population)\n}))\n\n# Save the combined data to a single file\nwrite.csv(asians_low_pvalue, \"asians_low_pvalue.csv\", row.names = FALSE)\n\nfiltered_asia &lt;- read.csv(\"/home/ari/ari-intern/people/ari/ariadna-intern/notebooks/asians_low_pvalue.csv\")\nhead(filtered_asia)\ncat(\"Number of rows and columns:\", paste(dim(filtered_asia), collapse = \"x\"))\n\n\nA data.frame: 6 × 36\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\n⋯\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\npopulation\n\n\n\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;chr&gt;\n\n\n\n\n1\n10122953\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.987813\n-0.961790\n-1.191430\n-0.559613\n-0.761888\n-1.644260\n0\n-1.39061\n-6.29509\nCDX\n\n\n2\n11859476\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-2.101280\n-1.576190\n-0.977768\n-1.610050\n-1.664170\n-0.557903\n0\n-2.69332\n-6.64483\nCDX\n\n\n3\n11864438\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-2.101280\n-1.576190\n-0.977768\n-1.610050\n-1.664170\n-0.557903\n0\n-2.69332\n-6.64483\nCDX\n\n\n4\n32635171\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-1.181500\n-0.933064\n-0.809430\n-0.399554\n-0.202704\n-0.298736\n0\n-2.22411\n-6.58804\nCDX\n\n\n5\n105249963\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.612386\n-0.384370\n-0.240353\n-0.152790\n-0.228024\n-0.150998\n0\n-1.40614\n-6.11750\nCDX\n\n\n6\n3712725\n.\n1\n1\n1\n1\n1\n1\n1\n1\n⋯\n-0.439584\n-0.609713\n-0.366916\n-0.877111\n-0.129806\n0.000000\n0\n-1.08669\n-6.50623\nCHB\n\n\n\n\n\nNumber of rows and columns: 27x36\n\n\n\nplot_threshold &lt;- ggplot(filtered_asia, aes(x = pos, y = -(when_mutation_has_freq2), color = population)) +\n  geom_point(size = 4) +\n  labs(x = \"Genomic position\", y = \"log10 p-value\", title = \"East Asian Populations\") + \n  theme_minimal() + scale_color_brewer(palette = \"Paired\") + theme(text = element_text(size = 15),\n        plot.title = element_text(hjust = 0.5))\nprint(plot_threshold)\n\n\n\n\n\n\n\n\n\n## PLOT TOGETHER ALL POPULATIONS SNPS BELOW THRESHOLD\n# Define theme with larger text size for legend\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create plots with the custom theme\nafrica &lt;- ggplot(filtered, aes(x = pos, y = -(when_mutation_has_freq2), color = population)) +\n  geom_point(size = 6) +\n  labs(x = NULL, y = NULL, title = \"Africans\") + \n  custom_theme +  # Apply the custom theme\n  scale_color_brewer(palette = \"Set2\") + \n  ylim(6, 10)\n\neurope &lt;- ggplot(filtered_euro, aes(x = pos, y = -(when_mutation_has_freq2), color = population)) +\n  geom_point(size = 6) +\n  labs(x = NULL, y = NULL, title = \"Europeans + PUR\") + \n  custom_theme +  # Apply the custom theme\n  scale_color_manual(values = c(\"GBR\" = \"lightblue\", \"FIN\" = \"lightpink\", \"IBS\" = \"gold\", \"TSI\" = \"lightgreen\", \"PUR\" = \"orange2\")) +\n  ylim(6, 10)\n\nasia &lt;- ggplot(filtered_asia, aes(x = pos, y = -(when_mutation_has_freq2), color = population)) +\n  geom_point(size = 6) +\n  labs(x = NULL, y = NULL, title = \"East Asians\") + \n  custom_theme +  # Apply the custom theme\n  scale_color_manual(values = c(\"CDX\" = \"#A6CEE3\", \"CHB\" = \"#1F78B4\", \"CHS\" = \"#B2DF8A\", \"JPT\" = \"#33A02C\", \"KHV\" = \"#FB9A99\")) + \n  ylim(6, 10)\n\n# Combine the plots\ncombined_plots &lt;- grid.arrange(africa, europe, asia, ncol = 1, \n                                left = \"log10(p-value)\",         \n                                bottom = \"Genomic position\")\n\n# Save the combined plot with larger text sizes\nggsave(\"combined_threshold_RELATE.png\", combined_plots, width = 7, height = 15) \n\nWarning message:\n“Removed 5 rows containing missing values (`geom_point()`).”\n\n\n\n\n\n\n\n\n\nRUNS TEST\nAFRICAN POPULATIONS\n\n# Read the CSV files\nLWK &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_LWK_runstats.csv\", sep=\",\", header=TRUE)\nGWD &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GWD_runstats.csv\", sep=\",\", header=TRUE)\nESN &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_ESN_runstats.csv\", sep=\",\", header=TRUE)\nMSL &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_MSL_runstats.csv\", sep=\",\", header=TRUE)\nYRI &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_YRI_runstats.csv\", sep=\",\", header=TRUE)\n\n# Store the datasets in a list\ndatasets &lt;- list(LWK=LWK, GWD=GWD, ESN=ESN, MSL=MSL, YRI=YRI)\n\n# Loop over each dataset and modify them in place\nfor (name in names(datasets)) {\n  # Get the dataset\n  data &lt;- datasets[[name]]\n  \n  # Filter the data\n  filtered_data &lt;- data %&gt;%\n    filter(stat_name == 'nr_runs' & nr_mut &gt; 20)\n  \n  # Calculate -log10(p)\n  filtered_data$log10p &lt;- -log10(filtered_data$p)\n  \n  # Ensure 'stat' is treated as a factor\n  filtered_data$stat &lt;- as.factor(filtered_data$stat)\n  \n  # Assign the modified dataset back to the original variable name\n  assign(name, filtered_data)\n}\n\n# Combine data frames\nLWK$Population &lt;- \"LWK\"\nESN$Population &lt;- \"ESN\"\nGWD$Population &lt;- \"GWD\"\nMSL$Population &lt;- \"MSL\"\nYRI$Population &lt;- \"YRI\"\n\ncombined_data &lt;- rbind(LWK, ESN, GWD, MSL, YRI)\n\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create the plot\nplot_combined &lt;- ggplot(data = combined_data, aes(x = pos, y = log10p, color = Population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"-log10(p-value)\", title = \"Africans\") +\n  theme_light() + custom_theme +\n  geom_hline(yintercept = 6, color = \"red\") +\n  scale_color_brewer(palette = \"Set2\") +\n  theme(\n    text = element_text(size = 15),\n    plot.title = element_text(hjust = 0.5) # Center the title\n  )\n\n# Print the plot\nprint(plot_combined)\nggsave(\"africans_threshold_RUNS_SQUARE.png\", plot_combined, width = 7, height = 5)\n\nERROR: Error: object 'stat_name' not found\n\nError: object 'stat_name' not found\nTraceback:\n\n1. data %&gt;% filter(stat_name == \"nr_runs\" & nr_mut &gt; 20)\n2. filter(., stat_name == \"nr_runs\" & nr_mut &gt; 20)\n\n\n\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Define the file paths\nfile_paths &lt;- list(\n  LWK = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_LWK_runstats.csv\",\n  GWD = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GWD_runstats.csv\",\n  ESN = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_ESN_runstats.csv\",\n  MSL = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_MSL_runstats.csv\",\n  YRI = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_YRI_runstats.csv\"\n)\n\n# Read the CSV files\ndatasets &lt;- lapply(file_paths, function(path) {\n  read.csv(path, stringsAsFactors = FALSE)\n})\n\n# Filter and process each dataset\ndatasets &lt;- lapply(datasets, function(data) {\n  data %&gt;%\n    filter(stat_name == 'nr_runs' & nr_mut &gt; 20) %&gt;%\n    mutate(\n      log10p = -log10(p),\n      stat = as.factor(stat)\n    )\n})\n\n# Combine data frames and add Population column\npopulations &lt;- names(datasets)\nfor (i in seq_along(datasets)) {\n  datasets[[i]]$Population &lt;- populations[i]\n}\ncombined_data &lt;- do.call(rbind, datasets)\n\n# Define the custom theme\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create the plot\nplot_combined &lt;- ggplot(data = combined_data, aes(x = pos, y = log10p, color = Population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"-log10(p-value)\", title = \"Africans\") +\n  theme_light() + custom_theme +\n  geom_hline(yintercept = 6, color = \"red\") +\n  scale_color_brewer(palette = \"Set2\") +\n  theme(\n    text = element_text(size = 15),\n    plot.title = element_text(hjust = 0.5) # Center the title\n  )\n\n# Print the plot\nprint(plot_combined)\nggsave(\"africans_threshold_RUNS_SQUARE.png\", plot_combined, width = 7, height = 5)\n\n\nAttaching package: ‘dplyr’\n\n\nThe following object is masked from ‘package:gridExtra’:\n\n    combine\n\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n\nWarning message:\n“Removed 2353 rows containing missing values (`geom_point()`).”\nWarning message:\n“Removed 2353 rows containing missing values (`geom_point()`).”\n\n\n\n\n\n\n\n\n\nEUROPEANS + PUR\n\n# Read the CSV files\nGBR &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GBR_runstats.csv\", sep=\",\", header=TRUE)\nFIN &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_FIN_runstats.csv\", sep=\",\", header=TRUE)\nIBS &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_IBS_runstats.csv\", sep=\",\", header=TRUE)\nTSI &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_TSI_runstats.csv\", sep=\",\", header=TRUE)\nPUR &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_PUR_runstats.csv\", sep=\",\", header=TRUE)\n\n# Store the datasets in a list\ndatasets &lt;- list(GBR=GBR, FIN=FIN, IBS=IBS, TSI=TSI, PUR=PUR)\n\n# Loop over each dataset and modify them in place\nfor (name in names(datasets)) {\n  # Get the dataset\n  data &lt;- datasets[[name]]\n  \n  # Filter the data\n  filtered_data &lt;- data %&gt;%\n    filter(stat_name == 'nr_runs' & nr_mut &gt; 20)\n  \n  # Calculate -log10(p)\n  filtered_data$log10p &lt;- -log10(filtered_data$p)\n  \n  # Ensure 'stat' is treated as a factor\n  filtered_data$stat &lt;- as.factor(filtered_data$stat)\n  \n  # Assign the modified dataset back to the original variable name\n  assign(name, filtered_data)\n}\n\n# Combine data frames\nGBR$Population &lt;- \"GBR\"\nFIN$Population &lt;- \"FIN\"\nIBS$Population &lt;- \"IBS\"\nTSI$Population &lt;- \"TSI\"\nPUR$Population &lt;- \"PUR\"\n\ncombined_data &lt;- rbind(GBR, FIN, IBS, TSI, PUR)\n\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create the plot\nplot_combined &lt;- ggplot(data = combined_data, aes(x = pos, y = log10p, color = Population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"-log10(p-value)\", title = \"Europeans + PUR\") +\n  theme_light() + custom_theme +\n  geom_hline(yintercept = 6, color = \"red\") +\n  scale_color_manual(values = c(\"GBR\" = \"lightblue\", \"FIN\" = \"lightpink\", \"IBS\" = \"gold\", \"TSI\" = \"lightgreen\", \"PUR\" = \"orange2\"))+\n  theme(\n    text = element_text(size = 15),\n    plot.title = element_text(hjust = 0.5) # Center the title\n  )\n\n# Print the plot\nprint(plot_combined)\n\nggsave(\"europeans_threshold_RUNS_SQUARE.png\", plot_combined, width = 7, height = 5)\n\nWarning message:\n“Removed 7004 rows containing missing values (`geom_point()`).”\nWarning message:\n“Removed 7004 rows containing missing values (`geom_point()`).”\n\n\n\n\n\n\n\n\n\nEAST ASIANS\n\n# Load necessary library\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Read the CSV files\nCDX &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CDX_runstats.csv\", sep=\",\", header=TRUE)\nCHB &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHB_runstats.csv\", sep=\",\", header=TRUE)\nCHS &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHS_runstats.csv\", sep=\",\", header=TRUE)\nJPT &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_JPT_runstats.csv\", sep=\",\", header=TRUE)\nKHV &lt;- read.table(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_KHV_runstats.csv\", sep=\",\", header=TRUE)\n\n# Store the datasets in a list\ndatasets &lt;- list(CDX=CDX, CHB=CHB, CHS=CHS, JPT=JPT, KHV=KHV)\n\n# Loop over each dataset and modify them in place\nfor (name in names(datasets)) {\n  # Get the dataset\n  data &lt;- datasets[[name]]\n  \n  # Filter the data\n  filtered_data &lt;- data %&gt;%\n    filter(stat_name == 'nr_runs' & nr_mut &gt; 20)\n  \n  # Calculate -log10(p)\n  filtered_data$log10p &lt;- -log10(filtered_data$p)\n  \n  # Ensure 'stat' is treated as a factor\n  filtered_data$stat &lt;- as.factor(filtered_data$stat)\n  \n  # Assign the modified dataset back to the original variable name\n  assign(name, filtered_data)\n}\n\n# Combine data frames\nCDX$Population &lt;- \"CDX\"\nCHB$Population &lt;- \"CHB\"\nCHS$Population &lt;- \"CHS\"\nJPT$Population &lt;- \"JPT\"\nKHV$Population &lt;- \"KHV\"\n\ncombined_data &lt;- rbind(CDX, CHB, CHS, JPT, KHV)\n\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create the plot\nplot_combined &lt;- ggplot(data = combined_data, aes(x = pos, y = log10p, color = Population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"-log10(p-value)\", title = \"East Asians\") +\n  theme_light() + custom_theme +\n  geom_hline(yintercept = 6, color = \"red\") +\n  scale_color_brewer(palette = \"Paired\") +\n  theme(\n    text = element_text(size = 15),\n    plot.title = element_text(hjust = 0.5) # Center the title\n  )\n\n# Print the plot\nprint(plot_combined)\n\nggsave(\"asians_threshold_RUNS_SQUARE_correct.png\", plot_combined, width = 7, height = 5)\n\nWarning message:\n“Removed 5769 rows containing missing values (`geom_point()`).”\nWarning message:\n“Removed 5769 rows containing missing values (`geom_point()`).”\n\n\n\n\n\n\n\n\n\nCOMBINED P-VALUES\n\n# Load the necessary library\nlibrary(dplyr)\n\n# Define file paths for the five .sele files\nfile_paths_africa &lt;- c(\n  LWK = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_LWK.csv\",\n  ESN = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_ESN.csv\",\n  GWD = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_GWD.csv\",\n  MSL = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_MSL.csv\",\n  YRI = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_YRI.csv\"\n)\n\n# Read the files\nLWK &lt;- read.csv(file_paths_africa[\"LWK\"], header = TRUE)\nESN &lt;- read.csv(file_paths_africa[\"ESN\"], header = TRUE)\nGWD &lt;- read.csv(file_paths_africa[\"GWD\"], header = TRUE)\nMSL &lt;- read.csv(file_paths_africa[\"MSL\"], header = TRUE)\nYRI &lt;- read.csv(file_paths_africa[\"YRI\"], header = TRUE)\n\n# Function to subset data based on combined_p_values threshold\nsubset_data &lt;- function(data, population) {\n  data %&gt;%\n    filter(combined_p_values &gt;= 6) %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = LWK, population = \"LWK\"),\n  list(data = ESN, population = \"ESN\"),\n  list(data = GWD, population = \"GWD\"),\n  list(data = MSL, population = \"MSL\"),\n  list(data = YRI, population = \"YRI\")\n)\n\n# Subset and bind data from all files\nafricans_high_pvalue &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  subset_data(fp$data, fp$population)\n}))\n\n# Save the combined data to a single file\nwrite.csv(africans_high_pvalue, \"africans_combined.csv\", row.names = FALSE)\n\n\nAttaching package: ‘dplyr’\n\n\nThe following object is masked from ‘package:gridExtra’:\n\n    combine\n\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n\n\n\n\nlibrary(dplyr)\n## SELECT JUST POSITION LOWER THAN THRESHOLD (log10 p-value &lt; -6)\n# Define file paths for the five .sele files\nfile_paths_euro &lt;- c(\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_GBR.csv\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_FIN.csv\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_IBS.csv\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_TSI.csv\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_PUR.csv\"\n)\n\n# Read the files\nGBR &lt;- read.csv(file_paths_euro[1], header = TRUE)\nFIN &lt;- read.csv(file_paths_euro[2], header = TRUE)\nIBS &lt;- read.csv(file_paths_euro[3], header = TRUE)\nTSI &lt;- read.csv(file_paths_euro[4], header = TRUE)\nPUR &lt;- read.csv(file_paths_euro[5], header = TRUE)\n\n# Function to subset data based on combined_p_values threshold\nsubset_data &lt;- function(data, population) {\n  data %&gt;%\n    filter(combined_p_values &gt;= 6) %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = GBR, population = \"GBR\"),\n  list(data = FIN, population = \"FIN\"),\n  list(data = IBS, population = \"IBS\"),\n  list(data = TSI, population = \"TSI\"),\n  list(data = PUR, population = \"PUR\")\n)\n\n# Subset and bind data from all files\neuropeans_low_pvalue &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  subset_data(fp$data, fp$population)\n}))\n\n# Save the combined data to a single file\nwrite.csv(europeans_low_pvalue, \"europeans_combined.csv\", row.names = FALSE)\n\n\n# Define file paths for the five .csv files\nfile_paths_asia_combined &lt;- c(\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_CDX.csv\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_CHB.csv\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_CHS.csv\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_JPT.csv\",\n  \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_KHV.csv\"\n)\n\n# Read the files\nCDX &lt;- read.csv(file_paths_asia_combined[1])\nCHB &lt;- read.csv(file_paths_asia_combined[2])\nCHS &lt;- read.csv(file_paths_asia_combined[3])\nJPT &lt;- read.csv(file_paths_asia_combined[4])\nKHV &lt;- read.csv(file_paths_asia_combined[5])\n\n# Add population column to each data frame\nCDX$population &lt;- \"CDX\"\nCHB$population &lt;- \"CHB\"\nCHS$population &lt;- \"CHS\"\nJPT$population &lt;- \"JPT\"\nKHV$population &lt;- \"KHV\"\n\n# Function to subset data based on combined_p_values\nsubset_data &lt;- function(data, population) {\n  data %&gt;%\n    filter(combined_p_values &gt;= 6) %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = CDX, population = \"CDX\"),\n  list(data = CHB, population = \"CHB\"),\n  list(data = CHS, population = \"CHS\"),\n  list(data = JPT, population = \"JPT\"),\n  list(data = KHV, population = \"KHV\")\n)\n\n# Subset and bind data from all files\nasians_combined &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  subset_data(fp$data, fp$population)\n}))\n\n# Save the combined data to a single CSV file\nwrite.csv(asians_combined, \"asians_combined.csv\", row.names = FALSE)\n\n\nafrica_file &lt;- read.csv(\"/home/ari/ari-intern/people/ari/ariadna-intern/notebooks/africans_combined.csv\")\neurope_file &lt;- read.csv(\"/home/ari/ari-intern/people/ari/ariadna-intern/notebooks/europeans_combined.csv\")\nasia_file &lt;- read.csv(\"/home/ari/ari-intern/people/ari/ariadna-intern/notebooks/asians_combined.csv\")\n\n# Define theme with larger text size for legend\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create plots with the custom theme\nafrica &lt;- ggplot(africa_file, aes(x = pos, y = (combined_p_values), color = population)) +\n  geom_point(size = 6) +\n  labs(x = NULL, y = NULL, title = \"Africans\") + \n  custom_theme +  # Apply the custom theme\n  scale_color_brewer(palette = \"Set2\") + \n  ylim(6, 10)\n\neurope &lt;- ggplot(europe_file, aes(x = pos, y = (combined_p_values), color = population)) +\n  geom_point(size = 6) +\n  labs(x = NULL, y = NULL, title = \"Europeans + PUR\") + \n  custom_theme +  # Apply the custom theme\n  scale_color_manual(values = c(\"GBR\" = \"lightblue\", \"FIN\" = \"lightpink\", \"IBS\" = \"gold\", \"TSI\" = \"lightgreen\", \"PUR\" = \"orange2\")) +\n  ylim(6, 10)\n\nasia &lt;- ggplot(asia_file, aes(x = pos, y = (combined_p_values), color = population)) +\n  geom_point(size = 6) +\n  labs(x = NULL, y = NULL, title = \"East Asians\") + \n  custom_theme +  # Apply the custom theme\n  scale_color_manual(values = c(\"CDX\" = \"#A6CEE3\", \"CHB\" = \"#1F78B4\", \"CHS\" = \"#B2DF8A\", \"JPT\" = \"#33A02C\", \"KHV\" = \"#FB9A99\")) + \n  ylim(6, 10)\n\n# Combine the plots\ncombined_plots &lt;- grid.arrange(africa, europe, asia, ncol = 1, \n                                left = \"log10(p-value)\",         \n                                bottom = \"Genomic position\")\n\n# Save the combined plot with larger text sizes\nggsave(\"combined_threshold_COMBINED_gap.png\", combined_plots, width = 7, height = 15) \n\nWarning message:\n“Removed 3 rows containing missing values (`geom_point()`).”\n\n\n\n\n\n\n\n\n\n\n# Load the necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Define file paths for the five .sele files\nfile_paths_africa &lt;- c(\n  LWK = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_LWK.csv\",\n  ESN = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_ESN.csv\",\n  GWD = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_GWD.csv\",\n  MSL = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_MSL.csv\",\n  YRI = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_YRI.csv\"\n)\n\n# Read the files\nLWK &lt;- read.csv(file_paths_africa[\"LWK\"], header = TRUE)\nESN &lt;- read.csv(file_paths_africa[\"ESN\"], header = TRUE)\nGWD &lt;- read.csv(file_paths_africa[\"GWD\"], header = TRUE)\nMSL &lt;- read.csv(file_paths_africa[\"MSL\"], header = TRUE)\nYRI &lt;- read.csv(file_paths_africa[\"YRI\"], header = TRUE)\n\n# Function to add population column to the data\nadd_population &lt;- function(data, population) {\n  data %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = LWK, population = \"LWK\"),\n  list(data = ESN, population = \"ESN\"),\n  list(data = GWD, population = \"GWD\"),\n  list(data = MSL, population = \"MSL\"),\n  list(data = YRI, population = \"YRI\")\n)\n\n# Add population column and bind data from all files\nafricans_combined &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  add_population(fp$data, fp$population)\n}))\n\n# Save the combined data to a single file\nwrite.csv(africans_combined, \"africans_combined.csv\", row.names = FALSE)\n\n# Define theme with larger text size for legend\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create the plot\nplot_combined &lt;- ggplot(data = africans_combined, aes(x = pos, y = combined_p_values, color = population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"-log10(p-value)\", title = \"Africans\") +\n  theme_light() +\n  custom_theme +\n  scale_color_brewer(palette = \"Set2\") +\n  geom_hline(yintercept = 6, color = \"red\")\n\n# Print the plot\nprint(plot_combined)\nggsave(\"africans_combined_pvalues_SQUARE_big.png\", plot_combined, width = 7, height = 5)\n\n\n\n\n\n\n\n\n\n# Load the necessary libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Define file paths for the five .sele files\nfile_paths &lt;- c(\n  GBR = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_GBR.csv\",\n  FIN = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_FIN.csv\",\n  IBS = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_IBS.csv\",\n  TSI = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_TSI.csv\",\n  PUR = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_PUR.csv\"\n)\n\n# Read the files\nGBR &lt;- read.csv(file_paths[\"GBR\"], header = TRUE)\nFIN &lt;- read.csv(file_paths[\"FIN\"], header = TRUE)\nIBS &lt;- read.csv(file_paths[\"IBS\"], header = TRUE)\nTSI &lt;- read.csv(file_paths[\"TSI\"], header = TRUE)\nPUR &lt;- read.csv(file_paths[\"PUR\"], header = TRUE)\n\n# Function to add population column to the data\nadd_population &lt;- function(data, population) {\n  data %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = GBR, population = \"GBR\"),\n  list(data = FIN, population = \"FIN\"),\n  list(data = IBS, population = \"IBS\"),\n  list(data = TSI, population = \"TSI\"),\n  list(data = PUR, population = \"PUR\")\n)\n\n# Add population column and bind data from all files\ncombined_data &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  add_population(fp$data, fp$population)\n}))\n\n# Save the combined data to a single file\nwrite.csv(combined_data, \"european_populations.csv\", row.names = FALSE)\n\n# Create the plot\nplot_combined &lt;- ggplot(data = combined_data, aes(x = pos, y = combined_p_values, color = population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"-log10(p-value)\", title = \"Europeans+PUR\") +\n  theme_light() +\n  custom_theme+\n  scale_color_manual(values = c(\n    \"GBR\" = \"lightblue\", \n    \"FIN\" = \"lightpink\", \n    \"IBS\" = \"gold\", \n    \"TSI\" = \"lightgreen\", \n    \"PUR\" = \"orange2\"\n  )) +\n  geom_hline(yintercept = 6, color = \"red\")\n\n# Print the plot\nprint(plot_combined)\nggsave(\"europeans_combined_pvalues_SQUARE_big.png\", plot_combined, width = 7, height = 5)\n\n\n\n\n\n\n\n\n\n# Define file paths for the five .sele files\nfile_paths_asia &lt;- c(\n  CDX = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_CDX.csv\",\n  CHB = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_CHB.csv\",\n  CHS = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_CHS.csv\",\n  JPT = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_JPT.csv\",\n  KHV = \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher/combined_KHV.csv\"\n)\n\n# Read the files\nCDX &lt;- read.csv(file_paths_asia[\"CDX\"], header = TRUE)\nCHB &lt;- read.csv(file_paths_asia[\"CHB\"], header = TRUE)\nCHS &lt;- read.csv(file_paths_asia[\"CHS\"], header = TRUE)\nJPT &lt;- read.csv(file_paths_asia[\"JPT\"], header = TRUE)\nKHV &lt;- read.csv(file_paths_asia[\"KHV\"], header = TRUE)\n\n# Function to add population column to the data\nadd_population &lt;- function(data, population) {\n  data %&gt;%\n    mutate(population = population)\n}\n\n# Define data frames and corresponding population names\nfile_pop &lt;- list(\n  list(data = CDX, population = \"CDX\"),\n  list(data = CHB, population = \"CHB\"),\n  list(data = CHS, population = \"CHS\"),\n  list(data = JPT, population = \"JPT\"),\n  list(data = KHV, population = \"KHV\")\n)\n\n# Add population column and bind data from all files\nasians_combined &lt;- do.call(rbind, lapply(file_pop, function(fp) {\n  add_population(fp$data, fp$population)\n}))\n\n# Save the combined data to a single file\nwrite.csv(asians_combined, \"asians_combined.csv\", row.names = FALSE)\n\n# Define theme with larger text size for legend\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    text = element_text(size = 14),  # Increase the text size for all text elements\n    plot.title = element_text(size = 16, hjust = 0.5),  # Increase the title size\n    axis.title = element_text(size = 15),  # Increase the axis label size\n    axis.text = element_text(size = 12),  # Increase the axis text size\n    legend.text = element_text(size = 14)  # Increase the legend text size\n  )\n\n# Create the plot\nplot_combined &lt;- ggplot(data = asians_combined, aes(x = pos, y = combined_p_values, color = population)) +\n  geom_point(pch = 19, size = 4) +\n  labs(x = \"Genomic Position\", y = \"-log10(p-value)\", title = \"East Asians\") +\n  theme_light() +\n  custom_theme +\n  scale_color_brewer(palette = \"Paired\") +\n  geom_hline(yintercept = 6, color = \"red\")\n\n# Print the plot\nprint(plot_combined)\nggsave(\"asians_combined_pvalues_SQUARE_big.png\", plot_combined, width = 7, height = 5)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Detect selection in populations</span>"
    ]
  },
  {
    "objectID": "notebooks/2_runs_test.html",
    "href": "notebooks/2_runs_test.html",
    "title": "Runs test",
    "section": "",
    "text": "import os\nimport sys\nfrom collections import defaultdict\nfrom functools import partial\nimport itertools\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom pandas.errors import SettingWithCopyWarning\nimport numpy as np\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nset_matplotlib_formats('retina', 'png')\n\nfrom tqdm.notebook import tqdm \nfrom math import factorial, log, log10, log1p, floor, ceil\nfrom scipy.stats import chi2\n\nimport multiprocess\n\nsns.set()\nsns.set_style(\"ticks\")\n\nimport tskit\nimport msprime\n\nimport geneinfo as gi\ngi.email('kaspermunch@birc.au.dk')\n\n# scale down size of default plots\nsns.set_context(\"paper\")\nimport matplotlib as mpl\nscale = 0.8\nd = dict([(k, v*scale) for (k, v) in sns.plotting_context('paper').items()])\nd['figure.figsize'] = [5.4, 3.5]\nmpl.rcParams.update(d)\n\ndef modpath(p, parent=None, base=None, suffix=None):\n    par, name = os.path.split(p)\n    name_no_suffix, suf = os.path.splitext(name)\n    if type(suffix) is str:\n        suf = suffix\n    if parent is not None:\n        par = parent\n    if base is not None:\n        name_no_suffix = base\n    new_path = os.path.join(par, name_no_suffix + suf)\n    if type(suffix) is tuple:\n        assert len(suffix) == 2\n        new_path, nsubs = re.subn(r'{}$'.format(suffix[0]), suffix[1], new_path)\n        assert nsubs == 1, nsubs\n    return new_path\n\n\nfrom scipy.stats import chi2\ndef fisher_method(pvalues):\n    df = 2* len(pvalues)\n    return 1-chi2.cdf(-2*sum(map(log, pvalues)), df)\n    \np = fisher_method([1e-4, 1e-3])\n-np.log10(p)\n\n5.766544551240487\n\n\n\ndef fisher_method(pvalues):\n    df = 2* len(pvalues)\n    return 1-chi2.cdf(-2*sum(map(log, pvalues)), df)\n    \nn = 100\nx = np.linspace(1e-10, 1, n)\na = np.array(list(itertools.product(x, x)))\nb = np.apply_along_axis(fisher_method, 1, a)\nc = b.reshape(n, n)\ndata = pd.DataFrame(c)\ndata.index = x\ndata.columns = x\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nsns.heatmap(data=data, cbar_kws={'pad': 0.02}, ax=ax1)\nax1.contour(np.arange(.5, data.shape[1]), np.arange(.5, data.shape[0]), data, levels=20, colors='white')\nax1.invert_yaxis()\n\n\n\ndef fisher_method_log10(pvalues):\n    df = 2* len(pvalues)\n    return -np.log10(1-chi2.cdf(-2*sum(map(log, pvalues)), df))\n    # return 1-chi2.cdf(-2*sum(map(log, pvalues)), df)\n\npmin = -8\nn = -pmin*1+1\n# x = np.logspace(1e-10, 1, n)\nx = np.logspace(-8, 0, n)\na = np.array(list(itertools.product(x, x)))\nb = np.apply_along_axis(fisher_method_log10, 1, a)\nc = b.reshape(n, n)\ndata = pd.DataFrame(c)\ndata.index = np.round(-np.log10(x), 1)\ndata.columns = np.round(-np.log10(x), 1)\n\nsns.heatmap(data=data, cbar_kws={'pad': 0.02, 'label': 'Combined -log10(p-value)'}, ax=ax2)\ncs = ax2.contour(np.arange(.5, data.shape[1]), np.arange(.5, data.shape[0]), data, levels=20, colors='white')\n\ndef fmt(x):\n    return np.round(x,2)\n\nax2.clabel(cs, cs.levels[::2], inline=True, fmt=fmt, fontsize=10)\nax2.invert_yaxis()\nplt.xlabel('Relate -log10(p-value)')\nplt.ylabel('Coalescence runs -log10(p-value)') ;\n\n\n\n\n\n\n\n\n\nimport scipy\n\nclass Comb():\n\n    cache = {}\n    \n    def __init__(self):\n        pass\n\n    def __call__(self, n, k, exact=True):\n        if (n, k) not in self.cache:\n            self.cache[(n, k)] = scipy.special.comb(n, k, exact=exact)\n        return self.cache[(n, k)]\n\n    @classmethod\n    def clear(cls):\n        cls.cache = {}\n\n    def __enter__(self):\n\n        def init_worker(data):\n            # declare scope of a new global variable\n            global comb\n            # store argument in the global variable for this process\n            comb = data\n            \n        self.pool = multiprocess.Pool(processes=8, initializer=init_worker, initargs=(self,))\n        return self.pool\n\n    def __exit__(self, type, value, tb):\n        self.pool.close()\n\nComb().clear()\ncomb = Comb()\n\nwith Comb() as pool:\n    pass\n\n\n## Combinatorial results and functions for run probabilities ##\ndef get_coalescence_runs(all_times, clade_times):\n    clade_times_set = set(clade_times)\n    k, fn = 1, 1\n    coalescence_runs = []\n    first_derived_coal_found = False\n    for t in all_times:\n        is_derived = int( t in clade_times_set)\n        if first_derived_coal_found:\n            coalescence_runs.append(is_derived)\n        if is_derived:\n            # get all the coalescences *after* the first derived one. So that the first can be both 0 and 1\n            first_derived_coal_found = True\n    return np.array(coalescence_runs)\n\ndef get_runs_of_1s(bits):\n    for bit, group in itertools.groupby(bits):\n        if bit:\n            yield sum(group)\n\ndef get_all_runs(bits):\n    for bit, group in itertools.groupby(bits):\n        if bit:\n            yield sum(group)\n    bits = np.absolute(bits - 1)\n    for bit, group in itertools.groupby(bits):\n        if bit:\n            yield sum(group)\n\n\ndef prob_nr_of_runs(n, n1, n2):\n    \"\"\"\n    Probability of the number runs of either zeros or ones\n    n: number of runs\n    n0: nr zeros\n    n1: nr ones\n    \"\"\"\n    if n % 2:\n        # uneven\n        k = (n - 1) //  2\n        return (comb(n1-1, k)*comb(n2-1, k-1) + comb(n1-1, k-1)*comb(n2-1, k)) / comb(n1+n2, n1)\n    else:\n        # even\n        k = n // 2\n        return 2*comb(n1-1, k-1)*comb(n2-1, k-1) / comb(n1+n2, n1)    \n\n\n## Compute cached probabilities ##\n\n\nimport multiprocess\npool = multiprocess.Pool(processes=8)\n\nn = 200\ndim = 2*n+1\ncache = np.ndarray(shape=(n+1, n+1, 2*n+1), dtype=float)\ncache[:, :, :] = np.nan\nfor n0 in tqdm(range(1, n+1)):\n    for n1 in range(1, n+1):\n        for r in range(1, n0+n1):\n            cache[n0, n1, r] = prob_nr_of_runs(r, n0, n1)\n\npool.close()\n\nnp.save('prob_nr_of_runs_cache.npy', cache)\n\n\n\n\n\n## Compute p-values for data ##\nprob_nr_of_runs_cache = np.load('prob_nr_of_runs_cache.npy')\n\ndef extract_population_name(file_path):\n    # Split the file path by '/'\n    parts = file_path.split('/')\n    # Extract the second to last part which contains the population name\n    return parts[-4]\n\nfor treeseq_file_name in [\n    # africans\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/LWK/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/GWD/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/ESN/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/MSL/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/YRI/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    # europeans\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/GBR/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/FIN/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/IBS/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/TSI/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/PUR/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    #asians\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/CDX/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHB/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHS/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/JPT/relate/run_relate/1000g_ppl_phased_haplotypes.trees',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/KHV/relate/run_relate/1000g_ppl_phased_haplotypes.trees'\n                         ]:\n    print(os.path.basename(treeseq_file_name))\n    \n    population_name = extract_population_name(treeseq_file_name)\n    \n    output_file_name = modpath(treeseq_file_name, parent='/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/', suffix=f'_{population_name}_runstats.h5')\n    \n    tree_seq = tskit.load(treeseq_file_name)\n    \n    \n    nr_samples = tree_seq.num_samples\n    \n    records = []\n    nodes_time = tree_seq.nodes_time\n\n    tree_idx = 0\n    for tree in tqdm(tree_seq.trees()):\n    \n        N = tree.num_samples()\n        all_times = [nodes_time[n] for n in tree.timedesc() if not tree.is_leaf(n)]\n        for mut in tree.mutations():\n            node = tree_seq.mutations_node[mut.id]\n            clade_times = [nodes_time[n] for n in tree.timedesc(node) if not tree.is_leaf(n)]\n\n            # nr-all-runs and max ones-run probabilities\n            runs = get_coalescence_runs(all_times, clade_times)\n\n            if len(runs) &lt; nr_samples / 4:\n                continue\n            \n            n1 = sum(runs)\n            n0 = len(runs) - n1\n            run_lengths = np.fromiter(get_all_runs(runs), int)\n            runs_of_1s = list(get_runs_of_1s(runs))\n\n            if len(runs_of_1s) == 0:\n                # trippleton or smaller\n                continue\n\n            max_ones_run_len = max(runs_of_1s)\n            nr_runs = run_lengths.size\n\n            \n            if nr_runs == 1 or len(runs) &lt;= 2 or nr_runs == len(runs):\n                pvalue_nr_runs = np.nan\n            else:\n                try:\n                    pvalue_nr_runs = prob_nr_of_runs_cache[n0, n1, 1:(nr_runs+1)].sum()\n                except IndexError:\n                    pvalue_nr_runs = sum(prob_nr_of_runs(x, n0, n1) for x in range(1, nr_runs+1))\n            \n            interval = tree.interval\n            num_mutations = tree.num_mutations\n\n            clade_left, clade_right = interval.left, interval.right\n\n            assert clade_times\n            \n            records.append(['nr_runs',\n                            mut.site, \n                            pvalue_nr_runs,\n                            nr_runs,\n                            len(runs),                            \n                            clade_times[0], \n                            0,\n                            interval.left,\n                            interval.right,\n                            clade_left, \n                            clade_right,\n                            num_mutations])\n    \n    \n        tree_idx += 1\n    \n    \n    df = pd.DataFrame.from_records(records, columns=['stat_name', 'site', 'p', 'stat', 'nr_coal', 't1', 't2', \n                                                     'tree_left', 'tree_right', 'clade_left', 'clade_right', \n                                                     'nr_mut'])\n    df['pos'] = tree_seq.sites_position[df.site]\n    df.to_hdf(output_file_name, 'df', format='table')\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n1000g_ppl_phased_haplotypes.trees\n\n\n\n\n\n\n# List of .h5 file paths\nh5_file_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_LWK_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GWD_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_ESN_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_MSL_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_YRI_runstats.h5',\n    #'/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GBR_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_FIN_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_TSI_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_IBS_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_PUR_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CDX_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHB_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHS_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_JPT_runstats.h5',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_KHV_runstats.h5'\n]\n\n# Directory to save the CSV files\ncsv_dir_path = '/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/'\n\n# Function to convert .h5 to .csv\ndef convert_h5_to_csv(h5_file_path, csv_dir_path):\n    # Read the .h5 file\n    df = pd.read_hdf(h5_file_path)\n\n    # Create the output CSV file path\n    csv_file_name = os.path.splitext(os.path.basename(h5_file_path))[0] + '.csv'\n    csv_file_path = os.path.join(csv_dir_path, csv_file_name)\n\n    # Save the DataFrame to a CSV file\n    df.to_csv(csv_file_path, index=False)\n    print(f\"Converted {h5_file_path} to {csv_file_path}\")\n\n# Loop through each .h5 file and convert it to CSV\nfor h5_file_path in h5_file_paths:\n    convert_h5_to_csv(h5_file_path, csv_dir_path)\n\n\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_LWK_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_LWK_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GWD_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GWD_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_ESN_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_ESN_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_MSL_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_MSL_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_YRI_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_YRI_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_FIN_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_FIN_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_TSI_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_TSI_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_IBS_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_IBS_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_PUR_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_PUR_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CDX_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CDX_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHB_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHB_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHS_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHS_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_JPT_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_JPT_runstats.csv\nConverted /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_KHV_runstats.h5 to /home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_KHV_runstats.csv\n\n\n\n# africans\nLWK = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_LWK_runstats.h5')\nGWD = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_GWD_runstats.h5')\nESN = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_ESN_runstats.h5')\nMSL = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_MSL_runstats.h5')\nYRI = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_YRI_runstats.h5')\n\n# europeans\nGBR = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_GBR_runstats.h5')\nFIN = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_FIN_runstats.h5')\nIBS = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_IBS_runstats.h5')\nTSI = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_TSI_runstats.h5')\n\n\n# asians \nCDX = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_CDX_runstats.h5')\nCHB = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_CHB_runstats.h5')\nCHS = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_CHS_runstats.h5')\nJPT = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_JPT_runstats.h5')\nKHV = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_KHV_runstats.h5')\n\n\nLWK = pd.read_hdf('/home/ari/ari-intern/people/ari/ariadna-intern/results/1000g_ppl_phased_haplotypes_LWK_runstats.h5')\nprint(LWK)\n\n       stat_name    site         p  stat  nr_coal            t1  t2  \\\n0        nr_runs       3  1.000000     3      101    449.973511   0   \n1        nr_runs       4  1.000000    21      121    992.319519   0   \n2        nr_runs       5  0.959909    80      146   5125.490723   0   \n3        nr_runs      11  0.797558    74      151  16823.707031   0   \n4        nr_runs      18  1.000000     3       41    135.369598   0   \n...          ...     ...       ...   ...      ...           ...  ..   \n317382   nr_runs  479277  0.728110    25      133   1796.468018   0   \n317383   nr_runs  479278  1.000000     7      103    511.939178   0   \n317384   nr_runs  479279  1.000000    33      142   3474.286865   0   \n317385   nr_runs  479283  1.000000     3       67    162.246826   0   \n317386   nr_runs  479284  0.764533    76      149   8431.162109   0   \n\n          tree_left   tree_right   clade_left  clade_right  nr_mut  \\\n0         2781609.5    2781896.0    2781609.5    2781896.0       2   \n1         2781609.5    2781896.0    2781609.5    2781896.0       2   \n2         2781896.0    2781956.5    2781896.0    2781956.5       1   \n3         2782569.5    2782997.5    2782569.5    2782997.5       3   \n4         2782997.5    2784477.5    2782997.5    2784477.5       2   \n...             ...          ...          ...          ...     ...   \n317382  155686749.0  155699752.0  155686749.0  155699752.0      23   \n317383  155686749.0  155699752.0  155686749.0  155699752.0      23   \n317384  155686749.0  155699752.0  155686749.0  155699752.0      23   \n317385  155686749.0  155699752.0  155686749.0  155699752.0      23   \n317386  155686749.0  155699752.0  155686749.0  155699752.0      23   \n\n                pos  \n0         2781642.0  \n1         2781865.0  \n2         2781927.0  \n3         2782572.0  \n4         2783658.0  \n...             ...  \n317382  155696715.0  \n317383  155697134.0  \n317384  155697920.0  \n317385  155699716.0  \n317386  155699751.0  \n\n[317387 rows x 13 columns]",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Runs test</span>"
    ]
  },
  {
    "objectID": "notebooks/3_fisher_method.html",
    "href": "notebooks/3_fisher_method.html",
    "title": "Combine p-values (fisher method)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport sys, os\nimport re\nfrom collections import defaultdict\nimport numpy as np\nimport pandas as pd\n\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nset_matplotlib_formats('retina', 'png')\nfrom matplotlib.patches import Rectangle, Polygon\nimport seaborn as sns\nsns.set_style('white')\n\nimport geneinfo as gi\ngi.email('ariadna.saez@alum.esci.upf.edu')\n\n\n%env http_proxy=http://proxy-default:3128\n\ndef fisher_method_log10(pvalues):\n    df = 2 * len(pvalues)\n    return -np.log10(1 - chi2.cdf(-2 * sum(map(np.log, pvalues)), df))\n\ndef fisher_method(pvalues):\n    df = 2* len(pvalues)\n    return 1-chi2.cdf(-2*sum(map(np.log, pvalues)), df)\n\nenv: http_proxy=http://proxy-default:3128\n\n\n\n# List of populations and their file paths\npopulations = {\n    # africans\n    'LWK': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/LWK/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_LWK_runstats.h5\"\n    },\n    'ESN': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/ESN/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_ESN_runstats.h5\"\n    },\n    'GWD': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/GWD/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GWD_runstats.h5\"\n    },\n    'MSL': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/MSL/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_MSL_runstats.h5\"\n    },\n    'YRI': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/YRI/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_YRI_runstats.h5\"\n    }\n}\n\nfor population, file_paths in populations.items():\n    # Read files into DataFrames\n    file1 = pd.read_csv(file_paths['relate'], sep=' ')\n    file2 = pd.read_hdf(file_paths['kasper'])\n\n    # Convert 'pos' column to integers in the second DataFrame (it had decimals - position.0)\n    file2['pos'] = file2['pos'].astype(int)\n\n    # Merge the two DataFrames on the 'pos' column\n    merged_df = pd.merge(file1[['pos', 'when_mutation_has_freq2']], file2[['pos', 'p']], on='pos', how='inner')\n    \n    merged_df = merged_df.loc[(merged_df.p &lt; 1)]\n    \n    # Apply -np.log10() function to the 'p' column (K p-value is not under logarithm)\n    #merged_df['p'] = -np.log10(merged_df['p'])\n\n    # Change negative values to positive (relate file contains negative values: flip for plotting)\n   # merged_df[['when_mutation_has_freq2', 'p']] = merged_df[['when_mutation_has_freq2', 'p']].abs()\n\n    merged_df['relate_p'] = 10**merged_df.when_mutation_has_freq2\n    \n    merged_df = merged_df.loc[(merged_df.p &lt; 1)]\n    \n    print(f\"Merged file for {population}:\")\n    print(merged_df)\n    \n    combined_values = merged_df[['when_mutation_has_freq2', 'p']].values.tolist() # list of pairs\n\n    # Convert data to DataFrame\n    df = pd.DataFrame(merged_df)\n\n    # Combine p-values\n    combined_p_values = df[['relate_p', 'p']].apply(fisher_method, axis=1)  # FISHER METHOD HERE\n    \n    combined_p_values = -np.log10(combined_p_values)\n\n    # Create a new DataFrame with pos and combined p-values\n    new_df = pd.DataFrame({'pos': df['pos'], 'combined_p_values': combined_p_values})\n    \n    # Specify the file path including the directory and population name\n    file_path = os.path.join(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher\", f\"combined_{population}.csv\")\n    \n    # Save the DataFrame with the population name in the filename\n    new_df.to_csv(file_path, index=False)\n\n    # Plotting\n    plt.figure(figsize=(12, 3))\n    sns.scatterplot(data=new_df, x='pos', y='combined_p_values', linewidth=0, s=5)\n    plt.xticks(np.arange(0, new_df['pos'].max()+1, 5000000))\n    plt.xlabel('Position')\n    plt.ylabel('Combined P Values')\n    plt.title(f'Position vs Combined P Values ({population})')\n    plt.tight_layout()\n    sns.despine()\n    plt.show()\n\nMerged file for LWK:\n              pos  when_mutation_has_freq2         p  relate_p\n1         2781865                -1.805110  0.559215  0.015664\n2         2781927                -0.581409  0.825397  0.262175\n3         2782572                -0.057022  0.497412  0.876956\n4         2784657                -1.002310  0.806016  0.099470\n5         2784758                -0.515567  0.162963  0.305094\n...           ...                      ...       ...       ...\n316226  155686314                -0.272410  0.419090  0.534060\n316227  155687184                -0.126810  0.858721  0.746775\n316232  155695384                -0.156513  0.942252  0.697408\n316235  155696715                -0.340360  0.350237  0.456709\n316239  155699751                -1.394590  0.960856  0.040310\n\n[164071 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for ESN:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781514                -0.757029  0.724885  0.174973\n1         2781584                -0.658046  0.903371  0.219763\n2         2781635                -0.203300  0.282618  0.626181\n4         2781865                -0.580090  0.691273  0.262972\n5         2781927                -0.879552  0.715159  0.131962\n...           ...                      ...       ...       ...\n342323  155688581                -0.484202  0.926298  0.327943\n342328  155695384                -0.129718  0.897104  0.741792\n342331  155696715                -0.381819  0.316431  0.415127\n342332  155697006                -0.973781  1.000000  0.106223\n342336  155699751                -0.867858  0.854032  0.135563\n\n[183143 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for GWD:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781514                -0.656961  0.911416  0.220312\n1         2781584                -0.268348  0.800576  0.539078\n2         2781635                -0.782312  0.813803  0.165078\n4         2781865                -0.857276  0.877995  0.138907\n7         2784657                -0.081707  0.984001  0.828501\n...           ...                      ...       ...       ...\n355597  155695384                -0.503015  0.993574  0.314040\n355600  155696715                -0.919521  0.988161  0.120359\n355602  155697920                -0.646052  0.810575  0.225917\n355603  155699015                -0.446419  0.504290  0.357751\n355605  155699751                -0.686630  0.991798  0.205764\n\n[190799 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for MSL:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781514                -0.196672  0.216135  0.635811\n1         2781584                -0.310528  0.509175  0.489184\n2         2781635                -1.444370  0.895705  0.035944\n3         2781865                -0.267589  0.604986  0.540021\n4         2781927                -0.405753  0.811930  0.392868\n...           ...                      ...       ...       ...\n316379  155687184                -0.581844  0.110977  0.261912\n316385  155695384                -0.631632  0.047748  0.233544\n316389  155696715                -0.462322  0.711328  0.344888\n316391  155697920                -0.363937  0.737073  0.432577\n316392  155699751                -0.993874  0.549955  0.101421\n\n[169523 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for YRI:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781584                -0.548556  0.671962  0.282777\n1         2781635                -0.515658  0.684116  0.305030\n3         2781927                -1.277280  0.457870  0.052810\n5         2783658                -0.011216  0.911553  0.974505\n6         2783897                -1.527350  0.428805  0.029693\n...           ...                      ...       ...       ...\n361393  155688581                -0.324589  1.000000  0.473599\n361397  155695384                -0.242744  0.608113  0.571816\n361399  155696715                -1.320200  0.881855  0.047841\n361402  155697920                -0.145482  0.662727  0.715349\n361403  155699751                -1.552410  0.411279  0.028028\n\n[190951 rows x 4 columns]\n\n\n\n\n\n\n\n\n\n\npopulations = {\n    # europeans\n    'GBR': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/GBR/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_GBR_runstats.h5\"\n    },\n    'FIN': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/FIN/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_FIN_runstats.h5\"\n    },\n    'IBS': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/IBS/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_IBS_runstats.h5\"\n    },\n    'TSI': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/TSI/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_TSI_runstats.h5\"\n    },\n    'PUR': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/PUR/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_PUR_runstats.h5\"\n    }\n}\n\nfor population, file_paths in populations.items():\n    # Read files into DataFrames\n    file1 = pd.read_csv(file_paths['relate'], sep=' ')\n    file2 = pd.read_hdf(file_paths['kasper'])\n\n    # Convert 'pos' column to integers in the second DataFrame (it had decimals - position.0)\n    file2['pos'] = file2['pos'].astype(int)\n\n    # Merge the two DataFrames on the 'pos' column\n    merged_df = pd.merge(file1[['pos', 'when_mutation_has_freq2']], file2[['pos', 'p']], on='pos', how='inner')\n    \n    merged_df = merged_df.loc[(merged_df.p &lt; 1)]\n    \n    # Apply -np.log10() function to the 'p' column (K p-value is not under logarithm)\n    #merged_df['p'] = -np.log10(merged_df['p'])\n\n    # Change negative values to positive (relate file contains negative values: flip for plotting)\n   # merged_df[['when_mutation_has_freq2', 'p']] = merged_df[['when_mutation_has_freq2', 'p']].abs()\n\n    merged_df['relate_p'] = 10**merged_df.when_mutation_has_freq2\n    \n    merged_df = merged_df.loc[(merged_df.p &lt; 1)]\n    \n    print(f\"Merged file for {population}:\")\n    print(merged_df)\n    \n    combined_values = merged_df[['when_mutation_has_freq2', 'p']].values.tolist() # list of pairs\n\n    # Convert data to DataFrame\n    df = pd.DataFrame(merged_df)\n\n    # Combine p-values\n    combined_p_values = df[['relate_p', 'p']].apply(fisher_method, axis=1)\n    \n    combined_p_values = -np.log10(combined_p_values)\n\n    # Create a new DataFrame with pos and combined p-values\n    new_df = pd.DataFrame({'pos': df['pos'], 'combined_p_values': combined_p_values})\n    \n    # Specify the file path including the directory and population name\n    file_path = os.path.join(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher\", f\"combined_{population}.csv\")\n    \n    # Save the DataFrame with the population name in the filename\n    new_df.to_csv(file_path, index=False)\n\n    # Plotting\n    plt.figure(figsize=(12, 3))\n    sns.scatterplot(data=new_df, x='pos', y='combined_p_values', linewidth=0, s=5)\n    plt.xticks(np.arange(0, new_df['pos'].max()+1, 5000000))\n    plt.xlabel('Position')\n    plt.ylabel('Combined P Values')\n    plt.title(f'Position vs Combined P Values ({population})')\n    plt.tight_layout()\n    sns.despine()\n    plt.show()\n\nMerged file for GBR:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781604                -0.140835  0.796678  0.723044\n1         2781635                -0.159586  0.715426  0.692491\n2         2781927                -1.710600  0.906692  0.019472\n3         2781986                -1.710600  0.906692  0.019472\n4         2782116                -0.372146  0.755806  0.424477\n...           ...                      ...       ...       ...\n151649  155688581                -1.602200  0.565608  0.024992\n151650  155693713                -0.444443  0.209805  0.359383\n151651  155695384                -0.365995  0.680090  0.430532\n151652  155697920                -2.492710  0.723938  0.003216\n151653  155699751                -0.404917  0.616844  0.393625\n\n[98904 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for FIN:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781604                -0.044371  0.484337  0.902878\n2         2781927                -1.309770  0.661468  0.049004\n3         2781986                -1.309770  0.661468  0.049004\n4         2782116                -0.044371  0.484337  0.902878\n5         2782161                -0.036395  0.709697  0.919614\n...           ...                      ...       ...       ...\n159917  155688581                -0.136697  0.294709  0.729967\n159920  155695384                -0.478270  0.409407  0.332453\n159921  155696325                -0.708800  0.166317  0.195524\n159922  155697920                -3.409930  0.718972  0.000389\n159924  155699751                -0.036395  0.554544  0.919614\n\n[100299 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for IBS:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781514                -0.430028  0.658414  0.371511\n1         2781604                -0.487534  0.523774  0.325436\n2         2781635                -0.408764  0.890985  0.390154\n3         2781927                -1.165120  0.718518  0.068372\n4         2781986                -1.165120  0.718518  0.068372\n...           ...                      ...       ...       ...\n181309  155688581                -0.304668  0.818028  0.495829\n181310  155693713                -0.345917  0.290844  0.450903\n181311  155695384                -0.481591  0.426761  0.329920\n181313  155697920                -3.375790  0.826080  0.000421\n181315  155699751                -0.067853  0.374625  0.855357\n\n[109375 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for TSI:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781604                -0.288686  1.000000  0.514415\n1         2781635                -0.163362  0.445120  0.686496\n2         2781927                -1.293830  0.702406  0.050836\n3         2781986                -1.293830  0.702406  0.050836\n5         2782161                -0.300171  0.251178  0.500990\n...           ...                      ...       ...       ...\n158587  155686314                -0.419196  0.947955  0.380894\n158588  155687184                -0.419196  0.947955  0.380894\n158591  155695384                -0.419196  0.947955  0.380894\n158593  155697920                -2.507860  0.627597  0.003106\n158595  155699751                -0.090797  0.949137  0.811339\n\n[100369 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for PUR:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781514                -0.337251  0.801855  0.459991\n2         2781604                -0.385397  0.925864  0.411721\n3         2781635                -0.346893  0.806642  0.449891\n4         2781927                -1.868690  0.970570  0.013530\n5         2782116                -0.498154  0.424774  0.317575\n...           ...                      ...       ...       ...\n255739  155688581                -0.713522  0.291062  0.193410\n255741  155694896                -1.573550  0.276854  0.026696\n255742  155695384                -0.734242  0.652714  0.184399\n255745  155697920                -5.706710  0.417134  0.000002\n255747  155699751                -0.489125  0.663368  0.324246\n\n[130954 rows x 4 columns]\n\n\n\n\n\n\n\n\n\n\npopulations = {\n    # asians\n    'CDX': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CDX/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CDX_runstats.h5\"\n    },\n    'CHB': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHB/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHB_runstats.h5\"\n    },\n    'CHS': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHS/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_CHS_runstats.h5\"\n    },\n    'KHV': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/KHV/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_KHV_runstats.h5\"\n    },\n    'JPT': {\n        'relate': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/JPT/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele\",\n        'kasper': \"/home/ari/ari-intern/people/ari/ariadna-intern/steps/runs_test/1000g_ppl_phased_haplotypes_JPT_runstats.h5\"\n    }\n}\n\n\nfor population, file_paths in populations.items():\n    # Read files into DataFrames\n    file1 = pd.read_csv(file_paths['relate'], sep=' ')\n    file2 = pd.read_hdf(file_paths['kasper'])\n\n    # Convert 'pos' column to integers in the second DataFrame (it had decimals - position.0)\n    file2['pos'] = file2['pos'].astype(int)\n\n    # Merge the two DataFrames on the 'pos' column\n    merged_df = pd.merge(file1[['pos', 'when_mutation_has_freq2']], file2[['pos', 'p']], on='pos', how='inner')\n    \n    merged_df = merged_df.loc[(merged_df.p &lt; 1)]\n    \n    # Apply -np.log10() function to the 'p' column (K p-value is not under logarithm)\n    #merged_df['p'] = -np.log10(merged_df['p'])\n\n    # Change negative values to positive (relate file contains negative values: flip for plotting)\n   # merged_df[['when_mutation_has_freq2', 'p']] = merged_df[['when_mutation_has_freq2', 'p']].abs()\n\n    merged_df['relate_p'] = 10**merged_df.when_mutation_has_freq2\n    \n    merged_df = merged_df.loc[(merged_df.p &lt; 1)]\n    \n    print(f\"Merged file for {population}:\")\n    print(merged_df)\n    \n    combined_values = merged_df[['when_mutation_has_freq2', 'p']].values.tolist() # list of pairs\n\n    # Convert data to DataFrame\n    df = pd.DataFrame(merged_df)\n\n    # Combine p-values\n    combined_p_values = df[['relate_p', 'p']].apply(fisher_method, axis=1)\n    \n    combined_p_values = -np.log10(combined_p_values)\n\n    # Create a new DataFrame with pos and combined p-values\n    new_df = pd.DataFrame({'pos': df['pos'], 'combined_p_values': combined_p_values})\n    \n    # Specify the file path including the directory and population name\n    file_path = os.path.join(\"/home/ari/ari-intern/people/ari/ariadna-intern/steps/fisher\", f\"combined_{population}.csv\")\n    \n    # Save the DataFrame with the population name in the filename\n    new_df.to_csv(file_path, index=False)\n\n    # Plotting\n    plt.figure(figsize=(12, 3))\n    sns.scatterplot(data=new_df, x='pos', y='combined_p_values', linewidth=0, s=5)\n    plt.xticks(np.arange(0, new_df['pos'].max()+1, 5000000))\n    plt.xlabel('Position')\n    plt.ylabel('Combined P Values')\n    plt.title(f'Position vs Combined P Values ({population})')\n    plt.tight_layout()\n    sns.despine()\n    plt.show()\n\nMerged file for CDX:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781635                -0.486720  0.696915  0.326047\n1         2781927                -0.553480  0.991296  0.279589\n2         2781986                -0.553480  0.991296  0.279589\n3         2782161                -1.367980  0.636076  0.042857\n5         2782572                -1.695870  0.947793  0.020143\n...           ...                      ...       ...       ...\n138117  155694896                -2.205470  0.729772  0.006231\n138118  155695384                -0.219482  0.638593  0.603279\n138119  155695745                -0.206570  0.117527  0.621484\n138120  155697920                -0.219482  0.638593  0.603279\n138121  155699751                -0.152693  0.573778  0.703569\n\n[88388 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for CHB:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781927                -0.707989  0.542114  0.195889\n1         2781986                -0.707989  0.542114  0.195889\n2         2782161                -0.803470  0.783276  0.157228\n3         2782572                -2.224800  0.612184  0.005959\n4         2784758                -0.067107  0.715347  0.856827\n...           ...                      ...       ...       ...\n138174  155686314                -0.395042  0.746994  0.402678\n138175  155687184                -0.395042  0.746994  0.402678\n138179  155695384                -0.395042  0.746994  0.402678\n138180  155697920                -0.395042  0.746994  0.402678\n138181  155699751                -0.102783  0.792484  0.789254\n\n[89775 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for CHS:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781635                -0.926999  0.993855  0.118304\n1         2781927                -0.294591  0.824751  0.507468\n2         2781986                -0.294591  0.824751  0.507468\n3         2782161                -1.741520  0.276912  0.018133\n4         2782572                -0.533548  0.941526  0.292720\n...           ...                      ...       ...       ...\n156188  155686314                -1.931780  0.637411  0.011701\n156189  155687184                -1.931780  0.637411  0.011701\n156195  155695384                -1.931780  0.637411  0.011701\n156197  155697920                -1.931780  0.637411  0.011701\n156199  155699751                -0.103049  0.626163  0.788771\n\n[96894 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for KHV:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781635                -0.847264  0.862792  0.142146\n1         2781927                -0.635131  0.918624  0.231670\n2         2781986                -0.635131  0.918624  0.231670\n3         2782161                -0.406086  0.968240  0.392567\n4         2784102                -0.471176  0.992408  0.337928\n...           ...                      ...       ...       ...\n148478  155687184                -1.393270  0.988351  0.040432\n148479  155694896                -1.165930  0.452724  0.068245\n148480  155695384                -1.393270  0.988351  0.040432\n148483  155697920                -1.393270  0.988351  0.040432\n148484  155699751                -0.047057  0.985767  0.897310\n\n[94609 rows x 4 columns]\n\n\n\n\n\n\n\n\n\nMerged file for JPT:\n              pos  when_mutation_has_freq2         p  relate_p\n0         2781514                -0.746704  0.915583  0.179183\n1         2781986                -0.112781  0.544237  0.771292\n2         2782572                -1.069260  0.718797  0.085259\n3         2784758                -0.483658  0.805274  0.328354\n4         2784905                -0.483658  0.805274  0.328354\n...           ...                      ...       ...       ...\n137491  155686314                -0.516201  0.988232  0.304648\n137492  155687184                -0.516201  0.988232  0.304648\n137496  155695384                -3.159730  0.989062  0.000692\n137497  155697920                -3.159730  0.989062  0.000692\n137498  155699751                -0.055012  0.984569  0.881025\n\n[87889 rows x 4 columns]",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Combine p-values (fisher method)</span>"
    ]
  },
  {
    "objectID": "notebooks/4_geneinfo.html",
    "href": "notebooks/4_geneinfo.html",
    "title": "Gene info",
    "section": "",
    "text": "import sys, os\nimport re\nfrom collections import defaultdict\nimport numpy as np\nimport pandas as pd\n\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nset_matplotlib_formats('retina', 'png')\nfrom matplotlib.patches import Rectangle, Polygon\nimport seaborn as sns\nsns.set_style('white')\n\nimport geneinfo as gi\ngi.email('ariadna.saez@alum.esci.upf.edu')\n\n\n# for use on the cluster\n%env ftp_proxy http://proxy-default:3128\n\nenv: ftp_proxy=http://proxy-default:3128\n\n\n\nhelp(gi)\n\nHelp on package geneinfo:\n\nNAME\n    geneinfo\n\nPACKAGE CONTENTS\n    intervals\n\nCLASSES\n    builtins.Exception(builtins.BaseException)\n        NotFound\n    builtins.object\n        WrSubObo\n        nice\n    goatools.go_enrichment.GOEnrichmentRecord(builtins.object)\n        My_GOEnrichemntRecord\n    \n    class My_GOEnrichemntRecord(goatools.go_enrichment.GOEnrichmentRecord)\n     |  My_GOEnrichemntRecord(goid, **kwargs)\n     |  \n     |  Represents one result (from a single GOTerm) in the GOEnrichmentStudy\n     |  \n     |  Method resolution order:\n     |      My_GOEnrichemntRecord\n     |      goatools.go_enrichment.GOEnrichmentRecord\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __str__(self)\n     |      Return str(self).\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from goatools.go_enrichment.GOEnrichmentRecord:\n     |  \n     |  __init__(self, goid, **kwargs)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  __repr__(self)\n     |      Return repr(self).\n     |  \n     |  get_field_values(self, fldnames, rpt_fmt=True, itemid2name=None)\n     |      Get flat namedtuple fields for one GOEnrichmentRecord.\n     |  \n     |  get_indent_dots(self)\n     |      Get a string of dots (\"....\") representing the level of the GO term.\n     |  \n     |  get_method_name(self)\n     |      Return name of first method in the method_flds list.\n     |  \n     |  get_prtflds_all(self)\n     |      When converting to a namedtuple, get all possible fields in their original order.\n     |  \n     |  get_prtflds_default(self)\n     |      Get default fields.\n     |  \n     |  get_pvalue(self)\n     |      Returns pval for 1st method, if it exists. Else returns uncorrected pval.\n     |  \n     |  set_corrected_pval(self, nt_method, pvalue)\n     |      Add object attribute based on method name.\n     |  \n     |  set_goterm(self, go2obj)\n     |      Set goterm and copy GOTerm's name and namespace.\n     |  \n     |  update_remaining_fldsdefprt(self, min_ratio=None)\n     |      Finish updating self (GOEnrichmentRecord) field, is_ratio_different.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from goatools.go_enrichment.GOEnrichmentRecord:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from goatools.go_enrichment.GOEnrichmentRecord:\n     |  \n     |  namespace2NS = OrderedDict([('biological_process', 'BP'), ('mol..._fun...\n    \n    class NotFound(builtins.Exception)\n     |  query returned no result\n     |  \n     |  Method resolution order:\n     |      NotFound\n     |      builtins.Exception\n     |      builtins.BaseException\n     |      builtins.object\n     |  \n     |  Data descriptors defined here:\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from builtins.Exception:\n     |  \n     |  __init__(self, /, *args, **kwargs)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from builtins.Exception:\n     |  \n     |  __new__(*args, **kwargs) from builtins.type\n     |      Create and return a new object.  See help(type) for accurate signature.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from builtins.BaseException:\n     |  \n     |  __delattr__(self, name, /)\n     |      Implement delattr(self, name).\n     |  \n     |  __getattribute__(self, name, /)\n     |      Return getattr(self, name).\n     |  \n     |  __reduce__(...)\n     |      Helper for pickle.\n     |  \n     |  __repr__(self, /)\n     |      Return repr(self).\n     |  \n     |  __setattr__(self, name, value, /)\n     |      Implement setattr(self, name, value).\n     |  \n     |  __setstate__(...)\n     |  \n     |  __str__(self, /)\n     |      Return str(self).\n     |  \n     |  with_traceback(...)\n     |      Exception.with_traceback(tb) --\n     |      set self.__traceback__ to tb and return self.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from builtins.BaseException:\n     |  \n     |  __cause__\n     |      exception cause\n     |  \n     |  __context__\n     |      exception context\n     |  \n     |  __dict__\n     |  \n     |  __suppress_context__\n     |  \n     |  __traceback__\n     |  \n     |  args\n    \n    class WrSubObo(builtins.object)\n     |  WrSubObo(fin_obo=None, optional_attrs=None, load_obsolete=None)\n     |  \n     |  Read a large GO-DAG from an obo file. Write a subset GO-DAG into a small obo file.\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, fin_obo=None, optional_attrs=None, load_obsolete=None)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  wrobo(self, fout_obo, goid_sources)\n     |      Write a subset obo file containing GO ID sources and their parents.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |  \n     |  get_goids(fin_obo, name)\n     |      Get GO IDs whose name matches given name.\n     |  \n     |  prt_goterms(fin_obo, goids, prt, b_prt=True)\n     |      Print the specified GO terms for GO IDs in arg.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n    \n    class nice(builtins.object)\n     |  Methods defined here:\n     |  \n     |  __rlshift__(self, df)\n     |      Left align columns of data frame: df &lt;&lt; nice()\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\nFUNCTIONS\n    chrom_ideogram(annot, hspace=0.1, min_visible_width=200000, figsize=(10, 10), assembly='hg38')\n    \n    download_and_move_go_basic_obo(prt)\n    \n    download_ncbi_associations(prt=&lt;ipykernel.iostream.OutStream object at 0x151c47b74340&gt;)\n    \n    email(email_address)\n    \n    ensembl2ncbi(ensembl_id)\n    \n    ensembl2symbol(ensembl_id)\n    \n    ensembl_get_gene_info_by_symbol(symbols, assembly=None, species='homo_sapiens')\n    \n    ensembl_get_genes_region(chrom, window_start, window_end, assembly=None, species='homo_sapiens')\n    \n    ensembl_id(name, species='homo_sapiens')\n    \n    fetch_background_genes(taxid=9606)\n    \n    gene_annotation_table(taxid=9606)\n    \n    gene_info(query, species='human', scopes='hgnc')\n    \n    gene_info_region(chrom, window_start, window_end, assembly='GRCh38', db='ncbiRefSeq')\n    \n    gene_plot(chrom, start, end, assembly, highlight=[], db='ncbiRefSeq', collapse_splice_var=True, hard_limits=False, exact_exons=False, figsize=None, aspect=1, despine=False, clip_on=True, gene_density=60, font_size=None, return_axes=1)\n    \n    get_genes_for_go_regex(regex, taxid=9606)\n    \n    get_genes_for_go_terms(terms, taxid=9606)\n    \n    get_genes_region(chrom, window_start, window_end, assembly='GRCh38', db='ncbiRefSeq')\n    \n    get_genes_region_dataframe(chrom, start, end, assembly='GRCh38', db='ncbiRefSeq')\n    \n    get_go_terms_for_genes(genes, taxid=9606, evidence=None)\n    \n    get_terms_for_go_regex(regex, taxid=9606, add_children=False)\n    \n    go_annotation_table(taxid=9606)\n    \n    go_enrichment(gene_list, taxid=9606, background_chrom=None, background_genes=None, terms=None, list_study_genes=False, alpha=0.05)\n    \n    go_info(terms)\n    \n    go_name2term(name)\n    \n    go_term2name(term)\n    \n    hgcn_symbol(name)\n    \n    log10(x, /)\n        Return the base 10 logarithm of x.\n    \n    map_interval(chrom, start, end, strand, map_from, map_to, species='homo_sapiens')\n    \n    mygene_get_gene_info(query, species='human', scopes='hgnc', fields='symbol,alias,name,type_of_gene,summary,genomic_pos,genomic_pos_hg19')\n    \n    reduce(...)\n        reduce(function, sequence[, initial]) -&gt; value\n        \n        Apply a function of two arguments cumulatively to the items of a sequence,\n        from left to right, so as to reduce the sequence to a single value.\n        For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n        ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n        of the sequence in the calculation, and serves as a default when the\n        sequence is empty.\n    \n    show_go_dag_enrichment_results(results)\n    \n    show_go_dag_for_gene(gene, taxid=9606, evidence=None, add_relationships=True)\n    \n    show_go_dag_for_terms(terms, add_relationships=True)\n    \n    show_go_evidence_codes()\n    \n    show_string_network(my_genes, nodes=10)\n    \n    sqrt(x, /)\n        Return the square root of x.\n    \n    string_network_table(my_genes, nodes=10)\n    \n    symbols_protein_coding(taxid=9606)\n    \n    tabulate_genes(words, ncols=None)\n\nDATA\n    CACHE = {}\n\nFILE\n    /home/ari/miniconda3/envs/arifdp/lib/python3.8/site-packages/geneinfo/__init__.py\n\n\n\n\nRELATE\n\n## AFRICANS ##\nimport pandas as pd\nimport os\n\n# Define the threshold\nthreshold = 6\n\n# Function to define window to search nearby genes\ndef get_window_range(position, window_size):\n    x_min = position - window_size // 2\n    x_max = position + window_size // 2\n    return x_min, x_max\n\n# List of file paths\nfile_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/LWK/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/ESN/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/MSL/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/GWD/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/YRI/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele'\n]\n\n# Dictionary to store gene regions for each population\ngene_regions = {}\n\n# Set to store unique gene symbols\nunique_genes = set()\n\n# Iterate over file paths\nfor file_path in file_paths:\n    # Extract population name from the filename\n    population_name = file_path.split('/')[-4]  # Get the third element from the end when splitting by '/'\n    \n    # Read data with '\\s+' separator and make the values in \"when_mutation_has_freq2\" column positive\n    data = pd.read_csv(file_path, sep='\\s+')\n    data['when_mutation_has_freq2'] = data['when_mutation_has_freq2'].abs()\n    \n    # Add 'population' column\n    data['population'] = population_name\n    \n    # Filter data based on threshold\n    filtered_data = data[data['when_mutation_has_freq2'] &gt; threshold]\n    \n    # Initialize a list to store gene regions for the current population\n    population_gene_regions = []\n    \n    # Iterate over rows and calculate gene regions\n    for index, row in filtered_data.iterrows():\n        genomic_position = row['pos']\n        window_size = 1000  # Set window size !!!!!!! 500 bp on each SNP side\n        x_min, x_max = get_window_range(genomic_position, window_size)\n        \n        # Call gi.get_genes_region() for the current region\n        gene_region = gi.get_genes_region('chrX', x_min, x_max, assembly='hg38')\n        \n        # Extract gene symbol, start position, and end position from the result\n        if gene_region:  # Check if gene_region is not empty\n            gene_symbol = gene_region[0][0]\n            start_position = gene_region[0][1]\n            end_position = gene_region[0][2]\n            \n            # Append the extracted information to the list of gene regions for the current population\n            population_gene_regions.append((gene_symbol, start_position, end_position))\n            \n            # Add gene symbol to set of unique genes\n            unique_genes.add(gene_symbol)\n    \n    # Store the list of gene regions for the current population in the dictionary\n    gene_regions[population_name] = population_gene_regions\n\n    # Print gene regions for the current population\n    print(f\"Gene regions for {population_name}:\")\n    for region in population_gene_regions:\n        print(region)\n    print()\n\nGene regions for LWK:\n('PTCHD1', 23334395, 23404374)\n('CASK', 41514933, 41665852)\n('FAM120C', 54068323, 54183254)\n('LOC105377212', 63237521, 63277646)\n('LINC01278', 63426557, 63561095)\n('AMMECR1', 110194185, 110318085)\n('RTL4', 112083012, 112457514)\n('ENOX2', 130622324, 130720491)\n('RAP2C-AS1', 132218506, 132432811)\n('MAMLD1', 150361571, 150514173)\n('ZNF185', 152898066, 152973474)\n\nGene regions for ESN:\n('CDKL5', 18425607, 18640196)\n('CDKL5', 18425607, 18640196)\n('CDKL5', 18425607, 18640196)\n('CDKL5', 18425607, 18640196)\n('PTCHD1-AS', 22193004, 23293146)\n('CASK', 41514933, 41923034)\n('CASK', 41514933, 41923034)\n('LOC124905191', 53361522, 53370780)\n('RTL4', 112083012, 112457514)\n('TENM1', 124375902, 124963817)\n('IGSF1', 131273505, 131289306)\n('G6PD', 154531389, 154547018)\n\nGene regions for MSL:\n('PTCHD1-AS', 22193004, 23293146)\n\nGene regions for GWD:\n('ARSL', 2934520, 2964341)\n('BCOR', 40051245, 40177277)\n('BCOR', 40051245, 40177277)\n('HUWE1', 53532095, 53680089)\n('ACSL4', 109641334, 109733257)\n('AMMECR1', 110194185, 110318085)\n('AMMECR1', 110194185, 110318085)\n('AMMECR1', 110194185, 110318085)\n('AMMECR1', 110194185, 110318085)\n('AMMECR1', 110194185, 110318085)\n('AMMECR1', 110194185, 110318085)\n('PAK3', 110944396, 111217494)\n('IGSF1', 131273505, 131289306)\n\nGene regions for YRI:\n('PRKX', 3604339, 3713649)\n('CDKL5', 18425607, 18640196)\n('DMD', 31119221, 32155469)\n('NYX', 41447342, 41475652)\n('CASK', 41514933, 41923034)\n('CASK', 41514933, 41923034)\n('GNL3L', 54530218, 54645854)\n('LINC01278', 63426557, 63561095)\n('LINC01278', 63426557, 63561095)\n('LINC01278', 63426557, 63561095)\n('LINC01278', 63426557, 63561095)\n('ZMYM3', 71239623, 71253721)\n('ZMYM3', 71239623, 71254649)\n('MAGT1', 77825746, 77895435)\n('TMEM164', 110002368, 110177788)\n('TMEM164', 110002368, 110177788)\n('TMEM164', 110002368, 110177788)\n('RAB33A', 130110622, 130184870)\n('RAB33A', 130110622, 130184870)\n('MAMLD1', 150361571, 150514173)\n\n\n\n\n## PUERTO RICANS ##\nimport pandas as pd\nimport os\n\n# Define the threshold\nthreshold = 6\n\n# Function to define window to search nearby genes\ndef get_window_range(position, window_size):\n    x_min = position - window_size // 2\n    x_max = position + window_size // 2\n    return x_min, x_max\n\n# List of file paths\nfile_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/PUR/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele'\n]\n\n# Dictionary to store gene regions for each population\ngene_regions = {}\n\n# Set to store unique gene symbols\nunique_genes = set()\n\n# Iterate over file paths\nfor file_path in file_paths:\n    # Extract population name from the filename\n    population_name = file_path.split('/')[-4]  # Get the third element from the end when splitting by '/'\n    \n    # Read data with '\\s+' separator and make the values in \"when_mutation_has_freq2\" column positive\n    data = pd.read_csv(file_path, sep='\\s+')\n    data['when_mutation_has_freq2'] = data['when_mutation_has_freq2'].abs()\n    \n    # Add 'population' column\n    data['population'] = population_name\n    \n    # Filter data based on threshold\n    filtered_data = data[data['when_mutation_has_freq2'] &gt; threshold]\n    \n    # Initialize a list to store gene regions for the current population\n    population_gene_regions = []\n    \n    # Iterate over rows and calculate gene regions\n    for index, row in filtered_data.iterrows():\n        genomic_position = row['pos']\n        window_size = 1000  # Set window size !!!!!!! 500 bp on each SNP side\n        x_min, x_max = get_window_range(genomic_position, window_size)\n        \n        # Call gi.get_genes_region() for the current region\n        gene_region = gi.get_genes_region('chrX', x_min, x_max, assembly='hg38')\n        \n        # Extract gene symbol, start position, and end position from the result\n        if gene_region:  # Check if gene_region is not empty\n            gene_symbol = gene_region[0][0]\n            start_position = gene_region[0][1]\n            end_position = gene_region[0][2]\n            \n            # Append the extracted information to the list of gene regions for the current population\n            population_gene_regions.append((gene_symbol, start_position, end_position))\n            \n            # Add gene symbol to set of unique genes\n            unique_genes.add(gene_symbol)\n    \n    # Store the list of gene regions for the current population in the dictionary\n    gene_regions[population_name] = population_gene_regions\n\n    # Print gene regions for the current population\n    print(f\"Gene regions for {population_name}:\")\n    for region in population_gene_regions:\n        print(region)\n    print()\n\nGene regions for PUR:\n('ARSL', 2934520, 2964341)\n('SHROOM2', 9786428, 9949443)\n('WWC3', 10015253, 10144474)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10620585)\n('MID1', 10445309, 10620585)\n('MID1', 10445309, 10620585)\n('MID1', 10445309, 10620585)\n('MID1', 10445309, 10677739)\n('MID1', 10445309, 10677739)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('HCCS-DT', 10847542, 11111138)\n('EGFL6', 13569600, 13633575)\n('NHS', 17375199, 17735994)\n('PHKA2', 18892297, 18938716)\n('PHKA2', 18892297, 18938716)\n('PHKA2', 18892297, 18954298)\n('MAP3K15', 19360058, 19515508)\n('SH3KBP1', 19533976, 19668254)\n('LOC124905257', 20606476, 20727382)\n('CNKSR2', 21374417, 21645440)\n('PTCHD1-AS', 22193004, 23293146)\n('PTCHD1-AS', 22193004, 23293146)\n('PTCHD1-AS', 22193004, 23293146)\n('PTCHD1-AS', 22193004, 23293146)\n('DMD', 31119221, 33211549)\n('DMD', 31119221, 33211549)\n('CFAP47', 35919733, 35990150)\n('CFAP47', 35919733, 35990150)\n('CFAP47', 35919733, 36145079)\n('LOC101928627', 36365625, 36440292)\n('PRRG1', 37349363, 37442224)\n('PRRG1', 37349363, 37442224)\n('PRRG1', 37349363, 37442224)\n('TSPAN7', 38561541, 38688918)\n('PAGE1', 49687446, 49695984)\n('CLCN5', 49922595, 50042541)\n('CLCN5', 49922595, 50042541)\n('CLCN5', 49922595, 50042541)\n('CLCN5', 49922595, 50042541)\n('SHROOM4', 50575533, 50814194)\n('SHROOM4', 50575533, 50814194)\n('SHROOM4', 50575533, 50814194)\n('LOC105377209', 52195604, 52265931)\n('LOC105377209', 52195604, 52265931)\n('FAM120C', 54068323, 54183254)\n('FAM120C', 54068323, 54183254)\n('NHSL2', 71910844, 72140776)\n('LOC107985713', 88494129, 88613490)\n('LOC107985713', 88494129, 88613490)\n('LOC107985713', 88494129, 88613490)\n('LOC107985713', 88494129, 88613490)\n('DIAPH2', 96684841, 97469836)\n('IL1RAPL2', 104566198, 105767829)\n('FRMPD3', 107449651, 107605251)\n('MID2', 107825734, 107931637)\n('AMMECR1', 110194185, 110440233)\n('PAK3', 110944396, 111217494)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('RTL4', 112083012, 112457514)\n('LOC101928437', 113042726, 113520614)\n('LOC101928437', 113042726, 113520614)\n('LOC101928437', 113042726, 113520614)\n('LOC101928437', 113042726, 113520614)\n('LOC101928437', 113042726, 113520614)\n('LOC101928437', 113042726, 113520614)\n('LOC101928437', 113042726, 113520614)\n('LOC101928437', 113042726, 113520614)\n('KLHL13', 117897812, 118116810)\n('KLHL13', 117897812, 118116810)\n('LINC01285', 118839555, 118882015)\n('KIAA1210', 119078634, 119150579)\n('KIAA1210', 119078634, 119150579)\n('LINC03098', 119291528, 119335610)\n('LINC03098', 119291528, 119335610)\n('LINC03098', 119291528, 119335610)\n('TMEM255A', 120251432, 120311461)\n('TENM1', 124375902, 124963817)\n('TENM1', 124375902, 124963817)\n('TENM1', 124375902, 124963817)\n('TENM1', 124375902, 124963817)\n('TENM1', 124375902, 125204312)\n('TENM1', 124375902, 125204312)\n('XPNPEP2', 129738978, 129769536)\n('ZDHHC9', 129803287, 129843599)\n('RBMX2', 130401986, 130413656)\n('ENOX2', 130622324, 130887549)\n('ENOX2', 130622324, 130887549)\n('ENOX2', 130622324, 130887549)\n('LINC01201', 131016468, 131058146)\n('LINC01201', 131016468, 131058146)\n('ARHGAP36', 131058345, 131089885)\n('ARHGAP36', 131058345, 131089885)\n('ARHGAP36', 131058345, 131089885)\n('ARHGAP36', 131058345, 131089885)\n('PLAC1', 134565837, 134658471)\n('PLAC1', 134565837, 134658471)\n('PLAC1', 134565837, 134764322)\n('SLC9A6', 135973836, 136047269)\n('SLC9A6', 135973836, 136047269)\n('LOC105373344', 140517784, 140526183)\n('LOC101928808', 146394681, 146401858)\n('AFF2', 148500616, 149000663)\n('AFF2', 148500616, 149000663)\n('AFF2', 148500616, 149000663)\n('AFF2', 148500616, 149000663)\n('AFF2', 148500616, 149000663)\n('LINC00850', 149825707, 149879799)\n('LINC00850', 149825707, 149879799)\n('MAGEA3-DT', 152554376, 152698727)\n('FLNA', 154348530, 154374634)\n\n\n\n\n## EUROPEANS ##\nimport pandas as pd\nimport os\n\n# Define the threshold\nthreshold = 6\n\n# Function to define window to search nearby genes\ndef get_window_range(position, window_size):\n    x_min = position - window_size // 2\n    x_max = position + window_size // 2\n    return x_min, x_max\n\n# List of file paths\nfile_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/GBR/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/FIN/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/IBS/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/TSI/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele'\n]\n\n# Dictionary to store gene regions for each population\ngene_regions = {}\n\n# Set to store unique gene symbols\nunique_genes = set()\n\n# Iterate over file paths\nfor file_path in file_paths:\n    # Extract population name from the filename\n    population_name = file_path.split('/')[-4]  # Get the third element from the end when splitting by '/'\n    \n    # Read data with '\\s+' separator and make the values in \"when_mutation_has_freq2\" column positive\n    data = pd.read_csv(file_path, sep='\\s+')\n    data['when_mutation_has_freq2'] = data['when_mutation_has_freq2'].abs()\n    \n    # Add 'population' column\n    data['population'] = population_name\n    \n    # Filter data based on threshold\n    filtered_data = data[data['when_mutation_has_freq2'] &gt; threshold]\n    \n    # Initialize a list to store gene regions for the current population\n    population_gene_regions = []\n    \n    # Iterate over rows and calculate gene regions\n    for index, row in filtered_data.iterrows():\n        genomic_position = row['pos']\n        window_size = 1000  # Set window size !!!!!!! 500 bp on each SNP side\n        x_min, x_max = get_window_range(genomic_position, window_size)\n        \n        # Call gi.get_genes_region() for the current region\n        gene_region = gi.get_genes_region('chrX', x_min, x_max, assembly='hg38')\n        \n        # Extract gene symbol, start position, and end position from the result\n        if gene_region:  # Check if gene_region is not empty\n            gene_symbol = gene_region[0][0]\n            start_position = gene_region[0][1]\n            end_position = gene_region[0][2]\n            \n            # Append the extracted information to the list of gene regions for the current population\n            population_gene_regions.append((gene_symbol, start_position, end_position))\n            \n            # Add gene symbol to set of unique genes\n            unique_genes.add(gene_symbol)\n    \n    # Store the list of gene regions for the current population in the dictionary\n    gene_regions[population_name] = population_gene_regions\n\n    # Print gene regions for the current population\n    print(f\"Gene regions for {population_name}:\")\n    for region in population_gene_regions:\n        print(region)\n    print()\n\nGene regions for GBR:\n('PTCHD1-AS', 22193004, 23293146)\n('PTCHD1-AS', 22193004, 23293146)\n\nGene regions for FIN:\n('IL1RAPL1', 28587445, 29956718)\n('DMD', 31119221, 31266954)\n('DMD', 31119221, 33211549)\n('XPNPEP2', 129738978, 129769536)\n\nGene regions for IBS:\n('PRKX', 3604339, 3713649)\n('PRKX', 3604339, 3713649)\n('PRKX', 3604339, 3713649)\n('PRKX', 3604339, 3713649)\n('PRKX', 3604339, 3713649)\n('NHS', 17375199, 17735994)\n('PHKA1', 72578813, 72714306)\n('MIR325HG', 76657797, 77014532)\n('TENM1', 124375902, 124963817)\n('TMLHE', 155489010, 155536365)\n\nGene regions for TSI:\n('PRKX', 3604339, 3713649)\n('LOC112268307', 64205945, 64312562)\n\n\n\n\n## ASIANS ##\nimport pandas as pd\nimport os\n\n# Define the threshold\nthreshold = 6\n\n# Function to define window to search nearby genes\ndef get_window_range(position, window_size):\n    x_min = position - window_size // 2\n    x_max = position + window_size // 2\n    return x_min, x_max\n\n# List of file paths\nfile_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/CDX/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHS/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/CHB/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/JPT/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/steps/KHV/relate/run_relate/1000g_ppl_phased_haplotypes_selection.sele'\n]\n\n# Dictionary to store gene regions for each population\ngene_regions = {}\n\n# Set to store unique gene symbols\nunique_genes = set()\n\n# Iterate over file paths\nfor file_path in file_paths:\n    # Extract population name from the filename\n    population_name = file_path.split('/')[-4]  # Get the third element from the end when splitting by '/'\n    \n    # Read data with '\\s+' separator and make the values in \"when_mutation_has_freq2\" column positive\n    data = pd.read_csv(file_path, sep='\\s+')\n    data['when_mutation_has_freq2'] = data['when_mutation_has_freq2'].abs()\n    \n    # Add 'population' column\n    data['population'] = population_name\n    \n    # Filter data based on threshold\n    filtered_data = data[data['when_mutation_has_freq2'] &gt; threshold]\n    \n    # Initialize a list to store gene regions for the current population\n    population_gene_regions = []\n    \n    # Iterate over rows and calculate gene regions\n    for index, row in filtered_data.iterrows():\n        genomic_position = row['pos']\n        window_size = 1000  # Set window size !!!!!!! 500 bp on each SNP side\n        x_min, x_max = get_window_range(genomic_position, window_size)\n        \n        # Call gi.get_genes_region() for the current region\n        gene_region = gi.get_genes_region('chrX', x_min, x_max, assembly='hg38')\n        \n        # Extract gene symbol, start position, and end position from the result\n        if gene_region:  # Check if gene_region is not empty\n            gene_symbol = gene_region[0][0]\n            start_position = gene_region[0][1]\n            end_position = gene_region[0][2]\n            \n            # Append the extracted information to the list of gene regions for the current population\n            population_gene_regions.append((gene_symbol, start_position, end_position))\n            \n            # Add gene symbol to set of unique genes\n            unique_genes.add(gene_symbol)\n    \n    # Store the list of gene regions for the current population in the dictionary\n    gene_regions[population_name] = population_gene_regions\n\n    # Print gene regions for the current population\n    print(f\"Gene regions for {population_name}:\")\n    for region in population_gene_regions:\n        print(region)\n    print()\n\nGene regions for CDX:\n('WWC3', 10015253, 10144474)\n('FRMPD4', 11822438, 12724523)\n('FRMPD4', 11822438, 12724523)\n('DMD', 31119221, 33211549)\n('IL1RAPL2', 104566198, 105767829)\n\nGene regions for CHS:\n('PRKX', 3604339, 3713649)\n('CLCN4', 10156974, 10237660)\n('LOC101928359', 122422005, 122478081)\n\nGene regions for CHB:\n('PRKX', 3604339, 3713649)\n('PRKX', 3604339, 3713649)\n('DMD', 31119221, 33211549)\n('PASD1', 151563674, 151676739)\n\nGene regions for JPT:\n('CLCN5', 49922595, 50042541)\n\nGene regions for KHV:\n('PASD1', 151563674, 151676739)\n('TMEM187', 153972753, 153983194)\n\n\n\nCOMBINED\n\n## AFRICANS##\n\n# Define the threshold\nthreshold = 6\n\n# Function to define window to search nearby genes\ndef get_window_range(position, window_size):\n    x_min = position - window_size // 2\n    x_max = position + window_size // 2\n    return x_min, x_max\n\n# List of file paths\nfile_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_LWK.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_ESN.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_GWD.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_MSL.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_YRI.csv'\n]\n\n# Dictionary to store gene regions for each population\ngene_regions = {}\n\n# Set to store unique gene symbols\nunique_genes = set()\n\n# Iterate over file paths\nfor file_path in file_paths:\n    # Extract population name from the filename\n    population_name = os.path.splitext(os.path.basename(file_path))[0]\n    \n    # Read data\n    data = pd.read_csv(file_path)\n    \n    # Add 'population' column\n    data['population'] = population_name\n    \n    # Filter data based on threshold\n    filtered_data = data[data['combined_p_values'] &gt; threshold]\n    \n    # Initialize a list to store gene regions for the current population\n    population_gene_regions = []\n    \n    # Iterate over rows and calculate gene regions\n    for index, row in filtered_data.iterrows():\n        genomic_position = row['pos']\n        window_size = 1000  # Set window size !!!!!!! 500 bp on each SNP side\n        x_min, x_max = get_window_range(genomic_position, window_size)\n        \n        # Call gi.get_genes_region() for the current region\n        gene_region = gi.get_genes_region('chrX', x_min, x_max, assembly='hg38')\n        \n        # Extract gene symbol, start position, and end position from the result\n        if gene_region:  # Check if gene_region is not empty\n            gene_symbol = gene_region[0][0]\n            start_position = gene_region[0][1]\n            end_position = gene_region[0][2]\n            \n            # Append the extracted information to the list of gene regions for the current population\n            population_gene_regions.append((gene_symbol, start_position, end_position))\n            \n# Add gene symbol to set of unique genes\n            unique_genes.add(gene_symbol)\n    \n    # Store the list of gene regions for the current population in the dictionary\n    gene_regions[population_name] = population_gene_regions\n\n# Print gene regions for all populations\nfor population, regions in gene_regions.items():\n    print(f\"Gene regions for {population}:\")\n    for region in regions:\n        print(region)\n    print()\n\n\nprint()\nprint()\n\n# Set to store gene symbols for which information has already been retrieved\nretrieved_symbols = set()\n\n# Run gi.gene_info() for each unique gene symbol\nfor gene_symbol in unique_genes:\n    # Check if gene information has already been retrieved for this symbol\n    if gene_symbol not in retrieved_symbols:\n        gene_info = gi.gene_info(gene_symbol)\n        if gene_info is not None:\n            print(f\"Gene info for {gene_symbol}: {gene_info}\")\n\nGene regions for combined_LWK:\n('CASK', 41514933, 41665852)\n('RTL4', 112083012, 112457514)\n\nGene regions for combined_ESN:\n('CASK', 41514933, 41923034)\n('RTL4', 112083012, 112457514)\n\nGene regions for combined_GWD:\n('PAK3', 110944396, 111217494)\n\nGene regions for combined_MSL:\n('PTCHD1-AS', 22193004, 23293146)\n\nGene regions for combined_YRI:\n('PRKX', 3604339, 3713649)\n('TMEM164', 110002368, 110177788)\n('TMEM164', 110002368, 110177788)\n('TMEM164', 110002368, 110177788)\n('RAB33A', 130110622, 130184870)\n('RAB33A', 130110622, 130184870)\n\n\n\n\n\nSymbol: PTCHD1-AS\nPTCHD1 antisense RNA (head to head)\nGene card\n\n\n\nSymbol: PAK3 (protein-coding)         Aliases: ARA, MRX30, MRX47, OPHN3, PAK-3, PAK3beta, XLID30, bPAK, beta-PAK\np21 (RAC1) activated kinase 3\nSummary: The protein encoded by this gene is a serine-threonine kinase and forms an activated complex with GTP-bound RAS-like (P21), CDC2 and RAC1. This protein may be necessary for dendritic development and for the rapid cytoskeletal reorganization in dendritic spines associated with synaptic plasticity. Defects in this gene are the cause of a non-syndromic form of X-linked intellectual disability. Alternatively spliced transcript variants encoding different isoforms have been identified. [provided by RefSeq, Jul 2017].\nGenomic position: X:110944285-111227361 (hg38), X:110187513-110470589 (hg19)\nGene card\n\n\n\nSymbol: RAB33A (protein-coding)         Aliases: RabS10\nRAB33A, member RAS oncogene family\nSummary: The protein encoded by this gene belongs to the small GTPase superfamily, Rab family. It is GTP-binding protein and may be involved in vesicle transport. [provided by RefSeq, Jul 2008].\nGenomic position: X:130171962-130184870 (hg38), X:129305623-129318844 (hg19)\nGene card\n\n\n\nSymbol: PRKX (protein-coding)         Aliases: PKX1\nprotein kinase cAMP-dependent X-linked catalytic subunit\nSummary: This gene encodes a serine threonine protein kinase that has similarity to the catalytic subunit of cyclic AMP dependent protein kinases. The encoded protein is developmentally regulated and may be involved in renal epithelial morphogenesis. This protein may also be involved in macrophage and granulocyte maturation. Abnormal recombination between this gene and a related pseudogene on chromosome Y is a frequent cause of sex reversal disorder in XX males and XY females. Pseudogenes of this gene are found on chromosomes X, 15 and Y. [provided by RefSeq, Feb 2010].\nGenomic position: X:3604340-3713649 (hg38), X:3522411-3631649 (hg19)\nGene card\n\n\n\nSymbol: TMEM164 (protein-coding)         Aliases: bB360B22.3\ntransmembrane protein 164\nSummary: Predicted to be integral component of membrane. [provided by Alliance of Genome Resources, Apr 2022]\nGenomic position: X:110002631-110182734 (hg38), X:109245859-109425962 (hg19)\nGene card\n\n\n\nSymbol: RTL4 (protein-coding)         Aliases: Mar4, Mart4, SIRH11, ZCCHC16\nretrotransposon Gag like 4\nSummary: Predicted to enable nucleic acid binding activity and zinc ion binding activity. Predicted to act upstream of or within cognition and norepinephrine metabolic process. [provided by Alliance of Genome Resources, Apr 2022]\nGenomic position: X:112083016-112457514 (hg38), X:111697727-111700473 (hg19)\nGene card\n\n\n\nSymbol: CASK (protein-coding)         Aliases: CAGH39, CAMGUK, CMG, FGS4, LIN2, MICPCH, MRXSNA, TNRC8, hCASK\ncalcium/calmodulin dependent serine protein kinase\nSummary: This gene encodes a calcium/calmodulin-dependent serine protein kinase. The encoded protein is a MAGUK (membrane-associated guanylate kinase) protein family member. These proteins are scaffold proteins and the encoded protein is located at synapses in the brain. Mutations in this gene are associated with FG syndrome 4, intellectual disability and microcephaly with pontine and cerebellar hypoplasia, and a form of X-linked intellectual disability. Multiple transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Jul 2017].\nGenomic position: X:41514934-41923554 (hg38), X:41374187-41782716 (hg19)\nGene card\n\n\n\n\n## PUR ##\n\nthreshold = 6\n\n# Function to define window to search nearby genes\ndef get_window_range(position, window_size):\n    x_min = position - window_size // 2\n    x_max = position + window_size // 2\n    return x_min, x_max\n\n# List of file paths\nfile_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_PUR.csv'\n]\n\n# Dictionary to store gene regions for each population\ngene_regions = {}\n\n# Set to store unique gene symbols\nunique_genes = set()\n\n# Iterate over file paths\nfor file_path in file_paths:\n    # Extract population name from the filename\n    population_name = os.path.splitext(os.path.basename(file_path))[0]\n    \n    # Read data\n    data = pd.read_csv(file_path)\n    \n    # Add 'population' column\n    data['population'] = population_name\n    \n    # Filter data based on threshold\n    filtered_data = data[data['combined_p_values'] &gt; threshold]\n    \n    # Initialize a list to store gene regions for the current population\n    population_gene_regions = []\n    \n    # Iterate over rows and calculate gene regions\n    for index, row in filtered_data.iterrows():\n        genomic_position = row['pos']\n        window_size = 1000  # Set window size !!!!!!! 500 bp on each SNP side\n        x_min, x_max = get_window_range(genomic_position, window_size)\n        \n        # Call gi.get_genes_region() for the current region\n        gene_region = gi.get_genes_region('chrX', x_min, x_max, assembly='hg38')\n        \n        # Extract gene symbol, start position, and end position from the result\n        if gene_region:  # Check if gene_region is not empty\n            gene_symbol = gene_region[0][0]\n            start_position = gene_region[0][1]\n            end_position = gene_region[0][2]\n            \n            # Append the extracted information to the list of gene regions for the current population\n            population_gene_regions.append((gene_symbol, start_position, end_position))\n            \n# Add gene symbol to set of unique genes\n            unique_genes.add(gene_symbol)\n    \n    # Store the list of gene regions for the current population in the dictionary\n    gene_regions[population_name] = population_gene_regions\n\n# Print gene regions for all populations\nfor population, regions in gene_regions.items():\n    print(f\"Gene regions for {population}:\")\n    for region in regions:\n        print(region)\n    print()\n\n\nprint()\nprint()\n\n# Set to store gene symbols for which information has already been retrieved\nretrieved_symbols = set()\n\n# Run gi.gene_info() for each unique gene symbol\nfor gene_symbol in unique_genes:\n    # Check if gene information has already been retrieved for this symbol\n    if gene_symbol not in retrieved_symbols:\n        gene_info = gi.gene_info(gene_symbol)\n        if gene_info is not None:\n            print(f\"Gene info for {gene_symbol}: {gene_info}\")\n\nGene regions for combined_PUR:\n('WWC3', 10015253, 10144474)\n('WWC3', 10015253, 10144474)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10576917)\n('MID1', 10445309, 10620585)\n('MID1', 10445309, 10620585)\n('MID1', 10445309, 10677739)\n('MID1', 10445309, 10677739)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('MID1', 10445309, 10833683)\n('PHKA2', 18892297, 18938716)\n('PHKA2', 18892297, 18938716)\n('MAP3K15', 19360058, 19515508)\n('PTCHD1-AS', 22193004, 23293146)\n('TSPAN7', 38561541, 38688918)\n('CLCN5', 49922595, 50042541)\n('SHROOM4', 50575533, 50814194)\n('SHROOM4', 50575533, 50814194)\n('SHROOM4', 50575533, 50814194)\n('APEX2', 55000362, 55009057)\n('HMGN5', 81113698, 81201913)\n('LOC107985713', 88494129, 88613490)\n('LOC107985713', 88494129, 88613490)\n('IL1RAPL2', 104566198, 105767829)\n('MID2', 107825734, 107931637)\n('AMMECR1', 110194185, 110440233)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('TRPC5', 111768010, 112082776)\n('RTL4', 112083012, 112457514)\n('TENM1', 124375902, 124963817)\n('TENM1', 124375902, 125204312)\n('XPNPEP2', 129738978, 129769536)\n('LOC101928808', 146394681, 146401858)\n('AFF2', 148500616, 149000663)\n('AFF2', 148500616, 149000663)\n('AFF2', 148500616, 149000663)\n('AFF2', 148500616, 149000663)\n('LINC00850', 149825707, 149879799)\n('LINC00850', 149825707, 149879799)\n('MAGEA3-DT', 152554376, 152698727)\n\n\n\n\n\nSymbol: PTCHD1-AS\nPTCHD1 antisense RNA (head to head)\nGene card\n\n\n\nSymbol: LINC00850 (ncRNA)         Aliases: KUCG1\nlong intergenic non-protein coding RNA 850\nGene card\n\n\n\nSymbol: MID1 (protein-coding)         Aliases: BBBG1, FXY, GBBB, GBBB1, MIDIN, OGS1, OS, OSX, RNF59, TRIM18, XPRF, ZNFXY\nmidline 1\nSummary: The protein encoded by this gene is a member of the tripartite motif (TRIM) family, also known as the ‘RING-B box-coiled coil’ (RBCC) subgroup of RING finger proteins. The TRIM motif includes three zinc-binding domains, a RING, a B-box type 1 and a B-box type 2, and a coiled-coil region. This protein forms homodimers which associate with microtubules in the cytoplasm. The protein is likely involved in the formation of multiprotein structures acting as anchor points to microtubules. Mutations in this gene have been associated with the X-linked form of Opitz syndrome, which is characterized by midline abnormalities such as cleft lip, laryngeal cleft, heart defects, hypospadias, and agenesis of the corpus callosum. This gene was also the first example of a gene subject to X inactivation in human while escaping it in mouse. Alternative promoter use, alternative splicing and alternative polyadenylation result in multiple transcript variants that have different tissue specificities. [provided by RefSeq, Dec 2016].\nGenomic position: X:10445310-10833654 (hg38), X:10413350-10851773 (hg19)\nGene card\n\n\n\nSymbol: TSPAN7 (protein-coding)         Aliases: A15, CCG-B7, CD231, DXS1692E, MRX58, MXS1, TALLA-1, TM4SF2, TM4SF2b, XLID58\ntetraspanin 7\nSummary: The protein encoded by this gene is a member of the transmembrane 4 superfamily, also known as the tetraspanin family. Most of these members are cell-surface proteins that are characterized by the presence of four hydrophobic domains. The proteins mediate signal transduction events that play a role in the regulation of cell development, activation, growth and motility. This encoded protein is a cell surface glycoprotein and may have a role in the control of neurite outgrowth. It is known to complex with integrins. This gene is associated with X-linked cognitive disability and neuropsychiatric diseases such as Huntington’s chorea, fragile X syndrome and myotonic dystrophy. [provided by RefSeq, Jul 2008].\nGenomic position: X:38561542-38688920 (hg38), X:38420623-38548169 (hg19)\nGene card\n\n\n\nSymbol: HMGN5 (protein-coding)         Aliases: NBP-45, NSBP1\nhigh mobility group nucleosome binding domain 5\nSummary: This gene encodes a nuclear protein with similarities to the high mobility group proteins, HMG14 and HMG17, which suggests that this protein may function as a nucleosomal binding and transcriptional activating protein. [provided by RefSeq, Sep 2009].\nGenomic position: X:81113699-81201913 (hg38), X:80369200-80457441 (hg19)\nGene card\n\n\n\nSymbol: AMMECR1 (protein-coding)         Aliases: AMMERC1, MFHIEN\nAMMECR nuclear protein 1\nSummary: The exact function of this gene is not known, however, submicroscopic deletion of the X chromosome including this gene, COL4A5, and FACL4 genes, result in a contiguous gene deletion syndrome, the AMME complex (Alport syndrome, mental retardation, midface hypoplasia, and elliptocytosis). Alternatively spliced transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Jan 2010].\nGenomic position: X:110194186-110440318 (hg38), X:109437414-109683461 (hg19)\nGene card\n\n\n\nSymbol: XPNPEP2 (protein-coding)         Aliases: AEACEI, APP2\nX-prolyl aminopeptidase 2\nSummary: Aminopeptidase P is a hydrolase specific for N-terminal imido bonds, which are common to several collagen degradation products, neuropeptides, vasoactive peptides, and cytokines. Structurally, the enzyme is a member of the ‘pita bread fold’ family and occurs in mammalian tissues in both soluble and GPI-anchored membrane-bound forms. A membrane-bound and soluble form of this enzyme have been identified as products of two separate genes. [provided by RefSeq, Jul 2008].\nGenomic position: X:129738949-129769536 (hg38), X:128872950-128903514 (hg19)\nGene card\n\n\n\nSymbol: MAP3K15 (protein-coding)         Aliases: ASK3, bA723P2.3\nmitogen-activated protein kinase kinase kinase 15\nSummary: The protein encoded by this gene is a member of the mitogen-activated protein kinase (MAPK) family. These family members function in a protein kinase signal transduction cascade, where an activated MAPK kinase kinase (MAP3K) phosphorylates and activates a specific MAPK kinase (MAP2K), which then activates a specific MAPK. This MAP3K protein plays an essential role in apoptotic cell death triggered by cellular stresses. [provided by RefSeq, Jul 2010].\nGenomic position: X:19360056-19515508 (hg38), X:19378174-19533379 (hg19)\nGene card\n\n\n\nSymbol: TENM1 (protein-coding)         Aliases: ODZ1, ODZ3, TEN-M1, TEN1, TNM, TNM1, ten-1\nteneurin transmembrane protein 1\nSummary: The protein encoded by this gene belongs to the tenascin family and teneurin subfamily. It is expressed in the neurons and may function as a cellular signal transducer. Several alternatively spliced transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Sep 2009].\nGenomic position: X:124375903-125204312 (hg38), X:123509753-124097666 (hg19)\nGene card\n\n\n\nSymbol: SHROOM4 (protein-coding)         Aliases: MRXSSDS, SHAP, shrm4\nshroom family member 4\nSummary: This gene encodes a member of the APX/Shroom family, which contain an N-terminal PDZ domain and a C-terminal ASD2 motif. The encoded protein may play a role in cytoskeletal architecture. Mutations in this gene have been linked to the X-linked Stocco dos Santos syndrome characterized by cognitive disabilities. Alternatively spliced transcript variants have been described. [provided by RefSeq, Jul 2017].\nGenomic position: X:50586796-50814302 (hg38), HG1433_PATCH:50334647-50557302, X:50334647-50557302 (hg19)\nGene card\n\n\n\nSymbol: AFF2 (protein-coding)         Aliases: FMR2, FMR2P, FRAXE, MRX2, OX19, XLID109\nALF transcription elongation factor 2\nSummary: This gene encodes a putative transcriptional activator that is a member of the AF4 gene family. This gene is associated with the folate-sensitive fragile X E locus on chromosome X. A repeat polymorphism in the fragile X E locus results in silencing of this gene causing Fragile X E syndrome. Fragile X E syndrome is a form of nonsyndromic X-linked cognitive disability. In addition, this gene contains 6-25 GCC repeats that are expanded to &gt;200 repeats in the disease state. Alternate splicing results in multiple transcript variants.[provided by RefSeq, Jul 2016].\nGenomic position: X:148500617-149000663 (hg38), HG1459_PATCH:147582336-148082384, X:147582139-148082193 (hg19)\nGene card\n\n\n\nSymbol: IL1RAPL2 (protein-coding)         Aliases: IL-1R9, IL1R9, IL1RAPL-2, TIGIRR-1\ninterleukin 1 receptor accessory protein like 2\nSummary: The protein encoded by this gene is a member of the interleukin 1 receptor family. This protein is similar to the interleukin 1 accessory proteins, and is most closely related to interleukin 1 receptor accessory protein-like 1 (IL1RAPL1). This gene and IL1RAPL1 are located at a region on chromosome X that is associated with X-linked non-syndromic cognitive disability. [provided by RefSeq, Jul 2008].\nGenomic position: X:104566199-105767829 (hg38), HG375_PATCH:103810996-105011820, X:103810996-105011822 (hg19)\nGene card\n\n\n\nSymbol: CLCN5 (protein-coding)         Aliases: CLC5, CLCK2, ClC-5, DENT1, DENTS, NPHL1, NPHL2, XLRH, XRN, hCIC-K2\nchloride voltage-gated channel 5\nSummary: This gene encodes a member of the ClC family of chloride ion channels and ion transporters. The encoded protein is primarily localized to endosomal membranes and may function to facilitate albumin uptake by the renal proximal tubule. Mutations in this gene have been found in Dent disease and renal tubular disorders complicated by nephrolithiasis. Alternatively spliced transcript variants have been found for this gene. [provided by RefSeq, Jan 2013].\nGenomic position: X:49922596-50099235 (hg38), HG1436_HG1432_PATCH:49732014-49908634, X:49687225-49863892 (hg19)\nGene card\n\n\n\nSymbol: APEX2 (protein-coding)         Aliases: APE2, APEXL2, XTH2, ZGRF2\napurinic/apyrimidinic endodeoxyribonuclease 2\nSummary: Apurinic/apyrimidinic (AP) sites occur frequently in DNA molecules by spontaneous hydrolysis, by DNA damaging agents or by DNA glycosylases that remove specific abnormal bases. AP sites are pre-mutagenic lesions that can prevent normal DNA replication so the cell contains systems to identify and repair such sites. Class II AP endonucleases cleave the phosphodiester backbone 5’ to the AP site. This gene encodes a protein shown to have a weak class II AP endonuclease activity. Most of the encoded protein is located in the nucleus but some is also present in mitochondria. This protein may play an important role in both nuclear and mitochondrial base excision repair. Alternatively spliced transcript variants encoding multiple isoforms have been observed for this gene. [provided by RefSeq, Nov 2012].\nGenomic position: X:55000363-55009057 (hg38), X:55026790-55035490 (hg19)\nGene card\n\n\n\nSymbol: LOC101928808 (ncRNA)\nuncharacterized LOC101928808\nGene card\n\n\n\nSymbol: MID2 (protein-coding)         Aliases: FXY2, MRX101, RNF60, TRIM1, XLID101\nmidline 2\nSummary: The protein encoded by this gene is a member of the tripartite motif (TRIM) family. The TRIM motif includes three zinc-binding domains, a RING, a B-box type 1 and a B-box type 2, and a coiled-coil region. The protein localizes to microtubular structures in the cytoplasm. Alternate splicing of this gene results in two transcript variants encoding different isoforms. [provided by RefSeq, Feb 2009].\nGenomic position: X:107825755-107931637 (hg38), X:107068985-107170423 (hg19)\nGene card\n\n\n\nSymbol: TRPC5 (protein-coding)         Aliases: PPP1R159, TRP5\ntransient receptor potential cation channel subfamily C member 5\nSummary: This gene belongs to the transient receptor family. It encodes one of the seven mammalian TRPC (transient receptor potential channel) proteins. The encoded protein is a multi-pass membrane protein and is thought to form a receptor-activated non-selective calcium permeant cation channel. The protein is active alone or as a heteromultimeric assembly with TRPC1, TRPC3, and TRPC4. It also interacts with multiple proteins including calmodulin, CABP1, enkurin, Na(+)-H+ exchange regulatory factor (NHERF ), interferon-induced GTP-binding protein (MX1), ring finger protein 24 (RNF24), and SEC14 domain and spectrin repeat-containing protein 1 (SESTD1). [provided by RefSeq, May 2010].\nGenomic position: X:111768011-112082776 (hg38), X:111017543-111326004 (hg19)\nGene card\n\n\n\nSymbol: MAGEA3-DT\nMAGEA3 divergent transcript\nGene card\n\n\n\nSymbol: WWC3 (protein-coding)         Aliases: BM042\nWWC family member 3\nSummary: This gene encodes a member of the WWC family of proteins, which also includes the WWC1 (KIBRA) gene product and the WWC2 gene product. The protein encoded by this gene includes a C2 domain, which is known to mediate homodimerization in the related WWC1 gene product. [provided by RefSeq, Sep 2011].\nGenomic position: X:10015254-10144474 (hg38), X:9983602-10112518 (hg19)\nGene card\n\n\n\nSymbol: PHKA2 (protein-coding)         Aliases: GSD9A, PHK, PYK, PYKL, XLG, XLG2\nphosphorylase kinase regulatory subunit alpha 2\nSummary: Phosphorylase kinase is a polymer of 16 subunits, four each of alpha, beta, gamma and delta. The alpha subunit includes the skeletal muscle and hepatic isoforms, and the hepatic isoform is encoded by this gene. The beta subunit is the same in both the muscle and hepatic isoforms, and encoded by one gene. The gamma subunit also includes the skeletal muscle and hepatic isoforms, which are encoded by two different genes. The delta subunit is a calmodulin and can be encoded by three different genes. The gamma subunits contain the active site of the enzyme, whereas the alpha and beta subunits have regulatory functions controlled by phosphorylation. The delta subunit mediates the dependence of the enzyme on calcium concentration. Mutations in this gene cause glycogen storage disease type 9A, also known as X-linked liver glycogenosis. Alternatively spliced transcript variants have been reported, but the full-length nature of these variants has not been determined.[provided by RefSeq, Feb 2010].\nGenomic position: X:18892298-18984114 (hg38), X:18910418-19002716 (hg19)\nGene card\n\n\n\nSymbol: LOC107985713 (ncRNA)\nuncharacterized LOC107985713\nGene card\n\n\n\nSymbol: RTL4 (protein-coding)         Aliases: Mar4, Mart4, SIRH11, ZCCHC16\nretrotransposon Gag like 4\nSummary: Predicted to enable nucleic acid binding activity and zinc ion binding activity. Predicted to act upstream of or within cognition and norepinephrine metabolic process. [provided by Alliance of Genome Resources, Apr 2022]\nGenomic position: X:112083016-112457514 (hg38), X:111697727-111700473 (hg19)\nGene card\n\n\n\n\n## EUROPEANS ##\nthreshold = 6\n\n# Function to define window to search nearby genes\ndef get_window_range(position, window_size):\n    x_min = position - window_size // 2\n    x_max = position + window_size // 2\n    return x_min, x_max\n\n# List of file paths\nfile_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_GBR.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_FIN.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_IBS.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_TSI.csv'\n]\n\n# Dictionary to store gene regions for each population\ngene_regions = {}\n\n# Set to store unique gene symbols\nunique_genes = set()\n\n# Iterate over file paths\nfor file_path in file_paths:\n    # Extract population name from the filename\n    population_name = os.path.splitext(os.path.basename(file_path))[0]\n    \n    # Read data\n    data = pd.read_csv(file_path)\n    \n    # Add 'population' column\n    data['population'] = population_name\n    \n    # Filter data based on threshold\n    filtered_data = data[data['combined_p_values'] &gt; threshold]\n    \n    # Initialize a list to store gene regions for the current population\n    population_gene_regions = []\n    \n    # Iterate over rows and calculate gene regions\n    for index, row in filtered_data.iterrows():\n        genomic_position = row['pos']\n        window_size = 1000  # Set window size !!!!!!! 500 bp on each SNP side\n        x_min, x_max = get_window_range(genomic_position, window_size)\n        \n        # Call gi.get_genes_region() for the current region\n        gene_region = gi.get_genes_region('chrX', x_min, x_max, assembly='hg38')\n        \n        # Extract gene symbol, start position, and end position from the result\n        if gene_region:  # Check if gene_region is not empty\n            gene_symbol = gene_region[0][0]\n            start_position = gene_region[0][1]\n            end_position = gene_region[0][2]\n            \n            # Append the extracted information to the list of gene regions for the current population\n            population_gene_regions.append((gene_symbol, start_position, end_position))\n            \n# Add gene symbol to set of unique genes\n            unique_genes.add(gene_symbol)\n    \n    # Store the list of gene regions for the current population in the dictionary\n    gene_regions[population_name] = population_gene_regions\n\n# Print gene regions for all populations\nfor population, regions in gene_regions.items():\n    print(f\"Gene regions for {population}:\")\n    for region in regions:\n        print(region)\n    print()\n\n\nprint()\nprint()\n\n# Set to store gene symbols for which information has already been retrieved\nretrieved_symbols = set()\n\n# Run gi.gene_info() for each unique gene symbol\nfor gene_symbol in unique_genes:\n    # Check if gene information has already been retrieved for this symbol\n    if gene_symbol not in retrieved_symbols:\n        gene_info = gi.gene_info(gene_symbol)\n        if gene_info is not None:\n            print(f\"Gene info for {gene_symbol}: {gene_info}\")\n\nGene regions for combined_GBR:\n\nGene regions for combined_FIN:\n\nGene regions for combined_IBS:\n('PRKX', 3604339, 3713649)\n('TENM1', 124375902, 124963817)\n\nGene regions for combined_TSI:\n('LOC112268307', 64205945, 64312562)\n\n\n\n\n\nSymbol: LOC112268307 (protein-coding)\nuncharacterized LOC112268307\nGene card\n\n\n\nSymbol: TENM1 (protein-coding)         Aliases: ODZ1, ODZ3, TEN-M1, TEN1, TNM, TNM1, ten-1\nteneurin transmembrane protein 1\nSummary: The protein encoded by this gene belongs to the tenascin family and teneurin subfamily. It is expressed in the neurons and may function as a cellular signal transducer. Several alternatively spliced transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Sep 2009].\nGenomic position: X:124375903-125204312 (hg38), X:123509753-124097666 (hg19)\nGene card\n\n\n\nSymbol: PRKX (protein-coding)         Aliases: PKX1\nprotein kinase cAMP-dependent X-linked catalytic subunit\nSummary: This gene encodes a serine threonine protein kinase that has similarity to the catalytic subunit of cyclic AMP dependent protein kinases. The encoded protein is developmentally regulated and may be involved in renal epithelial morphogenesis. This protein may also be involved in macrophage and granulocyte maturation. Abnormal recombination between this gene and a related pseudogene on chromosome Y is a frequent cause of sex reversal disorder in XX males and XY females. Pseudogenes of this gene are found on chromosomes X, 15 and Y. [provided by RefSeq, Feb 2010].\nGenomic position: X:3604340-3713649 (hg38), X:3522411-3631649 (hg19)\nGene card\n\n\n\n\n## ASIANS ##\nthreshold = 6\n\n# Function to define window to search nearby genes\ndef get_window_range(position, window_size):\n    x_min = position - window_size // 2\n    x_max = position + window_size // 2\n    return x_min, x_max\n\n# List of file paths\nfile_paths = [\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_CDX.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_CHS.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_CHB.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_KHV.csv',\n    '/home/ari/ari-intern/people/ari/ariadna-intern/results/combined_JPT.csv'\n]\n\n# Dictionary to store gene regions for each population\ngene_regions = {}\n\n# Set to store unique gene symbols\nunique_genes = set()\n\n# Iterate over file paths\nfor file_path in file_paths:\n    # Extract population name from the filename\n    population_name = os.path.splitext(os.path.basename(file_path))[0]\n    \n    # Read data\n    data = pd.read_csv(file_path)\n    \n    # Add 'population' column\n    data['population'] = population_name\n    \n    # Filter data based on threshold\n    filtered_data = data[data['combined_p_values'] &gt; threshold]\n    \n    # Initialize a list to store gene regions for the current population\n    population_gene_regions = []\n    \n    # Iterate over rows and calculate gene regions\n    for index, row in filtered_data.iterrows():\n        genomic_position = row['pos']\n        window_size = 1000  # Set window size !!!!!!! 500 bp on each SNP side\n        x_min, x_max = get_window_range(genomic_position, window_size)\n        \n        # Call gi.get_genes_region() for the current region\n        gene_region = gi.get_genes_region('chrX', x_min, x_max, assembly='hg38')\n        \n        # Extract gene symbol, start position, and end position from the result\n        if gene_region:  # Check if gene_region is not empty\n            gene_symbol = gene_region[0][0]\n            start_position = gene_region[0][1]\n            end_position = gene_region[0][2]\n            \n            # Append the extracted information to the list of gene regions for the current population\n            population_gene_regions.append((gene_symbol, start_position, end_position))\n            \n# Add gene symbol to set of unique genes\n            unique_genes.add(gene_symbol)\n    \n    # Store the list of gene regions for the current population in the dictionary\n    gene_regions[population_name] = population_gene_regions\n\n# Print gene regions for all populations\nfor population, regions in gene_regions.items():\n    print(f\"Gene regions for {population}:\")\n    for region in regions:\n        print(region)\n    print()\n\n\nprint()\nprint()\n\n# Set to store gene symbols for which information has already been retrieved\nretrieved_symbols = set()\n\n# Run gi.gene_info() for each unique gene symbol\nfor gene_symbol in unique_genes:\n    # Check if gene information has already been retrieved for this symbol\n    if gene_symbol not in retrieved_symbols:\n        gene_info = gi.gene_info(gene_symbol)\n        if gene_info is not None:\n            print(f\"Gene info for {gene_symbol}: {gene_info}\")\n\nGene regions for combined_CDX:\n\nGene regions for combined_CHS:\n('CLCN4', 10156974, 10237660)\n\nGene regions for combined_CHB:\n('PASD1', 151563674, 151676739)\n\nGene regions for combined_KHV:\n('PASD1', 151563674, 151676739)\n\nGene regions for combined_JPT:\n\n\n\n\n\nSymbol: PASD1 (protein-coding)         Aliases: CT63, CT64, OXTES1\nPAS domain containing repressor 1\nSummary: This gene encodes a protein that is thought to function as a transcription factor. The protein is a cancer-associated antigen that can stimulate autologous T-cell responses, and it is therefore considered to be a potential immunotherapeutic target for the treatment of various hematopoietic malignancies, including diffuse large B-cell lymphoma. [provided by RefSeq, May 2010].\nGenomic position: X:151563675-151676739 (hg38), X:150732094-150845211 (hg19)\nGene card\n\n\n\nSymbol: CLCN4 (protein-coding)         Aliases: CLC4, ClC-4, ClC-4A, MRX15, MRX49, MRXSRC\nchloride voltage-gated channel 4\nSummary: The CLCN family of voltage-dependent chloride channel genes comprises nine members (CLCN1-7, Ka and Kb) which demonstrate quite diverse functional characteristics while sharing significant sequence homology. Chloride channel 4 has an evolutionary conserved CpG island and is conserved in both mouse and hamster. This gene is mapped in close proximity to APXL (Apical protein Xenopus laevis-like) and OA1 (Ocular albinism type I), which are both located on the human X chromosome at band p22.3. The physiological role of chloride channel 4 remains unknown but may contribute to the pathogenesis of neuronal disorders. Alternate splicing results in two transcript variants that encode different proteins. [provided by RefSeq, Mar 2012].\nGenomic position: X:10156975-10237660 (hg38), X:10125024-10205700 (hg19)\nGene card",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Gene info</span>"
    ]
  },
  {
    "objectID": "notebooks/5_fisher_exact_test.html",
    "href": "notebooks/5_fisher_exact_test.html",
    "title": "GO enrichment analysis",
    "section": "",
    "text": "from scipy.stats import fisher_exact\nimport pandas as pd\n\ndef read_google_sheet():\n    SHEET_ID = '1JSjSLuto3jqdEnnG7JqzeC_1pUZw76n7XueVAYrUOpk'\n    SHEET_NAME = 'Sheet1'\n    url = f'https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv&sheet={SHEET_NAME}'\n    df = pd.read_csv(url, header=1)\n    return df.loc[:, [not x.startswith('Unnamed') for x in df.columns]]\n    \ndef gene_list_names():\n    df = read_google_sheet()\n    return sorted(df.columns.tolist())\n\ndef gene_list(name):\n    df = read_google_sheet()\n    sr = df[name]\n    return sr[~sr.isnull()]\n    \nall_set = set(gene_list('all_npx'))\nasd_set = set(gene_list('sfari_all_conf'))\nspermatid_set = set(gene_list('meritxell_spermatid_expr'))\nbrain_set = set(gene_list('hpa_brain_prot'))\nneuron_set = set(gene_list('matos_neuron'))\n\n\n# candidate genes found under positive selection by RELATE\nselection_set = {'ACSL4',\n'AMMECR1',\n'ARSL',\n'BCOR',\n'CASK',\n'CDKL5',\n'CLCN4',\n'CLCN5',\n'DMD',\n'ENOX2',\n'FAM120C',\n'FRMPD4',\n'G6PD',\n'GNL3L',\n'HUWE1',\n'IGSF1',\n'IL1RAPL1',\n# 'LINC01278',\n# 'LINC01278',\n# 'LOC101928359',\n# 'LOC105377212',\n# 'LOC112268307',\n# 'LOC124905191',\n'MAGT1',\n'MAMLD1',\n# 'MIR325HG',\n'NHS',\n'NYX',\n'PAK3',\n'PASD1',                 \n'PHKA1',\n'PRKX',\n'PTCHD1',\n# 'PTCHD1-AS',\n'RAB33A',\n# 'RAP2C-AS1',\n'RTL4',\n'TENM1',\n'TMEM164',\n'TMLHE',\n'WWC3',\n'XPNPEP2',\n'ZMYM3',\n'ZNF185'}\nprint(len(selection_set))\n\n35\n\n\n\n# ASD-related genes are more likely to be expressed in brain+spermatids than in only brain\nM = len(asd_set) \nN = len(asd_set.intersection(brain_set)) \nn = len(asd_set.intersection(spermatid_set))\nx = len(asd_set.intersection(spermatid_set).intersection(brain_set))\n\ntable = [[  x,           n - x          ],\n         [ N - x,        M - (n + N) + x]]\ntable, fisher_exact(table, alternative='greater').pvalue\n\n([[66, 2], [5, 4]], 0.0012471014633956233)\n\n\n\n# H1: Positively selected genes are enriched for ASD\nM = len(all_set)\nN = len(all_set.intersection(asd_set))\nn = len(all_set.intersection(selection_set))\nx = len(all_set.intersection(asd_set).intersection(selection_set))\n\ntable = [[  x,           n - x          ],  \n         [ N - x,        M - (n + N) + x]] \ntable, fisher_exact(table, alternative='greater').pvalue\n\n([[9, 26], [68, 1309]], 5.947106735011354e-05)\n\n\n\n# H2: Positive selection is more common in genes that are involved in both spermatid and neuron than just in neuron\nM = len(brain_set)\nN = len(brain_set.intersection(spermatid_set))\nn = len(brain_set.intersection(selection_set))\nx = len(brain_set.intersection(spermatid_set).intersection(selection_set))\n\ntable = [[  x,           n - x          ],\n         [ N - x,        M - (n + N) + x]]\ntable, fisher_exact(table, alternative='greater').pvalue\n\n([[29, 2], [371, 160]], 0.001915857329301735)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>GO enrichment analysis</span>"
    ]
  },
  {
    "objectID": "notebooks/new_brain_list.html",
    "href": "notebooks/new_brain_list.html",
    "title": "‘LINC01278’,",
    "section": "",
    "text": "from scipy.stats import fisher_exact\nimport pandas as pd\n\ndef read_google_sheet():\n    SHEET_ID = '1JSjSLuto3jqdEnnG7JqzeC_1pUZw76n7XueVAYrUOpk'\n    SHEET_NAME = 'Sheet1'\n    url = f'https://docs.google.com/spreadsheets/d/{SHEET_ID}/gviz/tq?tqx=out:csv&sheet={SHEET_NAME}'\n    df = pd.read_csv(url, header=1)\n    return df.loc[:, [not x.startswith('Unnamed') for x in df.columns]]\n    \ndef gene_list_names():\n    df = read_google_sheet()\n    return sorted(df.columns.tolist())\n\ndef gene_list(name):\n    df = read_google_sheet()\n    sr = df[name]\n    return sr[~sr.isnull()]\n    \nall_set = set(gene_list('all_npx'))\nasd_set = set(gene_list('sfari_all_conf'))\nspermatid_set = set(gene_list('meritxell_spermatid_expr'))\nbrain_set = set(gene_list('hpa_brain_prot'))\nneuron_set = set(gene_list('matos_neuron'))\n\nprint(len(all_set))\nprint(len(asd_set))\nprint(len(spermatid_set))\nprint(len(brain_set))\nprint(len(neuron_set))\n\n1412\n77\n759\n562\n466\n\n\nI removed the unannotated genes, the microRNA genes and the antisense genes. That leaves only well-annotated protein genes.\n\nselection_set = {'ACSL4',\n'AMMECR1',\n'ARSL',\n'BCOR',\n'CASK',\n'CDKL5',\n'CLCN4',\n'CLCN5',\n'DMD',\n'ENOX2',\n'FAM120C',\n'FRMPD4',\n'G6PD',\n'GNL3L',\n'HUWE1',\n'IGSF1',\n'IL1RAPL1',\n# 'LINC01278',\n# 'LOC101928359',\n# 'LOC105377212',\n# 'LOC112268307',\n# 'LOC124905191',\n'MAGT1',\n'MAMLD1',\n# 'MIR325HG',\n'NHS',\n'NYX',\n'PAK3',\n'PASD1',                 \n'PHKA1',\n'PRKX',\n'PTCHD1',\n# 'PTCHD1-AS',\n'RAB33A',\n# 'RAP2C-AS1',\n'RTL4',\n'TENM1',\n'TMEM164',\n'TMLHE',\n'WWC3',\n'XPNPEP2',\n'ZMYM3',\n'ZNF185'}\nlen(selection_set)\n\nbrain_sel = selection_set.intersection(brain_set)\nprint(len(neuron_sel.intersection(spermatid_set)))\n\n29\n\n\n\nx = selection_set.intersection(neuron_set)\nprint(x, len(x))\nprint()\ny = selection_set.intersection(brain_set)\nprint(y, len(y))\nprint()\n\nbrain_neuron = x.intersection(y)\nprint(brain_neuron, len(brain_neuron))\n\n# NYX is expressed in neurons but no in brain --&gt; ?\n# IL1RAPL1, ARSL are brain genes, but not expressed in neurons --&gt; OKAY\n\n{'CLCN5', 'CLCN4', 'TMEM164', 'MAGT1', 'IGSF1', 'PRKX', 'PTCHD1', 'FAM120C', 'ZNF185', 'RAB33A', 'PAK3', 'FRMPD4', 'ACSL4', 'PHKA1', 'NYX', 'ZMYM3', 'G6PD', 'GNL3L', 'DMD', 'NHS', 'MAMLD1', 'HUWE1', 'ENOX2', 'AMMECR1', 'TENM1', 'TMLHE', 'WWC3', 'CASK', 'BCOR', 'CDKL5'} 30\n\n{'CLCN5', 'IL1RAPL1', 'ARSL', 'CLCN4', 'TMEM164', 'MAGT1', 'IGSF1', 'PRKX', 'PTCHD1', 'FAM120C', 'ZNF185', 'RAB33A', 'PAK3', 'FRMPD4', 'ACSL4', 'PHKA1', 'ZMYM3', 'G6PD', 'GNL3L', 'DMD', 'NHS', 'MAMLD1', 'HUWE1', 'ENOX2', 'AMMECR1', 'TENM1', 'TMLHE', 'WWC3', 'CASK', 'BCOR', 'CDKL5'} 31\n\n{'CLCN5', 'CLCN4', 'TMEM164', 'MAGT1', 'IGSF1', 'PRKX', 'PTCHD1', 'FAM120C', 'ZNF185', 'RAB33A', 'PAK3', 'FRMPD4', 'ACSL4', 'PHKA1', 'ZMYM3', 'G6PD', 'GNL3L', 'DMD', 'NHS', 'MAMLD1', 'HUWE1', 'ENOX2', 'AMMECR1', 'TENM1', 'TMLHE', 'WWC3', 'CASK', 'BCOR', 'CDKL5'} 29\n\n\n\nz = selection_set.intersection(neuron_set).intersection(spermatid_set)\nprint(z, len(z))\nprint()\n\nt = spermatid_set.intersection(neuron_set)\nprint(t, len(t))\n\n{'CLCN5', 'CLCN4', 'TMEM164', 'MAGT1', 'PRKX', 'PTCHD1', 'FAM120C', 'ZNF185', 'RAB33A', 'PAK3', 'FRMPD4', 'ACSL4', 'PHKA1', 'ZMYM3', 'G6PD', 'GNL3L', 'DMD', 'NHS', 'MAMLD1', 'HUWE1', 'ENOX2', 'AMMECR1', 'TENM1', 'TMLHE', 'WWC3', 'CASK', 'BCOR', 'CDKL5'} 28\n\n{'LANCL3', 'BRWD3', 'PCDH11X', 'ZFX', 'ATG4A', 'PIR', 'NUP62CL', 'MAGT1', 'MOSPD1', 'TBC1D8B', 'PRKX', 'BCORL1', 'AP1S2', 'PUDP', 'KLHL13', 'NHS', 'MAMLD1', 'RBMX2', 'HPRT1', 'ENOX2', 'MID1IP1', 'GLRA2', 'TXLNG', 'TIMP1', 'BEX4', 'ARHGEF9', 'PNPLA4', 'OFD1', 'PCSK1N', 'CUL4B', 'AIFM1', 'FRMPD3', 'TSPAN6', 'LAS1L', 'ATP6AP1', 'HMGB3', 'ARAF', 'NLGN4X', 'SCML2', 'MBTPS2', 'GLA', 'BCAP31', 'PHF6', 'AMMECR1', 'CCDC120', 'PHEX', 'RBM41', 'TFE3', 'HCCS', 'PORCN', 'LDOC1', 'CA5B', 'RBMX', 'ZDHHC15', 'CSTF2', 'ELK1', 'CLCN4', 'NONO', 'EBP', 'SLC9A7', 'ARMCX4', 'DMD', 'RENBP', 'YIPF6', 'SYN1', 'WNK3', 'WWC3', 'GRIA3', 'MECP2', 'ABCD1', 'RPL10', 'MCTS1', 'APOOL', 'PRICKLE3', 'FUNDC2', 'ZNF81', 'IGBP1', 'MED14', 'ARSD', 'SH3BGRL', 'IRAK1', 'MAP7D2', 'GABRA3', 'PHKA2', 'GEMIN8', 'FTSJ1', 'STAG2', 'PLXNA3', 'LAGE3', 'PRPS1', 'CTPS2', 'HDAC6', 'PPP1R3F', 'TMEM164', 'MSL3', 'FRMPD4', 'FGD1', 'RRAGB', 'EMD', 'EIF2S3', 'RADX', 'RBBP7', 'CD99L2', 'RPS4X', 'RBM3', 'RAB9B', 'NKRF', 'ACOT9', 'TAFAZZIN', 'UBE2A', 'PNCK', 'RAI2', 'PABIR3', 'ZMYM3', 'CYSLTR1', 'DYNLT3', 'FLNA', 'HSD17B10', 'MAOB', 'ZDHHC9', 'HDX', 'AFF2', 'ADGRG2', 'GLOD5', 'ABCB7', 'CDKL5', 'GPM6B', 'EFHC2', 'IL13RA1', 'DDX3X', 'SCML1', 'TSPYL2', 'TAF1', 'MORF4L2', 'DACH2', 'PHKA1', 'LRCH2', 'KRBOX4', 'KLF8', 'MBNL3', 'OCRL', 'FGF13', 'KLHL4', 'STEEP1', 'SH3KBP1', 'FAM9B', 'EIF1AX', 'GDI1', 'CETN2', 'ZNF41', 'CHM', 'TMEM47', 'NDUFA1', 'RPL39', 'DKC1', 'VMA21', 'ZNF182', 'FHL1', 'DLG3', 'RAB33A', 'RIBC1', 'ACSL4', 'MCF2', 'PHF8', 'CITED1', 'ZNF674', 'TIMM17B', 'MED12', 'PRAF2', 'HUWE1', 'RAB9A', 'RS1', 'CHIC1', 'MPP1', 'ZC3H12B', 'MAP7D3', 'PPEF1', 'PQBP1', 'FMR1', 'CDK16', 'PCDH19', 'IDS', 'PGK1', 'DIAPH2', 'FANCB', 'SNX12', 'SLC16A2', 'ALG13', 'SMC1A', 'HAUS7', 'G6PD', 'PDHA1', 'ANOS1', 'MID1', 'SLC25A53', 'NAA10', 'C1GALT1C1', 'GPR173', 'MAP3K15', 'AMOT', 'GK', 'ZNF75D', 'FAM199X', 'FAM50A', 'TSPAN7', 'PTCHD1', 'FUNDC1', 'NDUFB11', 'MORC4', 'JADE3', 'MMGT1', 'GNL3L', 'WDR13', 'ADGRG4', 'ZNF449', 'RP2', 'CNKSR2', 'MAGED1', 'OTUD5', 'PGRMC1', 'ARHGAP6', 'OPHN1', 'TMSB4X', 'NLGN3', 'RPS6KA3', 'LONRF3', 'RAP2C', 'BEX1', 'MOSPD2', 'TAB3', 'FAM9C', 'TAF9B', 'TENM1', 'TMLHE', 'CASK', 'PBDC1', 'GPC3', 'UBA1', 'HNRNPH2', 'SAT1', 'RPGR', 'GYG2', 'KLHL15', 'CLCN5', 'MSN', 'FAM133A', 'PJA1', 'PDZD11', 'RPS6KA6', 'ATP7A', 'PCYT1B', 'SLC25A14', 'ARHGAP4', 'POLA1', 'ZMAT1', 'ZNF185', 'TCEAL4', 'XK', 'MAGED2', 'KDM6A', 'CHST7', 'CHRDL1', 'RPL36A', 'GSPT2', 'TMEM187', 'CFAP47', 'USP9X', 'RAB41', 'FAAH2', 'FAM3A', 'TCEAL8', 'ZIC3', 'HCFC1', 'PABIR2', 'PLP2', 'CLIC2', 'REPS2', 'SLC35A2', 'UPF3B', 'UXT', 'DNASE1L1', 'HTATSF1', 'MID2', 'ARHGEF6', 'OGT', 'RLIM', 'HMGN5', 'PDK3', 'PRDX4', 'UTP14A', 'SYAP1', 'TKTL1', 'BCOR', 'BEX2', 'TSC22D3', 'GPR82', 'CXorf58', 'TCEAL1', 'WDR45', 'RHOXF1', 'NXT2', 'PIGA', 'USP11', 'SYP', 'GUCY2F', 'XIAP', 'PLS3', 'IDH3G', 'SMS', 'PSMD10', 'TBL1X', 'TSR2', 'GPKOW', 'ATP11C', 'SLC25A5', 'ZRSR2', 'SHROOM2', 'ZNF280C', 'SLC6A8', 'CXorf38', 'SSR4', 'CMC4', 'PRRG1', 'COX7B', 'UPRT', 'NKAP', 'TIMM8A', 'STS', 'APOO', 'ZBTB33', 'GRIPAP1', 'SLC9A6', 'ATRX', 'SEPTIN6', 'BRCC3', 'HDAC8', 'PIN4', 'TRMT2B', 'OTUD6A', 'USP51', 'ZC4H2', 'TBC1D25', 'F8', 'ZNF711', 'THOC2', 'KDM5C', 'FAM120C', 'PAK3', 'ATP6AP2', 'WDR44', 'SMARCA1', 'MAOA', 'VBP1', 'PDZD4', 'LAMP2'} 355\n\n\n\nM = 466 \nN = 355\nn = 30\nx = 28\n\ntable = [[  x,           n - x          ],\n         [ N - x,        M - (n + N) + x]]\ntable, fisher_exact(table, alternative='greater').pvalue\n\n([[28, 2], [327, 109]], 0.012810619118361193)\n\n\n\n# ASD-related genes are more likely to be expressed in neurons+spermatids than in only neurons\nM = len(asd_set) \nN = len(asd_set.intersection(brain_set)) \nn = len(asd_set.intersection(spermatid_set))\nx = len(asd_set.intersection(spermatid_set).intersection(brain_set))\n\ntable = [[  x,           n - x          ],\n         [ N - x,        M - (n + N) + x]]\ntable, fisher_exact(table, alternative='greater').pvalue\n\n([[66, 2], [5, 4]], 0.0012471014633956233)\n\n\n\n# H1: Positively selected genes are enriched for ASD\nM = len(all_set)\nN = len(all_set.intersection(asd_set))\nn = len(all_set.intersection(selection_set))\nx = len(all_set.intersection(asd_set).intersection(selection_set))\n\ntable = [[  x,           n - x          ],  \n         [ N - x,        M - (n + N) + x]] \ntable, fisher_exact(table, alternative='greater').pvalue\n\n([[9, 26], [68, 1309]], 5.947106735011354e-05)\n\n\n\n# H2: Positive selection is more common in genes that are involved in both spermatid and neuron than just in neuron\nM = len(brain_set)\nN = len(brain_set.intersection(spermatid_set))\nn = len(brain_set.intersection(selection_set))\nx = len(brain_set.intersection(spermatid_set).intersection(selection_set))\n\ntable = [[  x,           n - x          ],\n         [ N - x,        M - (n + N) + x]]\ntable, fisher_exact(table, alternative='greater').pvalue\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[1], line 2\n      1 # H2: Positive selection is more common in genes that are involved in both spermatid and neuron than just in neuron\n----&gt; 2 M = len(brain_set)\n      3 N = len(brain_set.intersection(spermatid_set))\n      4 n = len(brain_set.intersection(selection_set))\n\nNameError: name 'brain_set' is not defined\n\n\n\n\n# H2: Positive selection is more common in ASD genes also expressed in spermatids\nM = len(asd_set)\nN = len(asd_set.intersection(spermatid_set))\nn = len(asd_set.intersection(selection_set))\nx = len(asd_set.intersection(spermatid_set).intersection(selection_set))\n\ntable = [[  x,           n - x          ],\n         [ N - x,        M - (n + N) + x]]\ntable, fisher_exact(table, alternative='greater').pvalue\n\n([[9, 0], [59, 9]], 0.30547534876941307)\n\n\n\n# H2: Positive selection is more common in genes that are involved in both spermatid and neuron than just in neuron\nM = len(neuron_set)\nN = len(neuron_set.intersection(spermatid_set))\nn = 31#len(neuron_set.intersection(selection_set))\nx = len(neuron_set.intersection(spermatid_set).intersection(selection_set))\n\ntable = [[  x,           n - x          ],\n         [ N - x,        M - (n + N) + x]]\ntable, fisher_exact(table, alternative='greater').pvalue\n\n([[28, 3], [327, 108]], 0.03721007992246583)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>new_brain_list.html</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Title of your project",
    "section": "",
    "text": "Quantifying positive selection on the human X chromosome and its impact on autism\nPast studies on autism have always neglected the complicated analysis of the X chromosome due to its different inheritance pattern. In this project,we analyzed patterns of genetic diversity in order to identify potential positively selected genes on the human X chromosome across several populations to answer: (1) if positively selected genes are enriched for ASD, and if that is true, (2) if positive selection is more common in genes that are involved in both spermatid and brain development compared to those that are only involved in brain development.\nRelate software automated pipeline conducted on gwf workflow.py\nDownstream analysis is performed in jupyter notebooks.\nBy: Ariadna Saez (ESCI-UPF) || Supervised by: Kasper Munch (Aarhus University)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Quantifying positive selection on the human X chromosome and its impact on autism</span>"
    ]
  },
  {
    "objectID": "tables/tables.html",
    "href": "tables/tables.html",
    "title": "Tables",
    "section": "",
    "text": "Asians low pvalue",
    "crumbs": [
      "Tables",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "tables/tables.html#asians-low-pvalue",
    "href": "tables/tables.html#asians-low-pvalue",
    "title": "Tables",
    "section": "",
    "text": "pos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\nX35714.292969\nX25703.064453\nX18498.126953\nX13312.836914\nX9581.057617\nX6895.350098\nX4962.484863\nX3571.429199\nX2570.306396\nX1849.812622\nX1331.283691\nX958.105774\nX689.534973\nX496.248444\nX357.142914\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\npopulation\n\n\n\n\n0\n10122953\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.29509\n-3.86424\n-2.99228\n-1.76268\n-1.42884\n-0.987813\n-0.96179\n-1.19143\n-0.559613\n-0.761888\n-1.64426\n0\n-1.39061\n-6.29509\nCDX\n\n\n1\n11859476\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.07077\n-4.02008\n-3.19809\n-2.28595\n-2.10128\n-1.57619\n-0.977768\n-1.61005\n-1.66417\n-0.557903\n0\n-2.69332\n-6.64483\nCDX\n\n\n2\n11864438\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.07077\n-4.02008\n-3.19809\n-2.28595\n-2.10128\n-1.57619\n-0.977768\n-1.61005\n-1.66417\n-0.557903\n0\n-2.69332\n-6.64483\nCDX\n\n\n3\n32635171\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58804\n-5.45895\n-3.41827\n-2.7647\n-2.24737\n-1.73044\n-1.55599\n-1.1815\n-0.933064\n-0.80943\n-0.399554\n-0.202704\n-0.298736\n0\n-2.22411\n-6.58804\nCDX\n\n\n4\n105249963\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.1175\n-5.1637\n-4.04624\n-3.49276\n-2.61079\n-1.43111\n-0.880012\n-0.58166\n-0.612386\n-0.38437\n-0.240353\n-0.15279\n-0.228024\n-0.150998\n0\n-1.40614\n-6.1175\nCDX\n\n\n5\n3712725\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.31824\n-3.1641\n-1.81892\n-0.879889\n-0.836077\n-0.55238\n-0.439584\n-0.609713\n-0.366916\n-0.877111\n-0.129806\n0\n0\n-1.08669\n-6.50623\nCHB\n\n\n6\n3713920\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.5735\n-5.41403\n-3.75372\n-2.72467\n-2.34696\n-1.79115\n-1.2686\n-1.23448\n-0.498734\n-0.120926\n-0.0400259\n0\n-2.06253\n-9.86443\nCHB\n\n\n7\n3717514\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.6745\n-5.34847\n-3.97524\n-3.51701\n-2.69674\n-1.78978\n-1.71195\n-1.00312\n-1.38504\n-0.602337\n0\n0\n0\n-2.63504\n-6.90527\nCHB\n\n\n8\n3720564\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.07486\n-5.47213\n-4.49715\n-3.32555\n-3.03137\n-2.3405\n-1.55688\n-1.52831\n-0.898814\n-1.3108\n-0.570144\n0\n0\n0\n-2.39925\n-6.07486\nCHB\n\n\n9\n3720591\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.07486\n-5.47213\n-4.49715\n-3.32555\n-3.03137\n-2.3405\n-1.55688\n-1.52831\n-0.898814\n-1.3108\n-0.570144\n0\n0\n0\n-2.39925\n-6.07486\nCHB\n\n\n10\n3721203\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.07486\n-5.47213\n-4.49715\n-3.32555\n-3.03137\n-2.3405\n-1.55688\n-1.52831\n-0.898814\n-1.3108\n-0.570144\n0\n0\n0\n-2.39925\n-6.07486\nCHB\n\n\n11\n3721452\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.07486\n-5.47213\n-4.49715\n-3.32555\n-3.03137\n-2.3405\n-1.55688\n-1.52831\n-0.898814\n-1.3108\n-0.570144\n0\n0\n0\n-2.39925\n-6.07486\nCHB\n\n\n12\n32812742\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.44963\n-5.26956\n-3.49576\n-3.5287\n-2.69646\n-2.79555\n-2.3411\n-1.77063\n-1.15857\n-0.712739\n0\n0\n-3.15776\n-6.19174\nCHB\n\n\n13\n47349640\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.06731\n-5.65412\n-3.80532\n-2.38106\n-1.40443\n-0.438846\n-0.632037\n-1.90485\n-0.362553\n0\n0\n-1.54411\n-6.06731\nCHB\n\n\n14\n47352820\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-8.49292\n-5.40203\n-3.07212\n-1.90421\n-0.916986\n-1.01208\n-2.26805\n-0.416071\n0\n0\n-2.05606\n-8.20242\nCHB\n\n\n15\n151669901\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.5415\n-4.60227\n-2.85652\n-2.03514\n-1.39892\n-1.54398\n-0.818548\n-0.504676\n-0.967806\n-0.554425\n-0.0775602\n0\n-1.64488\n-8.53576\nCHB\n\n\n16\n3706646\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.76662\n-4.18803\n-3.70413\n-4.02322\n-3.49165\n-3.2834\n-3.42243\n-2.8342\n-2.08006\n-1.20419\n-0.261495\n0\n-2.43612\n-6.34196\nCHS\n\n\n17\n10214581\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.55809\n-5.03432\n-4.30144\n-4.23567\n-3.61208\n-3.22323\n-2.45509\n-2.1945\n-1.85507\n-1.52754\n-1.01046\n0\n-2.5395\n-9.20117\nCHS\n\n\n18\n122431333\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.27551\n-3.16974\n-2.97006\n-2.02933\n-1.55215\n-2.07167\n-1.54353\n-1.25739\n-0.74421\n-0.455002\n-0.279814\n-0.465315\n0\n-0.937105\n-6.22082\nCHS\n\n\n19\n141669308\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.1283\n-5.09181\n-3.86774\n-3.26397\n-3.01688\n-2.20039\n-1.57352\n-1.36246\n-1.22372\n-0.74513\n-0.877915\n-0.758221\n-0.347824\n-0.528395\n-0.298031\n-0.177496\n0\n-1.01917\n-6.1283\nCHS\n\n\n20\n49962327\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.77423\n-5.21792\n-4.46398\n-3.54123\n-3.07402\n-2.35739\n-2.14512\n-1.75329\n-1.23355\n-0.910868\n-0.689957\n-0.46336\n-0.37464\n0\n-1.7661\n-6.61933\nJPT\n\n\n21\n142111497\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.7313\n-5.31289\n-4.67495\n-2.85507\n-2.30651\n-1.77164\n-1.20818\n-0.760519\n-0.471592\n-0.520951\n-0.254817\n-0.129167\n-0.173472\n-0.346569\n0\n-1.40929\n-6.26781\nJPT\n\n\n22\n20348765\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.91793\n-5.58301\n-4.27081\n-2.58526\n-2.94817\n-1.95356\n-1.43895\n-1.90907\n-1.04105\n-0.767756\n-1.11344\n-1.69513\n0\n-2.04252\n-6.05583\nKHV\n\n\n23\n20349644\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.622\n-4.80375\n-2.70736\n-3.20245\n-2.05429\n-1.41084\n-1.71206\n-0.835151\n-0.536052\n-0.957895\n-1.26733\n0\n-1.7731\n-8.27088\nKHV\n\n\n24\n69126919\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.92639\n-4.10753\n-2.39112\n-2.10171\n-2.18376\n-1.74292\n-2.05265\n-1.093\n-1.35798\n-1.18241\n-1.26177\n-1.0025\n0\n-1.33815\n-6.76224\nKHV\n\n\n25\n151669901\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.3608\n-4.90525\n-4.2228\n-3.07553\n-3.58907\n-2.8352\n-2.60176\n-1.69462\n-2.29272\n-1.72275\n-1.23222\n-1.0982\n0\n-2.15558\n-7.15834\nKHV\n\n\n26\n153982797\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.84053\n-3.94884\n-2.82204\n-2.45057\n-2.17494\n-1.28059\n-1.0344\n-1.27915\n-0.71753\n-0.367623\n-0.427696\n0\n-1.28947\n-6.1144\nKHV",
    "crumbs": [
      "Tables",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "tables/tables.html#africans-low-pvalue",
    "href": "tables/tables.html#africans-low-pvalue",
    "title": "Tables",
    "section": "Africans low pvalue",
    "text": "Africans low pvalue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npos\nrs_id\nX3571428.500000\nX357142.937500\nX257030.656250\nX184981.281250\nX133128.375000\nX95810.585938\nX68953.507812\nX49624.847656\nX35714.292969\nX25703.064453\nX18498.126953\nX13312.836914\nX9581.057617\nX6895.350098\nX4962.484863\nX3571.429199\nX2570.306396\nX1849.812622\nX1331.283691\nX958.105774\nX689.534973\nX496.248444\nX357.142914\nX257.030640\nX184.981262\nX133.128357\nX95.810577\nX68.953499\nX49.624844\nX35.714287\nX0.000000\nwhen_DAF_is_half\nwhen_mutation_has_freq2\npopulation\n\n\n\n\n0\n20315815\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.63502\n-5.5957\n-5.18622\n-5.20375\n-4.54409\n-3.98167\n-3.13033\n-2.77537\n-2.02355\n-1.77124\n-1.70608\n-1.40631\n-1.38996\n-1.92438\n-0.94864\n-1.7663\n0\n-1.87525\n-7.33837\nLWK\n\n\n1\n23370843\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.91027\n-6.96401\n-6.8016\n-5.5315\n-4.75934\n-4.98699\n-3.72799\n-4.52137\n-3.90379\n-3.17688\n-2.45037\n-2.15212\n-1.5687\n-1.2063\n-0.90778\n-0.594836\n0\n-3.8264\n-8.55552\nLWK\n\n\n2\n41543371\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.31995\n-4.87583\n-4.27156\n-3.5588\n-3.23676\n-2.93448\n-2.55516\n-2.28726\n-1.65442\n-1.1977\n-1.69895\n-1.1834\n-0.845801\n-0.52601\n-0.552863\n0\n-1.82029\n-6.98885\nLWK\n\n\n3\n54089456\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.65562\n-6.51066\n-5.20197\n-2.84682\n-2.5297\n-1.75461\n-1.44732\n-0.843928\n-0.657026\n-0.628741\n-0.825973\n0\n-1.80491\n-6.41506\nLWK\n\n\n4\n63276390\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.83006\n-3.65063\n-2.42661\n-3.73885\n-2.52668\n-2.06796\n-1.63485\n-1.16317\n-1.05804\n-0.507486\n-0.335927\n-0.764281\n-0.595004\n-0.505031\n-0.281722\n-0.374738\n0\n-1.01703\n-6.05563\nLWK\n\n\n5\n63404138\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.81287\n-4.61101\n-4.18878\n-4.45607\n-4.41377\n-3.615\n-2.88657\n-2.51033\n-1.77237\n-1.67375\n-2.18614\n-1.73576\n-1.25364\n-1.47013\n-1.07242\n0\n-2.4852\n-6.05563\nLWK\n\n\n6\n63404457\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.0364\n-4.72158\n-4.216\n-3.91071\n-3.39619\n-2.39542\n-2.78299\n-2.01535\n-1.51131\n-1.41326\n-0.89393\n-1.23655\n-1.14678\n-0.949249\n0\n-2.29743\n-6.3382\nLWK\n\n\n7\n63405319\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.89084\n-5.44412\n-4.29186\n-3.73988\n-3.59149\n-2.84881\n-2.42331\n-1.90173\n-1.40622\n-1.28713\n-1.39122\n-2.32656\n-1.99207\n-1.76611\n0\n-2.03904\n-6.71316\nLWK\n\n\n8\n63461449\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.56446\n-6.28976\n-4.71271\n-4.18921\n-2.41788\n-1.40161\n-1.11897\n-0.646357\n-0.868585\n-0.712709\n-0.938552\n-0.599135\n-0.459972\n-0.663827\n-0.988324\n-0.70323\n0\n-1.26531\n-6.56446\nLWK\n\n\n9\n99726509\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.43213\n-4.79879\n-3.99366\n-2.47695\n-2.73556\n-2.38201\n-2.13523\n-1.70097\n-1.55386\n-0.939781\n-0.589204\n-0.251806\n-0.157713\n-0.246014\n0\n-1.82\n-6.19559\nLWK\n\n\n10\n99796599\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.8174\n-2.93599\n-2.33378\n-1.47416\n-1.10166\n-1.13877\n-0.819936\n-0.477193\n-0.575344\n-0.496285\n-0.33078\n-0.268636\n-0.0928834\n-0.0367215\n0\n-0.746716\n-6.19559\nLWK\n\n\n11\n110224305\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.74633\n-3.65063\n-3.00404\n-2.37704\n-2.27627\n-1.33958\n-1.18847\n-0.436304\n-0.281833\n-0.133231\n-0.165036\n-0.206715\n-0.146963\n-0.209928\n0\n-0.512878\n-6.05368\nLWK\n\n\n12\n112159030\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.12129\n-5.64813\n-3.45839\n-2.61818\n-2.68468\n-1.98322\n-1.78184\n-1.73974\n-1.24438\n-1.10191\n-0.389168\n-0.362517\n0\n-1.90086\n-7.21554\nLWK\n\n\n13\n122830552\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.29667\n-4.99688\n-4.22131\n-3.66566\n-3.10924\n-2.49807\n-2.7112\n-2.12933\n-1.72271\n-1.46649\n-1.07777\n-1.40989\n-1.02267\n-0.751185\n-1.11403\n-0.837045\n-0.635948\n0\n-2.32897\n-6.29667\nLWK\n\n\n14\n130719731\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.29667\n-4.99688\n-4.44775\n-3.66566\n-2.88224\n-1.91562\n-1.39676\n-0.985069\n-1.96959\n-1.67295\n-1.23958\n-1.70642\n-1.45016\n-1.2115\n-0.98819\n-0.778385\n0\n-2.32897\n-6.29667\nLWK\n\n\n15\n132284278\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.29564\n-4.8071\n-4.83999\n-3.69767\n-3.06857\n-2.60937\n-1.91422\n-1.0451\n-1.22694\n-0.52403\n-0.839764\n0\n-2.64007\n-6.21136\nLWK\n\n\n16\n143933640\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.60035\n-3.48907\n-2.84799\n-3.31741\n-3.00925\n-2.25468\n-1.78508\n-2.13504\n-1.42922\n-0.891489\n-0.797086\n-0.155709\n0\n-2.28923\n-6.19141\nLWK\n\n\n17\n144000863\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.1906\n-5.54607\n-2.96763\n-1.44881\n-1.3916\n-0.718873\n-0.52636\n-0.707807\n-0.612049\n-1.00471\n-0.532867\n-0.916117\n0\n-0.822421\n-6.03882\nLWK\n\n\n18\n150462603\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.26608\n-3.52707\n-2.08692\n-1.64285\n-0.904883\n-0.65409\n-0.921789\n-0.882149\n-0.834071\n-0.912944\n-0.806628\n-0.74774\n-0.209675\n0\n-0.9006\n-6.26608\nLWK\n\n\n19\n152903471\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.83006\n-3.35138\n-3.26555\n-3.00456\n-2.25703\n-1.75226\n-1.16238\n-1.24068\n-0.997174\n-1.1042\n-0.787787\n-0.911382\n-0.505031\n-0.717754\n-0.374738\n0\n-1.30337\n-6.05563\nLWK\n\n\n20\n10433671\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.30437\n-3.90178\n-3.37996\n-2.3228\n-2.46478\n-1.89241\n-1.90506\n-1.34941\n-1.5476\n-1.54355\n-1.19295\n-0.695739\n-0.684718\n0\n-1.2401\n-6.16514\nESN\n\n\n21\n18440969\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.3714\n-5.41901\n-4.78356\n-4.30418\n-3.45676\n-3.08551\n-2.51404\n-2.02397\n-1.64996\n-1.6503\n-1.23282\n-0.887465\n-1.24511\n-0.941064\n-0.769957\n-0.537329\n-0.366348\n-0.262659\n0\n-1.22932\n-6.3714\nESN\n\n\n22\n18447244\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.58289\n-4.74861\n-4.14626\n-4.16688\n-3.62523\n-2.81636\n-2.14688\n-1.65372\n-2.49668\n-2.40288\n-1.71911\n-2.00203\n-1.4733\n-1.17923\n-0.785753\n-0.50429\n-0.339557\n0\n-1.51213\n-6.16464\nESN\n\n\n23\n18481819\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.16464\n-5.12612\n-3.67577\n-3.79262\n-3.70623\n-2.69826\n-3.45426\n-2.49668\n-1.79639\n-1.2687\n-0.989149\n-0.543656\n-0.925556\n-0.635807\n-0.44514\n-0.250373\n0\n-1.07963\n-6.16464\nESN\n\n\n24\n18483252\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.16464\n-5.12612\n-3.67577\n-3.79262\n-3.70623\n-2.69826\n-3.45426\n-2.49668\n-1.79639\n-1.2687\n-0.989149\n-0.543656\n-0.925556\n-0.635807\n-0.44514\n-0.250373\n0\n-1.07963\n-6.16464\nESN\n\n\n25\n22782732\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.48775\n-5.90979\n-6.47021\n-7.46746\n-6.25368\n-5.6277\n-5.655\n-4.56263\n-3.38877\n-2.77101\n-3.13412\n-3.05309\n-2.6762\n-2.60909\n-2.60603\n0\n-3.14122\n-6.16845\nESN\n\n\n26\n35419661\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.95682\n-3.21993\n-3.32399\n-2.96359\n-2.15146\n-1.65284\n-1.66085\n-1.37105\n-0.914253\n-0.918748\n-1.03318\n-1.05613\n-0.729568\n0\n-0.973941\n-7.25213\nESN\n\n\n27\n35509359\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.82109\n-4.96111\n-4.22286\n-4.11588\n-3.65141\n-3.12141\n-2.18783\n-2.3062\n-2.1749\n-1.42512\n-1.21261\n-1.42246\n-1.12393\n-0.449777\n0\n-2.12103\n-7.27039\nESN\n\n\n28\n40513338\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.76266\n-4.31536\n-3.52969\n-3.23065\n-3.02207\n-2.19945\n-1.88998\n-1.68974\n-1.64152\n-0.89199\n-0.790818\n-0.534257\n0\n-0.895077\n-6.76266\nESN\n\n\n29\n41874375\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.74553\n-5.46025\n-4.86193\n-4.89353\n-3.84742\n-2.99068\n-2.35853\n-2.04362\n-1.8995\n-1.38736\n-0.896827\n-0.96523\n-0.61965\n-0.612641\n-0.709778\n-0.832161\n0\n-1.07963\n-7.37982\nESN\n\n\n30\n41876825\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.30954\n-4.32397\n-3.84967\n-3.99961\n-3.12739\n-2.41043\n-1.88227\n-1.66338\n-1.5766\n-1.13669\n-0.720179\n-0.79672\n-0.501903\n-0.508465\n-0.605733\n-0.728489\n0\n-0.942886\n-6.35182\nESN\n\n\n31\n41926296\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.35182\n-4.60633\n-3.64668\n-2.98875\n-2.29012\n-2.41043\n-1.81782\n-2.21356\n-1.48776\n-1.00315\n-0.671415\n-0.425751\n-0.521517\n-0.880327\n-0.947769\n-0.583063\n0\n-0.942886\n-6.35182\nESN\n\n\n32\n53370653\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.4889\n-5.20894\n-4.73272\n-3.36561\n-2.55956\n-1.93332\n-2.06831\n-2.01507\n-1.81955\n-1.14526\n-1.43709\n-1.12691\n-0.875457\n-0.8438\n-1.05943\n-1.17839\n0\n-0.973941\n-6.4889\nESN\n\n\n33\n62887164\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.50481\n-5.0914\n-3.73243\n-3.69327\n-2.39412\n-2.12344\n-1.0503\n-0.783005\n-0.33048\n-0.213813\n-0.230755\n-0.17913\n-0.197001\n-0.128986\n0\n-0.339662\n-6.35888\nESN\n\n\n34\n63415556\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.52383\n-4.5758\n-4.69152\n-3.28265\n-2.04711\n-1.38024\n-0.843233\n-0.401577\n-0.10922\n-0.0652627\n-0.0380321\n-0.0439023\n-0.0219104\n-0.0116873\n-0.0365339\n0\n-0.0854667\n-6.52383\nESN\n\n\n35\n103289809\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.31952\n-3.52774\n-3.08404\n-2.08687\n-2.15513\n-1.62158\n-1.7402\n-0.82788\n-1.00179\n-0.831865\n-0.871517\n0\n-0.861729\n-6.64907\nESN\n\n\n36\n109627376\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.43575\n-3.87041\n-3.0857\n-2.51524\n-2.52047\n-2.81545\n-2.68571\n-3.08006\n-2.48473\n-1.9958\n-0.897606\n-0.651304\n0\n-1.43164\n-6.13602\nESN\n\n\n37\n112160900\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.43575\n-5.38637\n-3.88469\n-3.45607\n-2.96721\n-2.64082\n-2.03527\n-1.29958\n-1.21555\n-1.05329\n-1.07308\n-0.574518\n0\n-1.026\n-7.31978\nESN\n\n\n38\n116159033\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.95311\n-5.17202\n-5.3173\n-4.59196\n-3.21873\n-2.62426\n-1.37306\n-0.826033\n0\n-1.53169\n-7.14378\nESN\n\n\n39\n124789742\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.12613\n-5.01381\n-3.60554\n-3.4806\n-2.51229\n-1.92253\n-1.8892\n-1.89896\n-1.14462\n-1.20853\n-1.3549\n-1.52762\n-1.10873\n-0.589325\n-0.771974\n0\n-1.46516\n-6.12613\nESN\n\n\n40\n131281844\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.61601\n-4.28734\n-3.36926\n-3.02025\n-3.26647\n-1.94882\n-2.23222\n-2.06141\n-1.23987\n-0.942676\n-0.603847\n-1.15056\n0\n-1.15928\n-6.61601\nESN\n\n\n41\n154536002\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.24571\n-5.60519\n-5.77814\n-5.052\n-4.27854\n-3.39792\n0\n-3.22606\n-6.24571\nESN\n\n\n42\n154663327\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.42215\n-4.87072\n-4.80433\n-3.97045\n-2.6174\n-2.67718\n0\n-2.50562\n-6.18164\nESN\n\n\n43\n2961533\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58444\n-5.52244\n-4.47521\n-3.67965\n-3.19994\n-2.68546\n-1.88169\n-2.22346\n-1.83375\n-1.13604\n-1.3933\n-0.872469\n-0.659929\n-1.45111\n-0.97597\n-0.535128\n0\n-1.6736\n-7.12284\nGWD\n\n\n44\n9293054\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.31831\n-7.69339\n-5.52826\n-4.10628\n-3.55392\n-1.83958\n-1.26619\n-1.68272\n-0.597424\n0\n-1.89336\n-8.09089\nGWD\n\n\n45\n40175946\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.59726\n-5.45196\n-4.22443\n-3.19834\n-3.59486\n-2.84609\n-2.27123\n-1.91631\n-1.27354\n-0.766882\n-0.81532\n-0.883013\n-0.913415\n-0.623668\n-0.14444\n0\n-1.01826\n-6.63706\nGWD\n\n\n46\n40177042\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.59726\n-5.45196\n-4.22443\n-3.19834\n-3.59486\n-2.84609\n-2.27123\n-1.91631\n-1.27354\n-0.766882\n-0.81532\n-0.883013\n-0.913415\n-0.623668\n-0.14444\n0\n-1.01826\n-6.63706\nGWD\n\n\n47\n43917697\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.06123\n-5.76398\n-4.16859\n-3.93699\n-3.6818\n-2.68016\n-2.65063\n-1.5569\n-1.37029\n-1.05356\n-0.381816\n-0.178228\n-0.11197\n-0.157894\n-0.121757\n0\n-0.531725\n-7.06123\nGWD\n\n\n48\n43925554\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.35175\n-5.35175\n-2.76726\n-2.51019\n-2.93422\n-2.23153\n-1.13364\n-0.939554\n-0.691534\n-0.439265\n-0.319437\n-0.103001\n-0.0904211\n-0.154449\n-0.060873\n0\n-0.415579\n-6.00065\nGWD\n\n\n49\n53491872\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-9.01158\n-8.14752\n-5.59432\n-5.22625\n-3.80353\n-3.10649\n-2.06091\n-1.81698\n-1.32175\n-1.13613\n-0.997466\n-0.571811\n-1.25803\n0\n-1.24053\n-9.01158\nGWD\n\n\n50\n53609779\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.85446\n-5.08308\n-4.28294\n-3.07821\n-2.67199\n-2.27746\n-1.62848\n-1.29242\n-0.90686\n-0.566766\n-0.603241\n-0.983535\n-1.06175\n-0.845169\n-0.935203\n0\n-0.669456\n-6.85446\nGWD\n\n\n51\n87145373\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.31892\n-3.74655\n-3.19819\n-2.12386\n-1.24034\n-0.743866\n-0.830477\n-0.444788\n-0.559705\n-0.420263\n-0.326049\n-0.707652\n0\n-0.603442\n-6.18217\nGWD\n\n\n52\n99695112\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.57711\n-5.79707\n-4.38867\n-2.89989\n-2.43647\n-2.65099\n-2.14068\n-1.28274\n-1.55539\n-1.07568\n-0.78649\n-0.525383\n-0.53366\n0\n-1.5343\n-7.32309\nGWD\n\n\n53\n109733306\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.04975\n-5.81475\n-4.2209\n-4.28895\n-3.88972\n-2.79841\n-2.31578\n-1.40897\n-1.49408\n-0.984855\n0\n-1.74687\n-6.42781\nGWD\n\n\n54\n110194792\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.01448\n-5.39705\n-4.50672\n-2.77619\n-2.56192\n-3.2038\n-2.50238\n-2.39812\n-1.86787\n-1.7836\n-1.80115\n-1.0711\n-0.922552\n-1.06377\n-0.556356\n-0.369224\n0\n-1.52823\n-6.01448\nGWD\n\n\n55\n110200697\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.01448\n-5.39705\n-4.50672\n-2.77619\n-2.56192\n-3.2038\n-2.50238\n-2.39812\n-1.86787\n-1.7836\n-1.80115\n-1.0711\n-0.922552\n-1.06377\n-0.556356\n-0.369224\n0\n-1.52823\n-6.01448\nGWD\n\n\n56\n110224305\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.11726\n-3.86364\n-3.81223\n-3.91097\n-3.47338\n-2.88996\n-2.1482\n-1.80848\n-1.33451\n-1.16365\n-1.01818\n-0.822106\n-0.390584\n-0.224724\n0\n-1.33849\n-6.11726\nGWD\n\n\n57\n110224535\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.01448\n-5.39705\n-4.50672\n-2.77619\n-2.56192\n-3.2038\n-2.50238\n-2.39812\n-1.86787\n-1.7836\n-1.80115\n-1.0711\n-0.922552\n-1.06377\n-0.556356\n-0.369224\n0\n-1.52823\n-6.01448\nGWD\n\n\n58\n110227268\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.01448\n-5.39705\n-4.50672\n-2.77619\n-2.56192\n-3.2038\n-2.50238\n-2.39812\n-1.86787\n-1.7836\n-1.80115\n-1.0711\n-0.922552\n-1.06377\n-0.556356\n-0.369224\n0\n-1.52823\n-6.01448\nGWD\n\n\n59\n110302165\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.75633\n-5.32699\n-4.5366\n-5.03122\n-4.7863\n-5.29974\n-3.79338\n-2.78611\n-1.8812\n-1.80009\n-1.08645\n-1.00731\n-0.753316\n-0.575734\n0\n-1.46738\n-6.05079\nGWD\n\n\n60\n111005660\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.07029\n-5.49065\n-4.06246\n-4.05276\n-4.00494\n-3.19063\n-3.42635\n-2.59442\n-2.4315\n-1.96893\n-1.71905\n-0.969491\n-0.777695\n-0.681137\n-0.354751\n-0.268574\n0\n-1.34124\n-6.07029\nGWD\n\n\n61\n130985076\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.88648\n-6.04409\n-5.74442\n-4.74212\n-4.46402\n-3.74481\n-3.01311\n-2.50887\n-2.18905\n-1.6746\n-1.32927\n-1.00981\n-0.721538\n-0.503026\n-0.387178\n-0.230491\n-0.54817\n0\n-1.48867\n-6.88648\nGWD\n\n\n62\n131281844\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.03994\n-5.35581\n-4.74909\n-4.17628\n-4.17111\n-4.38826\n-2.90486\n-2.34985\n-1.36589\n-1.06413\n-0.85191\n-0.474194\n-0.21928\n0\n-1.18956\n-6.03994\nGWD\n\n\n63\n22782732\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.31568\n-7.68515\n-6.266\n-4.62199\n-4.82604\n-4.11746\n-3.80346\n-3.13623\n-2.96754\n-3.26934\n-1.92518\n-1.32771\n-1.15136\n-0.623392\n-0.369705\n0\n-3.83234\n-7.31568\nMSL\n\n\n64\n145307128\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.09725\n-5.40534\n-5.80445\n-5.31349\n-4.15339\n-3.40605\n-2.67953\n-1.58921\n-0.878767\n-1.14797\n-1.17716\n-1.54802\n-1.73211\n-1.64087\n-0.849035\n0\n-1.39019\n-7.16608\nMSL\n\n\n65\n3634773\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.97084\n-6.37635\n-5.03728\n-4.53059\n-3.23762\n-2.14802\n-1.198\n-0.878569\n-0.466934\n-0.744106\n-0.521109\n-0.317657\n-0.226386\n-0.187231\n-0.0750771\n0\n-0.496747\n-6.70243\nYRI\n\n\n66\n5445914\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.2134\n-4.59587\n-3.23402\n-2.80243\n-3.33431\n-1.82269\n-1.48384\n0\n-1.69073\n-6.04987\nYRI\n\n\n67\n14404233\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.01234\n-3.51335\n-3.21874\n-1.84427\n-2.22553\n-2.20863\n-1.50039\n-0.997093\n-0.365347\n-0.709684\n-0.667716\n-0.738015\n-0.722243\n-0.669143\n0\n-0.986658\n-6.35495\nYRI\n\n\n68\n17867086\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.90744\n-5.06889\n-4.74469\n-3.59794\n-3.12384\n-3.39699\n-2.38633\n-1.71987\n-2.30837\n-2.37215\n-1.61331\n-1.03877\n-0.737265\n-0.882403\n-0.641179\n-0.614317\n-0.318861\n0\n-1.25062\n-6.49134\nYRI\n\n\n69\n17885228\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.17108\n-6.63236\n-5.77719\n-4.79449\n-3.89445\n-3.21324\n-2.3171\n-1.62522\n-1.40546\n-1.24577\n-2.449\n-1.67275\n-1.28394\n-0.844416\n-0.765999\n-0.396066\n0\n-1.39345\n-7.84451\nYRI\n\n\n70\n17896338\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58648\n-6.46982\n-6.02007\n-6.02007\n-4.02958\n-3.17826\n-2.83062\n-3.30951\n-3.13819\n-1.64918\n-1.86417\n-1.36788\n-0.913525\n-0.575471\n-0.537864\n-0.426521\n-0.385252\n0\n-0.897054\n-6.58648\nYRI\n\n\n71\n17896641\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58648\n-6.46982\n-6.02007\n-6.02007\n-4.02958\n-3.17826\n-2.83062\n-3.30951\n-3.13819\n-1.64918\n-1.86417\n-1.36788\n-0.913525\n-0.575471\n-0.537864\n-0.426521\n-0.385252\n0\n-0.897054\n-6.58648\nYRI\n\n\n72\n17896735\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58648\n-6.46982\n-6.02007\n-6.02007\n-4.02958\n-3.17826\n-2.83062\n-3.30951\n-3.13819\n-1.64918\n-1.86417\n-1.36788\n-0.913525\n-0.575471\n-0.537864\n-0.426521\n-0.385252\n0\n-0.897054\n-6.58648\nYRI\n\n\n73\n17897830\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58648\n-6.46982\n-6.02007\n-6.02007\n-4.02958\n-3.17826\n-2.83062\n-3.30951\n-3.13819\n-1.64918\n-1.86417\n-1.36788\n-0.913525\n-0.575471\n-0.537864\n-0.426521\n-0.385252\n0\n-0.897054\n-6.58648\nYRI\n\n\n74\n17897985\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58648\n-6.46982\n-6.02007\n-6.02007\n-4.02958\n-3.17826\n-2.83062\n-3.30951\n-3.13819\n-1.64918\n-1.86417\n-1.36788\n-0.913525\n-0.575471\n-0.537864\n-0.426521\n-0.385252\n0\n-0.897054\n-6.58648\nYRI\n\n\n75\n17898001\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58648\n-6.46982\n-6.02007\n-6.02007\n-4.02958\n-3.17826\n-2.83062\n-3.30951\n-3.13819\n-1.64918\n-1.86417\n-1.36788\n-0.913525\n-0.575471\n-0.537864\n-0.426521\n-0.385252\n0\n-0.897054\n-6.58648\nYRI\n\n\n76\n17898727\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.58648\n-6.46982\n-6.02007\n-6.02007\n-4.02958\n-3.17826\n-2.83062\n-3.30951\n-3.13819\n-1.64918\n-1.86417\n-1.36788\n-0.913525\n-0.575471\n-0.537864\n-0.426521\n-0.385252\n0\n-0.897054\n-6.58648\nYRI\n\n\n77\n17900260\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.08667\n-5.06713\n-5.58056\n-3.6356\n-2.7523\n-2.51807\n-1.76014\n-1.8426\n-1.24248\n-1.37883\n-0.869394\n-0.55885\n-0.806626\n-0.475283\n-0.541471\n-0.431646\n0\n-0.833258\n-7.08667\nYRI\n\n\n78\n18422684\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.32806\n-5.28832\n-5.03652\n-3.64021\n-2.3942\n-2.07977\n-1.37968\n-1.41593\n-1.20138\n-0.809862\n-0.733077\n-0.830442\n-0.791821\n-0.67476\n-0.386663\n-0.3358\n0\n-1.03736\n-6.32806\nYRI\n\n\n79\n18526656\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.03506\n-3.76758\n-4.00789\n-3.73989\n-2.82859\n-1.81561\n-1.69837\n-1.47149\n-1.72126\n-1.6346\n-0.883572\n-0.790504\n-0.315779\n0\n-1.63969\n-6.47445\nYRI\n\n\n80\n31588262\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.79212\n-5.05722\n-3.32112\n-4.64169\n-2.80787\n-2.07713\n-1.94094\n-1.76956\n-1.27842\n-1.17578\n-0.654339\n-1.0368\n0\n-0.984089\n-6.33878\nYRI\n\n\n81\n35259177\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.16111\n-5.18451\n-4.50993\n-3.25337\n-3.73803\n-2.43502\n-1.5655\n-1.70549\n-1.15091\n-1.71432\n-1.82467\n-1.3983\n-1.06594\n-0.905361\n0\n-1.56672\n-6.16111\nYRI\n\n\n82\n35317630\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.727\n-5.26244\n-5.36804\n-3.99518\n-2.62016\n-3.21962\n-3.31602\n-3.64616\n-3.46806\n-2.60376\n-1.33535\n-1.0741\n-0.919955\n-1.36026\n0\n-1.21804\n-6.727\nYRI\n\n\n83\n35431367\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.77939\n-5.37146\n-4.34843\n-2.65743\n-2.45677\n-1.32359\n-1.1572\n-0.965855\n-1.18099\n-0.903851\n-1.21338\n-1.02067\n-1.8286\n0\n-1.32454\n-8.32088\nYRI\n\n\n84\n35507958\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.55361\n-5.78937\n-5.18624\n-4.64822\n-3.38377\n-1.77142\n-1.42111\n-0.816632\n-0.489041\n-0.479911\n-0.285063\n-0.361838\n0\n-0.632195\n-6.42948\nYRI\n\n\n85\n35509359\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.28723\n-4.84119\n-3.83709\n-3.80613\n-2.81684\n-2.50896\n-2.07732\n-1.50584\n-0.910773\n-0.48532\n-0.403149\n-0.372624\n-0.204745\n-0.446675\n0\n-0.496808\n-6.11216\nYRI\n\n\n86\n41475313\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.59389\n-5.13805\n-4.16088\n-3.30933\n-3.47558\n-2.7193\n-2.01195\n-1.45402\n-0.908607\n-0.59903\n-0.644161\n-0.375002\n-0.905982\n-0.744997\n-0.742185\n-0.4632\n-0.579974\n0\n-1.17091\n-6.17469\nYRI\n\n\n87\n41874375\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.49469\n-4.56919\n-3.08435\n-1.54564\n-0.924784\n-1.09383\n-0.678755\n-0.272673\n-0.170114\n-0.342847\n-0.320471\n-0.0929894\n-0.141308\n-0.372728\n0\n-0.300982\n-6.14623\nYRI\n\n\n88\n41876825\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.49469\n-4.56919\n-3.08435\n-1.54564\n-0.924784\n-1.09383\n-0.678755\n-0.272673\n-0.170114\n-0.342847\n-0.320471\n-0.0929894\n-0.141308\n-0.372728\n0\n-0.300982\n-6.14623\nYRI\n\n\n89\n54642183\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.94679\n-3.01982\n-1.75687\n-1.16843\n-0.631775\n-0.416034\n-0.355931\n-0.343114\n-0.259862\n0\n-0.399912\n-6.16541\nYRI\n\n\n90\n63441897\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.46201\n-3.78357\n-3.27\n-2.32719\n-2.55338\n-3.07948\n-3.22482\n-2.99716\n-2.1164\n-1.39605\n-0.900344\n-0.858451\n-0.494749\n-0.521069\n-0.318861\n0\n-1.25062\n-6.49134\nYRI\n\n\n91\n63445886\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.46201\n-3.78357\n-3.27\n-2.32719\n-2.55338\n-3.07948\n-3.22482\n-2.99716\n-2.1164\n-1.39605\n-0.900344\n-0.858451\n-0.494749\n-0.521069\n-0.318861\n0\n-1.25062\n-6.49134\nYRI\n\n\n92\n63452326\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.46201\n-3.78357\n-3.27\n-2.32719\n-2.55338\n-3.07948\n-3.22482\n-2.99716\n-2.1164\n-1.39605\n-0.900344\n-0.858451\n-0.494749\n-0.521069\n-0.318861\n0\n-1.25062\n-6.49134\nYRI\n\n\n93\n63461449\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-4.46201\n-3.78357\n-3.27\n-2.32719\n-2.55338\n-3.07948\n-3.22482\n-2.99716\n-2.1164\n-1.39605\n-0.900344\n-0.858451\n-0.494749\n-0.521069\n-0.318861\n0\n-1.25062\n-6.49134\nYRI\n\n\n94\n63809928\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.19646\n-5.6466\n-3.81745\n-3.80128\n-2.82034\n-3.58068\n-3.09015\n-2.26766\n-2.10453\n-1.53828\n-1.03137\n-0.765175\n-0.681114\n-0.394825\n-0.22956\n0\n-0.982392\n-7.19646\nYRI\n\n\n95\n71254098\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.83718\n-3.81952\n-2.36923\n-2.56848\n-2.12286\n-2.50246\n-2.4303\n-2.03265\n-1.5376\n-0.69942\n-0.179659\n-0.116529\n0\n-1.14034\n-6.47445\nYRI\n\n\n96\n71254717\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.83718\n-3.81952\n-2.36923\n-2.56848\n-2.12286\n-2.50246\n-2.4303\n-2.03265\n-1.5376\n-0.69942\n-0.179659\n-0.116529\n0\n-1.14034\n-6.47445\nYRI\n\n\n97\n77829657\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.71828\n-6.14778\n-4.77397\n-3.88045\n-2.05379\n-1.44281\n-2.6835\n-2.42294\n-1.94993\n-2.0071\n0\n-2.35211\n-6.80039\nYRI\n\n\n98\n78587778\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.47959\n-5.87395\n-6.61019\n-6.49899\n-4.812\n-3.45901\n-2.11838\n-1.62739\n-1.79988\n-1.91062\n-2.32419\n-2.06935\n-1.68897\n-1.16859\n-0.671966\n0\n-1.84049\n-6.47959\nYRI\n\n\n99\n79442126\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.96167\n-5.88981\n-3.32655\n-3.14824\n-2.4648\n-1.38623\n-1.68566\n-1.53388\n-0.809732\n-0.770141\n-0.728286\n-0.779353\n-1.12696\n-0.730808\n0\n-0.744401\n-7.7533\nYRI\n\n\n100\n82193821\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.28832\n-4.30647\n-3.44866\n-3.64021\n-2.98483\n-2.15359\n-1.47682\n-0.792531\n-0.591631\n-0.544214\n-0.488887\n-0.528027\n-0.288948\n-0.160586\n-0.138819\n-0.209255\n0\n-0.481451\n-6.32806\nYRI\n\n\n101\n82203456\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.28832\n-4.30647\n-3.44866\n-3.64021\n-2.98483\n-2.15359\n-1.47682\n-0.792531\n-0.591631\n-0.544214\n-0.488887\n-0.528027\n-0.288948\n-0.160586\n-0.138819\n-0.209255\n0\n-0.481451\n-6.32806\nYRI\n\n\n102\n82206435\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.28832\n-4.30647\n-3.44866\n-3.64021\n-2.98483\n-2.15359\n-1.47682\n-0.792531\n-0.591631\n-0.544214\n-0.488887\n-0.528027\n-0.288948\n-0.160586\n-0.138819\n-0.209255\n0\n-0.481451\n-6.32806\nYRI\n\n\n103\n97833845\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.48596\n-5.49419\n-3.84354\n-2.58142\n-3.01533\n-2.22776\n-2.32941\n-1.45582\n-0.490798\n-0.287539\n-0.22418\n-0.188563\n-0.0593047\n0\n-0.359544\n-6.58069\nYRI\n\n\n104\n110124088\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-7.08263\n-5.24908\n-4.52452\n-4.80107\n-3.55737\n-3.53939\n-1.58073\n-1.49225\n-0.942489\n-0.634044\n-0.319719\n-0.461173\n0\n-0.772128\n-7.29576\nYRI\n\n\n105\n110125481\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-10.7913\n-8.17165\n-6.42651\n-5.61493\n-4.90649\n-4.7022\n-4.8953\n-2.92578\n-2.97643\n-2.538\n-1.86539\n-1.52664\n-1.23993\n0\n-2.10993\n-9.64581\nYRI\n\n\n106\n110138945\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-8.52505\n-7.44291\n-6.69029\n-6.36056\n-6.15203\n-4.42343\n-4.63086\n-3.46164\n-2.08258\n-1.60566\n-1.33264\n-1.86539\n-1.173\n-0.796882\n0\n-1.88969\n-7.97396\nYRI\n\n\n107\n129344714\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.02119\n-6.18273\n-6.9742\n-5.09116\n-4.84181\n-4.07205\n-3.1796\n-3.23457\n-2.78009\n-2.64792\n-2.25955\n0\n-2.55587\n-6.02119\nYRI\n\n\n108\n130134414\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.39968\n-5.44417\n-4.06939\n-2.79703\n-1.62386\n-0.804188\n-0.806047\n-1.40466\n-1.36346\n-1.10848\n-0.892731\n-1.20872\n-0.776293\n-0.453093\n0\n-1.13112\n-6.79372\nYRI\n\n\n109\n130136005\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-5.39968\n-5.44417\n-4.06939\n-2.79703\n-1.62386\n-0.804188\n-0.806047\n-1.40466\n-1.36346\n-1.10848\n-0.892731\n-1.20872\n-0.776293\n-0.453093\n0\n-1.13112\n-6.79372\nYRI\n\n\n110\n150477693\n.\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n-6.15505\n-6.5161\n-4.0401\n-2.58452\n-2.29747\n-1.75157\n-2.007\n-1.67514\n-1.05296\n-0.864704\n-0.875746\n-0.782301\n-0.35024\n-0.290633\n0\n-0.587284\n-6.37167\nYRI",
    "crumbs": [
      "Tables",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Tables</span>"
    ]
  }
]